{
  "Summary": {
    "Name": "Quick Sort",
    "Category": "Sorting",
    "Difficulty": 3,
    "Available": true,
    "Metadata": {
      "number": 55,
      "timeOne": 0,
      "timeTwo": 2137,
      "url": "https://player.vimeo.com/video/241820219"
    }
  },
  "Prompt": "",
  "Hints": "Quick Sort works by picking a \"pivot\" number from an array, positioning every other number in the array in sorted order with respect to the pivot (all smaller numbers to the pivot's left; all bigger numbers to the pivot's right), and then repeating the same two steps on both sides of the pivot until the entire array is sorted.\nPick a random number from the input array (the first number, for instance) and let that number be the pivot. Iterate through the rest of the array using two pointers, one starting at the left extremity of the array and progressively moving to the right, and the other one starting at the right extremity of the array and progressively moving to the left. As you iterate through the array, compare the left and right pointer numbers to the pivot. If the left number is greater than the pivot and the right number is less than the pivot, swap them; this will effectively sort these numbers with respect to the pivot at the end of the iteration. If the left number is ever less than or equal to the pivot, increment the left pointer; similarly, if the right number is ever greater than or equal to the pivot, decrement the right pointer. Do this until the pointers pass each other, at which point swapping the pivot with the right number should position the pivot in its final, sorted position, where every number to its left is smaller and every number to its right is greater.\nRepeat the process mentioned in Hint #2 on the respective subarrays located to the left and right of your pivot, and keep on repeating the process thereafter until the input array is fully sorted.\n",
  "SpaceTime": "Best: O(nlog(n)) time | O(log(n)) space - where n is the length of the input array\nAverage: O(nlog(n)) time | O(log(n)) space - where n is the length of the input array\nWorst: O(n^2) time | O(log(n)) space - where n is the length of the input array\n",
  "PromptHTML": "<p>\n  Write a function that takes in an array of integers and returns a sorted\n  version of that array. Use the Quick Sort algorithm to sort the array.\n</p>\n<p>\n  If you're unfamiliar with Quick Sort, we recommend watching the Conceptual\n  Overview section of this question's video explanation before starting to code.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">array</span> = [8, 5, 2, 9, 5, 6, 3]\n</pre>\n<h3>Sample Output</h3>\n<pre>\n[2, 3, 5, 5, 6, 8, 9]\n</pre>\n",
  "Notes": "",
  "IsLongOutput": false,
  "Visualization": {
    "inputType": null,
    "outputType": null
  },
  "CustomInputLanguages": [
    "javascript",
    "cpp",
    "python",
    "java",
    "csharp",
    "go",
    "swift",
    "typescript"
  ],
  "CustomInputVars": [
    {
      "Name": "array",
      "Example": [
        8,
        5,
        2,
        9,
        5,
        6,
        3
      ],
      "Schema": {
        "items": {
          "type": "integer"
        },
        "type": "array"
      }
    }
  ],
  "Resources": {
    "cpp": {
      "Language": "cpp",
      "StartingCode": "#include <vector>\nusing namespace std;\n\nvector<int> quickSort(vector<int> array) {\n  // Write your code here.\n  return {};\n}\n",
      "StartingTest": "class ProgramTest : public TestSuite {\npublic:\n  void Run() {\n\n    RunTest(\"Test Case 1\", []() {\n      vector<int> expected{1};\n      assert(quickSort({1}) == expected);\n    });\n\n    RunTest(\"Test Case 2\", []() {\n      vector<int> expected{1, 2};\n      assert(quickSort({1, 2}) == expected);\n    });\n\n    RunTest(\"Test Case 3\", []() {\n      vector<int> expected{1, 2};\n      assert(quickSort({2, 1}) == expected);\n    });\n\n    RunTest(\"Test Case 4\", []() {\n      vector<int> expected{1, 2, 3};\n      assert(quickSort({1, 3, 2}) == expected);\n    });\n\n    RunTest(\"Test Case 5\", []() {\n      vector<int> expected{1, 2, 3};\n      assert(quickSort({3, 1, 2}) == expected);\n    });\n\n    RunTest(\"Test Case 6\", []() {\n      vector<int> expected{1, 2, 3};\n      assert(quickSort({1, 2, 3}) == expected);\n    });\n\n    RunTest(\"Test Case 7\", []() {\n      vector<int> expected{-10, -7, -7, -6, -6, -5, -5, -4, -4, -4,\n                           -2,  -1, 1,  3,  5,  5,  6,  8,  8,  10};\n      assert(quickSort({-4, 5,  10, 8,  -10, -6, -4, -2, -5, 3,\n                        5,  -4, -5, -1, 1,   6,  -7, -6, -7, 8}) == expected);\n    });\n\n    RunTest(\"Test Case 8\", []() {\n      vector<int> expected{-10, -10, -9, -7, -7, -6, -5, -2, 2,\n                           2,   3,   3,  4,  5,  8,  8,  9,  10};\n      assert(quickSort({-7, 2, 3, 8, -10, 4, -6, -10, -2, -7, 10, 5, 2, 9, -9,\n                        -5, 3, 8}) == expected);\n    });\n\n    RunTest(\"Test Case 9\", []() {\n      vector<int> expected{-10, -10, -9, -6, -5, -2, -2, -1, 1, 2,  4,\n                           4,   6,   7,  7,  8,  8,  8,  8,  9, 10, 10};\n      assert(quickSort({8,  -6, 7,   10, 8,   -1, 6, 2,  4, -5, 1,\n                        10, 8,  -10, -9, -10, 8,  9, -2, 7, -2, 4}) ==\n             expected);\n    });\n\n    RunTest(\"Test Case 10\", []() {\n      vector<int> expected{-10, -8, -6, -2, -2, -1, 1, 1, 2, 2, 3, 5, 9};\n      assert(quickSort({5, -2, 2, -8, 3, -10, -6, -1, 2, -2, 9, 1, 1}) ==\n             expected);\n    });\n\n    RunTest(\"Test Case 11\", []() {\n      vector<int> expected{-10, -10, -9, -9, -9, -8, -8, -6, -4, -4,\n                           -4,  -2,  -1, 0,  0,  0,  0,  1,  1,  2,\n                           2,   4,   4,  5,  5,  7,  8,  8,  9,  10};\n      assert(quickSort({2,  -2, -6, -10, 10, 4, -8, -1, -8, -4,\n                        7,  -4, 0,  9,   -9, 0, -9, -9, 8,  1,\n                        -4, 4,  8,  5,   1,  5, 0,  0,  2,  -10}) == expected);\n    });\n\n    RunTest(\"Test Case 12\", []() {\n      vector<int> expected{-9, -9, -9, -7, -7, -7, -4, -4, -3, -3, -3,\n                           -2, -1, 0,  1,  1,  3,  4,  4,  5,  8,  9};\n      assert(quickSort({4, 1, 5,  0,  -9, -3, -3, 9,  3,  -4, -9,\n                        8, 1, -3, -7, -4, -9, -1, -7, -2, -7, 4}) == expected);\n    });\n\n    RunTest(\"Test Case 13\", []() {\n      vector<int> expected{-991, -848, -764, -755, -710, -706, -646, -614, -610,\n                           -583, -484, -474, -439, -359, -348, -246, -215, -212,\n                           -171, -160, -153, -56,  -32,  -27,  -3,   9,    12,\n                           55,   107,  131,  222,  230,  240,  246,  427,  507,\n                           564,  565,  568,  603,  635,  661,  710,  736,  787,\n                           821,  892,  934,  970,  996};\n      assert(quickSort({427,  787,  222,  996,  -359, -614, 246,  230,  107,\n                        -706, 568,  9,    -246, 12,   -764, -212, -484, 603,\n                        934,  -848, -646, -991, 661,  -32,  -348, -474, -439,\n                        -56,  507,  736,  635,  -171, -215, 564,  -710, 710,\n                        565,  892,  970,  -755, 55,   821,  -3,   -153, 240,\n                        -160, -610, -583, -27,  131}) == expected);\n    });\n\n    RunTest(\"Test Case 14\", []() {\n      vector<int> expected{-998, -882, -827, -817, -796, -731, -681, -657, -581,\n                           -523, -435, -387, -382, -331, -269, -255, -220, -216,\n                           -169, -163, -75,  -43,  -6,   80,   100,  180,  228,\n                           280,  354,  366,  372,  382,  382,  432,  471,  519,\n                           652,  680,  747,  749,  753,  769,  771,  805,  847,\n                           906,  913,  956,  972,  980,  991};\n      assert(quickSort({991,  -731, -882, 100,  280,  -43,  432,  771,  -581,\n                        180,  -382, -998, 847,  80,   -220, 680,  769,  -75,\n                        -817, 366,  956,  749,  471,  228,  -435, -269, 652,\n                        -331, -387, -657, -255, 382,  -216, -6,   -163, -681,\n                        980,  913,  -169, 972,  -523, 354,  747,  805,  382,\n                        -827, -796, 372,  753,  519,  906}) == expected);\n    });\n\n    RunTest(\"Test Case 15\", []() {\n      vector<int> expected{\n          -995, -987, -978, -898, -796, -785, -772, -763, -755, -746, -720,\n          -679, -626, -609, -581, -562, -559, -557, -544, -491, -489, -425,\n          -389, -367, -343, -313, -112, -94,  -86,  -79,  -68,  -67,  -19,\n          -7,   31,   34,   43,   51,   67,   85,   120,  165,  187,  204,\n          232,  243,  260,  384,  393,  397,  421,  432,  444,  489,  508,\n          515,  612,  624,  662,  687,  697,  732,  737,  759,  776,  777,\n          825,  878,  921,  924,  946,  947,  975,  993};\n      assert(\n          quickSort({384,  -67,  120,  759,  697,  232, -7,   -557, -772, -987,\n                     687,  397,  -763, -86,  -491, 947, 921,  421,  825,  -679,\n                     946,  -562, -626, -898, 204,  776, -343, 393,  51,   -796,\n                     -425, 31,   165,  975,  -720, 878, -785, -367, -609, 662,\n                     -79,  -112, -313, -94,  187,  260, 43,   85,   -746, 612,\n                     67,   -389, 508,  777,  624,  993, -581, 34,   444,  -544,\n                     243,  -995, 432,  -755, -978, 515, -68,  -559, 489,  732,\n                     -19,  -489, 737,  924}) == expected);\n    });\n\n    RunTest(\"Test Case 16\", []() {\n      vector<int> expected{\n          -975, -947, -924, -917, -877, -810, -753, -739, -738, -731, -702,\n          -685, -656, -655, -581, -578, -531, -500, -488, -401, -396, -359,\n          -356, -320, -312, -279, -249, -154, -90,  -54,  -45,  61,   94,\n          150,  153,  153,  194,  195,  266,  329,  343,  376,  394,  399,\n          445,  452,  459,  464,  528,  544,  551,  556,  568,  669,  689,\n          713,  738,  748,  763,  788,  844,  867,  886,  904,  972,  993};\n      assert(\n          quickSort({544,  -578, 556,  713,  -655, -359, -810, -731, 194, -531,\n                     -685, 689,  -279, -738, 886,  -54,  -320, -500, 738, 445,\n                     -401, 993,  -753, 329,  -396, -924, -975, 376,  748, -356,\n                     972,  459,  399,  669,  -488, 568,  -702, 551,  763, -90,\n                     -249, -45,  452,  -917, 394,  195,  -877, 153,  153, 788,\n                     844,  867,  266,  -739, 904,  -154, -947, 464,  343, -312,\n                     150,  -656, 528,  61,   94,   -581}) == expected);\n    });\n\n    RunTest(\"Test Case 17\", []() {\n      vector<int> expected{\n          -991, -976, -937, -917, -904, -885, -837, -821, -740, -641, -628,\n          -609, -602, -599, -568, -560, -557, -529, -519, -453, -415, -384,\n          -373, -321, -319, -220, -158, -96,  -92,  -90,  -85,  -67,  -50,\n          -36,  -19,  63,   80,   121,  154,  168,  207,  228,  254,  268,\n          268,  270,  294,  295,  296,  306,  307,  328,  351,  381,  387,\n          391,  401,  407,  434,  437,  491,  505,  518,  558,  588,  593,\n          607,  613,  619,  629,  676,  678,  718,  730,  753,  759,  798,\n          802,  834,  879,  881,  896,  915,  937,  946,  949,  986};\n      assert(\n          quickSort({-19,  759,  168,  306,  270,  -602, 558,  -821, -599, 328,\n                     753,  -50,  -568, 268,  -92,  381,  -96,  730,  629,  678,\n                     -837, 351,  896,  63,   -85,  437,  -453, -991, 294,  -384,\n                     -628, -529, 518,  613,  -319, -519, -220, -67,  834,  619,\n                     802,  207,  946,  -904, 295,  718,  -740, -557, -560, 80,\n                     296,  -90,  401,  407,  798,  254,  154,  387,  434,  491,\n                     228,  307,  268,  505,  -415, -976, 676,  -917, 937,  -609,\n                     593,  -36,  881,  607,  121,  -373, 915,  -885, 879,  391,\n                     -158, 588,  -641, -937, 986,  949,  -321}) == expected);\n    });\n\n    RunTest(\"Test Case 18\", []() {\n      vector<int> expected{\n          -987, -950, -949, -942, -941, -935, -908, -874, -855, -846, -823,\n          -817, -796, -738, -733, -730, -685, -578, -575, -575, -544, -542,\n          -469, -441, -420, -415, -410, -376, -371, -363, -359, -353, -337,\n          -293, -265, -257, -254, -191, -167, -160, -155, -126, -120, -51,\n          -36,  -13,  14,   48,   52,   59,   59,   125,  157,  164,  183,\n          201,  238,  243,  295,  323,  328,  341,  355,  356,  372,  399,\n          422,  490,  490,  540,  572,  610,  631,  646,  700,  724,  746,\n          800,  829,  842,  888,  892,  892,  919,  950,  965,  980,  995};\n      assert(quickSort({-823, 164,  48,   -987, 323,  399,  -293, 183,  -908,\n                        -376, 14,   980,  965,  842,  422,  829,  59,   724,\n                        -415, -733, 356,  -855, -155, 52,   328,  -544, -371,\n                        -160, -942, -51,  700,  -363, -353, -359, 238,  892,\n                        -730, -575, 892,  490,  490,  995,  572,  888,  -935,\n                        919,  -191, 646,  -120, 125,  -817, 341,  -575, 372,\n                        -874, 243,  610,  -36,  -685, -337, -13,  295,  800,\n                        -950, -949, -257, 631,  -542, 201,  -796, 157,  950,\n                        540,  -846, -265, 746,  355,  -578, -441, -254, -941,\n                        -738, -469, -167, -420, -126, -410, 59}) == expected);\n    });\n  }\n};\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\npublic:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<int> expected = {2, 3, 5, 5, 6, 8, 9};\n      assert(quickSort({8, 5, 2, 9, 5, 6, 3}) == expected);\n    });\n  }\n};\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\n#include <vector>\nusing namespace std;\n\nvoid quickSortHelper(vector<int> &array, int startIdx, int endIdx);\n\n// Best: O(nlog(n)) time | O(log(n)) space\n// Average: O(nlog(n)) time | O(log(n)) space\n// Worst: O(n^2) time | O(log(n)) space\nvector<int> quickSort(vector<int> array) {\n  quickSortHelper(array, 0, array.size() - 1);\n  return array;\n}\n\nvoid quickSortHelper(vector<int> &array, int startIdx, int endIdx) {\n  if (startIdx >= endIdx) {\n    return;\n  }\n  int pivotIdx = startIdx;\n  int leftIdx = startIdx + 1;\n  int rightIdx = endIdx;\n  while (rightIdx >= leftIdx) {\n    if (array.at(leftIdx) > array.at(pivotIdx) &&\n        array.at(rightIdx) < array.at(pivotIdx)) {\n      swap(array[leftIdx], array[rightIdx]);\n    }\n    if (array.at(leftIdx) <= array.at(pivotIdx)) {\n      leftIdx += 1;\n    }\n    if (array.at(rightIdx) >= array.at(pivotIdx)) {\n      rightIdx -= 1;\n    }\n  }\n  swap(array[pivotIdx], array[rightIdx]);\n  bool leftSubarrayIsSmaller =\n      rightIdx - 1 - startIdx < endIdx - (rightIdx + 1);\n  if (leftSubarrayIsSmaller) {\n    quickSortHelper(array, startIdx, rightIdx - 1);\n    quickSortHelper(array, rightIdx + 1, endIdx);\n  } else {\n    quickSortHelper(array, rightIdx + 1, endIdx);\n    quickSortHelper(array, startIdx, rightIdx - 1);\n  }\n}\n"
      ]
    },
    "csharp": {
      "Language": "csharp",
      "StartingCode": "public class Program {\n\tpublic static int[] QuickSort(int[] array) {\n\t\t// Write your code here.\n\t\treturn null;\n\t}\n}\n",
      "StartingTest": "public class ProgramTest {\n\t[Test]\n\tpublic void TestCase1() {\n\t\tint[] expected = {1};\n\t\tint[] input = {1};\n\t\tUtils.AssertTrue(compare(Program.QuickSort(input), expected));\n\t}\n\n\t[Test]\n\tpublic void TestCase2() {\n\t\tint[] expected = {1, 2};\n\t\tint[] input = {1, 2};\n\t\tUtils.AssertTrue(compare(Program.QuickSort(input), expected));\n\t}\n\n\t[Test]\n\tpublic void TestCase3() {\n\t\tint[] expected = {1, 2};\n\t\tint[] input = {2, 1};\n\t\tUtils.AssertTrue(compare(Program.QuickSort(input), expected));\n\t}\n\n\t[Test]\n\tpublic void TestCase4() {\n\t\tint[] expected = {1, 2, 3};\n\t\tint[] input = {1, 3, 2};\n\t\tUtils.AssertTrue(compare(Program.QuickSort(input), expected));\n\t}\n\n\t[Test]\n\tpublic void TestCase5() {\n\t\tint[] expected = {1, 2, 3};\n\t\tint[] input = {3, 1, 2};\n\t\tUtils.AssertTrue(compare(Program.QuickSort(input), expected));\n\t}\n\n\t[Test]\n\tpublic void TestCase6() {\n\t\tint[] expected = {1, 2, 3};\n\t\tint[] input = {1, 2, 3};\n\t\tUtils.AssertTrue(compare(Program.QuickSort(input), expected));\n\t}\n\n\t[Test]\n\tpublic void TestCase7() {\n\t\tint[] expected =\n\t\t{-10, -7, -7, -6, -6, -5, -5, -4, -4, -4, -2, -1, 1, 3, 5, 5, 6, 8, 8, 10};\n\t\tint[] input =\n\t\t{-4, 5, 10, 8, -10, -6, -4, -2, -5, 3, 5, -4, -5, -1, 1, 6, -7, -6, -7, 8};\n\t\tUtils.AssertTrue(compare(Program.QuickSort(input), expected));\n\t}\n\n\t[Test]\n\tpublic void TestCase8() {\n\t\tint[] expected = {-10, -10, -9, -7, -7, -6, -5, -2, 2, 2, 3, 3, 4, 5, 8, 8, 9, 10};\n\t\tint[] input = {-7, 2, 3, 8, -10, 4, -6, -10, -2, -7, 10, 5, 2, 9, -9, -5, 3, 8};\n\t\tUtils.AssertTrue(compare(Program.QuickSort(input), expected));\n\t}\n\n\t[Test]\n\tpublic void TestCase9() {\n\t\tint[] expected =\n\t\t{-10, -10, -9, -6, -5, -2, -2, -1, 1, 2, 4, 4, 6, 7, 7, 8, 8, 8, 8, 9, 10, 10};\n\t\tint[] input =\n\t\t{8, -6, 7, 10, 8, -1, 6, 2, 4, -5, 1, 10, 8, -10, -9, -10, 8, 9, -2, 7, -2, 4};\n\t\tUtils.AssertTrue(compare(Program.QuickSort(input), expected));\n\t}\n\n\t[Test]\n\tpublic void TestCase10() {\n\t\tint[] expected = {-10, -8, -6, -2, -2, -1, 1, 1, 2, 2, 3, 5, 9};\n\t\tint[] input = {5, -2, 2, -8, 3, -10, -6, -1, 2, -2, 9, 1, 1};\n\t\tUtils.AssertTrue(compare(Program.QuickSort(input), expected));\n\t}\n\n\t[Test]\n\tpublic void TestCase11() {\n\t\tint[] expected =\n\t\t{-10, -10, -9, -9, -9, -8, -8, -6, -4, -4, -4, -2, -1, 0, 0, 0, 0, 1, 1, 2, 2, 4, 4,\n\t\t 5, 5, 7, 8, 8, 9, 10};\n\t\tint[] input =\n\t\t{2, -2, -6, -10, 10, 4, -8, -1, -8, -4, 7, -4, 0, 9, -9, 0, -9, -9, 8, 1, -4, 4, 8,\n\t\t 5, 1, 5, 0, 0, 2, -10};\n\t\tUtils.AssertTrue(compare(Program.QuickSort(input), expected));\n\t}\n\n\t[Test]\n\tpublic void TestCase12() {\n\t\tint[] expected =\n\t\t{-9, -9, -9, -7, -7, -7, -4, -4, -3, -3, -3, -2, -1, 0, 1, 1, 3, 4, 4, 5, 8, 9};\n\t\tint[] input =\n\t\t{4, 1, 5, 0, -9, -3, -3, 9, 3, -4, -9, 8, 1, -3, -7, -4, -9, -1, -7, -2, -7, 4};\n\t\tUtils.AssertTrue(compare(Program.QuickSort(input), expected));\n\t}\n\n\t[Test]\n\tpublic void TestCase13() {\n\t\tint[] expected =\n\t\t{-991, -848, -764, -755, -710, -706, -646, -614, -610, -583, -484, -474, -439, -359,\n\t\t -348, -246, -215, -212, -171, -160, -153, -56, -32, -27, -3, 9, 12, 55, 107,\n\t\t 131, 222, 230, 240, 246, 427, 507, 564, 565, 568, 603, 635, 661, 710, 736,\n\t\t 787, 821, 892, 934, 970, 996};\n\t\tint[] input =\n\t\t{427, 787, 222, 996, -359, -614, 246, 230, 107, -706, 568, 9, -246, 12, -764, -212,\n\t\t -484, 603, 934, -848, -646, -991, 661, -32, -348, -474, -439, -56, 507, 736,\n\t\t 635, -171, -215, 564, -710, 710, 565, 892, 970, -755, 55, 821, -3, -153,\n\t\t 240, -160, -610, -583, -27, 131};\n\t\tUtils.AssertTrue(compare(Program.QuickSort(input), expected));\n\t}\n\n\t[Test]\n\tpublic void TestCase14() {\n\t\tint[] expected =\n\t\t{-998, -882, -827, -817, -796, -731, -681, -657, -581, -523, -435, -387, -382, -331,\n\t\t -269, -255, -220, -216, -169, -163, -75, -43, -6, 80, 100, 180, 228, 280,\n\t\t 354, 366, 372, 382, 382, 432, 471, 519, 652, 680, 747, 749, 753, 769, 771,\n\t\t 805, 847, 906, 913, 956, 972, 980, 991};\n\t\tint[] input =\n\t\t{991, -731, -882, 100, 280, -43, 432, 771, -581, 180, -382, -998, 847, 80, -220,\n\t\t 680, 769, -75, -817, 366, 956, 749, 471, 228, -435, -269, 652, -331, -387,\n\t\t -657, -255, 382, -216, -6, -163, -681, 980, 913, -169, 972, -523, 354, 747,\n\t\t 805, 382, -827, -796, 372, 753, 519, 906};\n\t\tUtils.AssertTrue(compare(Program.QuickSort(input), expected));\n\t}\n\n\t[Test]\n\tpublic void TestCase15() {\n\t\tint[] expected =\n\t\t{-995, -987, -978, -898, -796, -785, -772, -763, -755, -746, -720, -679, -626, -609,\n\t\t -581, -562, -559, -557, -544, -491, -489, -425, -389, -367, -343, -313,\n\t\t -112, -94, -86, -79, -68, -67, -19, -7, 31, 34, 43, 51, 67, 85, 120, 165,\n\t\t 187, 204, 232, 243, 260, 384, 393, 397, 421, 432, 444, 489, 508, 515, 612,\n\t\t 624, 662, 687, 697, 732, 737, 759, 776, 777, 825, 878, 921, 924, 946, 947,\n\t\t 975, 993};\n\t\tint[] input =\n\t\t{384, -67, 120, 759, 697, 232, -7, -557, -772, -987, 687, 397, -763, -86, -491, 947,\n\t\t 921, 421, 825, -679, 946, -562, -626, -898, 204, 776, -343, 393, 51, -796,\n\t\t -425, 31, 165, 975, -720, 878, -785, -367, -609, 662, -79, -112, -313, -94,\n\t\t 187, 260, 43, 85, -746, 612, 67, -389, 508, 777, 624, 993, -581, 34, 444,\n\t\t -544, 243, -995, 432, -755, -978, 515, -68, -559, 489, 732, -19, -489, 737,\n\t\t 924};\n\t\tUtils.AssertTrue(compare(Program.QuickSort(input), expected));\n\t}\n\n\t[Test]\n\tpublic void TestCase16() {\n\t\tint[] expected =\n\t\t{-975, -947, -924, -917, -877, -810, -753, -739, -738, -731, -702, -685, -656, -655,\n\t\t -581, -578, -531, -500, -488, -401, -396, -359, -356, -320, -312, -279,\n\t\t -249, -154, -90, -54, -45, 61, 94, 150, 153, 153, 194, 195, 266, 329, 343,\n\t\t 376, 394, 399, 445, 452, 459, 464, 528, 544, 551, 556, 568, 669, 689, 713,\n\t\t 738, 748, 763, 788, 844, 867, 886, 904, 972, 993};\n\t\tint[] input =\n\t\t{544, -578, 556, 713, -655, -359, -810, -731, 194, -531, -685, 689, -279, -738, 886,\n\t\t -54, -320, -500, 738, 445, -401, 993, -753, 329, -396, -924, -975, 376, 748,\n\t\t -356, 972, 459, 399, 669, -488, 568, -702, 551, 763, -90, -249, -45, 452,\n\t\t -917, 394, 195, -877, 153, 153, 788, 844, 867, 266, -739, 904, -154, -947,\n\t\t 464, 343, -312, 150, -656, 528, 61, 94, -581};\n\t\tUtils.AssertTrue(compare(Program.QuickSort(input), expected));\n\t}\n\n\t[Test]\n\tpublic void TestCase17() {\n\t\tint[] expected =\n\t\t{-991, -976, -937, -917, -904, -885, -837, -821, -740, -641, -628, -609, -602, -599,\n\t\t -568, -560, -557, -529, -519, -453, -415, -384, -373, -321, -319, -220,\n\t\t -158, -96, -92, -90, -85, -67, -50, -36, -19, 63, 80, 121, 154, 168, 207,\n\t\t 228, 254, 268, 268, 270, 294, 295, 296, 306, 307, 328, 351, 381, 387, 391,\n\t\t 401, 407, 434, 437, 491, 505, 518, 558, 588, 593, 607, 613, 619, 629, 676,\n\t\t 678, 718, 730, 753, 759, 798, 802, 834, 879, 881, 896, 915, 937, 946, 949,\n\t\t 986};\n\t\tint[] input =\n\t\t{-19, 759, 168, 306, 270, -602, 558, -821, -599, 328, 753, -50, -568, 268, -92, 381,\n\t\t -96, 730, 629, 678, -837, 351, 896, 63, -85, 437, -453, -991, 294, -384,\n\t\t -628, -529, 518, 613, -319, -519, -220, -67, 834, 619, 802, 207, 946, -904,\n\t\t 295, 718, -740, -557, -560, 80, 296, -90, 401, 407, 798, 254, 154, 387, 434,\n\t\t 491, 228, 307, 268, 505, -415, -976, 676, -917, 937, -609, 593, -36, 881,\n\t\t 607, 121, -373, 915, -885, 879, 391, -158, 588, -641, -937, 986, 949, -321};\n\t\tUtils.AssertTrue(compare(Program.QuickSort(input), expected));\n\t}\n\n\t[Test]\n\tpublic void TestCase18() {\n\t\tint[] expected =\n\t\t{-987, -950, -949, -942, -941, -935, -908, -874, -855, -846, -823, -817, -796, -738,\n\t\t -733, -730, -685, -578, -575, -575, -544, -542, -469, -441, -420, -415,\n\t\t -410, -376, -371, -363, -359, -353, -337, -293, -265, -257, -254, -191,\n\t\t -167, -160, -155, -126, -120, -51, -36, -13, 14, 48, 52, 59, 59, 125, 157,\n\t\t 164, 183, 201, 238, 243, 295, 323, 328, 341, 355, 356, 372, 399, 422, 490,\n\t\t 490, 540, 572, 610, 631, 646, 700, 724, 746, 800, 829, 842, 888, 892, 892,\n\t\t 919, 950, 965, 980, 995};\n\t\tint[] input =\n\t\t{-823, 164, 48, -987, 323, 399, -293, 183, -908, -376, 14, 980, 965, 842, 422, 829,\n\t\t 59, 724, -415, -733, 356, -855, -155, 52, 328, -544, -371, -160, -942, -51,\n\t\t 700, -363, -353, -359, 238, 892, -730, -575, 892, 490, 490, 995, 572, 888,\n\t\t -935, 919, -191, 646, -120, 125, -817, 341, -575, 372, -874, 243, 610, -36,\n\t\t -685, -337, -13, 295, 800, -950, -949, -257, 631, -542, 201, -796, 157, 950,\n\t\t 540, -846, -265, 746, 355, -578, -441, -254, -941, -738, -469, -167, -420,\n\t\t -126, -410, 59};\n\t\tUtils.AssertTrue(compare(Program.QuickSort(input), expected));\n\t}\n\n\tpublic bool compare(int[] arr1, int[] arr2) {\n\t\tif (arr1.Length != arr2.Length) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (int i = 0; i < arr1.Length; i++) {\n\t\t\tif (arr1[i] != arr2[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npublic class ProgramTest {\n\t[Test]\n\tpublic void TestCase1() {\n\t\tint[] expected = {2, 3, 5, 5, 6, 8, 9};\n\t\tint[] input = {8, 5, 2, 9, 5, 6, 3};\n\t\tUtils.AssertTrue(compare(Program.QuickSort(input), expected));\n\t}\n\n\tpublic bool compare(int[] arr1, int[] arr2) {\n\t\tif (arr1.Length != arr2.Length) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (int i = 0; i < arr1.Length; i++) {\n\t\t\tif (arr1[i] != arr2[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\npublic class Program {\n\t// Best: O(nlog(n)) time | O(log(n)) space\n\t// Average: O(nlog(n)) time | O(log(n)) space\n\t// Worst: O(n^2) time | O(log(n)) space\n\tpublic static int[] QuickSort(int[] array) {\n\t\tQuickSort(array, 0, array.Length - 1);\n\t\treturn array;\n\t}\n\n\tpublic static void QuickSort(int[] array, int startIdx, int endIdx) {\n\t\tif (startIdx >= endIdx) {\n\t\t\treturn;\n\t\t}\n\t\tint pivotIdx = startIdx;\n\t\tint leftIdx = startIdx + 1;\n\t\tint rightIdx = endIdx;\n\t\twhile (rightIdx >= leftIdx) {\n\t\t\tif (array[leftIdx] > array[pivotIdx] && array[rightIdx] < array[pivotIdx]) {\n\t\t\t\tswap(leftIdx, rightIdx, array);\n\t\t\t}\n\t\t\tif (array[leftIdx] <= array[pivotIdx]) {\n\t\t\t\tleftIdx += 1;\n\t\t\t}\n\t\t\tif (array[rightIdx] >= array[pivotIdx]) {\n\t\t\t\trightIdx -= 1;\n\t\t\t}\n\t\t}\n\t\tswap(pivotIdx, rightIdx, array);\n\t\tbool leftSubarrayIsSmaller = rightIdx - 1 - startIdx < endIdx - (rightIdx + 1);\n\t\tif (leftSubarrayIsSmaller) {\n\t\t\tQuickSort(array, startIdx, rightIdx - 1);\n\t\t\tQuickSort(array, rightIdx + 1, endIdx);\n\t\t} else {\n\t\t\tQuickSort(array, rightIdx + 1, endIdx);\n\t\t\tQuickSort(array, startIdx, rightIdx - 1);\n\t\t}\n\t}\n\n\tpublic static void swap(int i, int j, int[] array) {\n\t\tint temp  = array[j];\n\t\tarray[j] = array[i];\n\t\tarray[i] = temp;\n\t}\n}\n"
      ]
    },
    "go": {
      "Language": "go",
      "StartingCode": "package main\n\nfunc QuickSort(array []int) []int {\n\t// Write your code here.\n\treturn nil\n}\n",
      "StartingTest": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\texpected := []int{1}\n\toutput := QuickSort([]int{1})\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase2(t *TestCase) {\n\texpected := []int{1, 2}\n\toutput := QuickSort([]int{1, 2})\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase3(t *TestCase) {\n\texpected := []int{1, 2}\n\toutput := QuickSort([]int{2, 1})\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase4(t *TestCase) {\n\texpected := []int{1, 2, 3}\n\toutput := QuickSort([]int{1, 3, 2})\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase5(t *TestCase) {\n\texpected := []int{1, 2, 3}\n\toutput := QuickSort([]int{3, 1, 2})\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase6(t *TestCase) {\n\texpected := []int{1, 2, 3}\n\toutput := QuickSort([]int{1, 2, 3})\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase7(t *TestCase) {\n\texpected := []int{-10, -7, -7, -6, -6, -5, -5, -4, -4, -4, -2, -1, 1, 3, 5, 5, 6, 8, 8, 10}\n\toutput := QuickSort([]int{-4, 5, 10, 8, -10, -6, -4, -2, -5, 3, 5, -4, -5, -1, 1, 6, -7, -6, -7, 8})\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase8(t *TestCase) {\n\texpected := []int{-10, -10, -9, -7, -7, -6, -5, -2, 2, 2, 3, 3, 4, 5, 8, 8, 9, 10}\n\toutput := QuickSort([]int{-7, 2, 3, 8, -10, 4, -6, -10, -2, -7, 10, 5, 2, 9, -9, -5, 3, 8})\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase9(t *TestCase) {\n\texpected := []int{-10, -10, -9, -6, -5, -2, -2, -1, 1, 2, 4, 4, 6, 7, 7, 8, 8, 8, 8, 9, 10, 10}\n\toutput := QuickSort([]int{8, -6, 7, 10, 8, -1, 6, 2, 4, -5, 1, 10, 8, -10, -9, -10, 8, 9, -2, 7, -2, 4})\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase10(t *TestCase) {\n\texpected := []int{-10, -8, -6, -2, -2, -1, 1, 1, 2, 2, 3, 5, 9}\n\toutput := QuickSort([]int{5, -2, 2, -8, 3, -10, -6, -1, 2, -2, 9, 1, 1})\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase11(t *TestCase) {\n\texpected := []int{-10, -10, -9, -9, -9, -8, -8, -6, -4, -4, -4, -2, -1, 0, 0, 0, 0, 1, 1, 2, 2, 4, 4, 5, 5, 7, 8, 8, 9, 10}\n\toutput := QuickSort([]int{2, -2, -6, -10, 10, 4, -8, -1, -8, -4, 7, -4, 0, 9, -9, 0, -9, -9, 8, 1, -4, 4, 8, 5, 1, 5, 0, 0, 2, -10})\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase12(t *TestCase) {\n\texpected := []int{-9, -9, -9, -7, -7, -7, -4, -4, -3, -3, -3, -2, -1, 0, 1, 1, 3, 4, 4, 5, 8, 9}\n\toutput := QuickSort([]int{4, 1, 5, 0, -9, -3, -3, 9, 3, -4, -9, 8, 1, -3, -7, -4, -9, -1, -7, -2, -7, 4})\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase13(t *TestCase) {\n\texpected := []int{-991, -848, -764, -755, -710, -706, -646, -614, -610, -583, -484, -474, -439, -359, -348, -246, -215, -212, -171, -160, -153, -56, -32, -27, -3, 9, 12, 55, 107, 131, 222, 230, 240, 246, 427, 507, 564, 565, 568, 603, 635, 661, 710, 736, 787, 821, 892, 934, 970, 996}\n\toutput := QuickSort([]int{427, 787, 222, 996, -359, -614, 246, 230, 107, -706, 568, 9, -246, 12, -764, -212, -484, 603, 934, -848, -646, -991, 661, -32, -348, -474, -439, -56, 507, 736, 635, -171, -215, 564, -710, 710, 565, 892, 970, -755, 55, 821, -3, -153, 240, -160, -610, -583, -27, 131})\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase14(t *TestCase) {\n\texpected := []int{-998, -882, -827, -817, -796, -731, -681, -657, -581, -523, -435, -387, -382, -331, -269, -255, -220, -216, -169, -163, -75, -43, -6, 80, 100, 180, 228, 280, 354, 366, 372, 382, 382, 432, 471, 519, 652, 680, 747, 749, 753, 769, 771, 805, 847, 906, 913, 956, 972, 980, 991}\n\toutput := QuickSort([]int{991, -731, -882, 100, 280, -43, 432, 771, -581, 180, -382, -998, 847, 80, -220, 680, 769, -75, -817, 366, 956, 749, 471, 228, -435, -269, 652, -331, -387, -657, -255, 382, -216, -6, -163, -681, 980, 913, -169, 972, -523, 354, 747, 805, 382, -827, -796, 372, 753, 519, 906})\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase15(t *TestCase) {\n\texpected := []int{-995, -987, -978, -898, -796, -785, -772, -763, -755, -746, -720, -679, -626, -609, -581, -562, -559, -557, -544, -491, -489, -425, -389, -367, -343, -313, -112, -94, -86, -79, -68, -67, -19, -7, 31, 34, 43, 51, 67, 85, 120, 165, 187, 204, 232, 243, 260, 384, 393, 397, 421, 432, 444, 489, 508, 515, 612, 624, 662, 687, 697, 732, 737, 759, 776, 777, 825, 878, 921, 924, 946, 947, 975, 993}\n\toutput := QuickSort([]int{384, -67, 120, 759, 697, 232, -7, -557, -772, -987, 687, 397, -763, -86, -491, 947, 921, 421, 825, -679, 946, -562, -626, -898, 204, 776, -343, 393, 51, -796, -425, 31, 165, 975, -720, 878, -785, -367, -609, 662, -79, -112, -313, -94, 187, 260, 43, 85, -746, 612, 67, -389, 508, 777, 624, 993, -581, 34, 444, -544, 243, -995, 432, -755, -978, 515, -68, -559, 489, 732, -19, -489, 737, 924})\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase16(t *TestCase) {\n\texpected := []int{-975, -947, -924, -917, -877, -810, -753, -739, -738, -731, -702, -685, -656, -655, -581, -578, -531, -500, -488, -401, -396, -359, -356, -320, -312, -279, -249, -154, -90, -54, -45, 61, 94, 150, 153, 153, 194, 195, 266, 329, 343, 376, 394, 399, 445, 452, 459, 464, 528, 544, 551, 556, 568, 669, 689, 713, 738, 748, 763, 788, 844, 867, 886, 904, 972, 993}\n\toutput := QuickSort([]int{544, -578, 556, 713, -655, -359, -810, -731, 194, -531, -685, 689, -279, -738, 886, -54, -320, -500, 738, 445, -401, 993, -753, 329, -396, -924, -975, 376, 748, -356, 972, 459, 399, 669, -488, 568, -702, 551, 763, -90, -249, -45, 452, -917, 394, 195, -877, 153, 153, 788, 844, 867, 266, -739, 904, -154, -947, 464, 343, -312, 150, -656, 528, 61, 94, -581})\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase17(t *TestCase) {\n\texpected := []int{-991, -976, -937, -917, -904, -885, -837, -821, -740, -641, -628, -609, -602, -599, -568, -560, -557, -529, -519, -453, -415, -384, -373, -321, -319, -220, -158, -96, -92, -90, -85, -67, -50, -36, -19, 63, 80, 121, 154, 168, 207, 228, 254, 268, 268, 270, 294, 295, 296, 306, 307, 328, 351, 381, 387, 391, 401, 407, 434, 437, 491, 505, 518, 558, 588, 593, 607, 613, 619, 629, 676, 678, 718, 730, 753, 759, 798, 802, 834, 879, 881, 896, 915, 937, 946, 949, 986}\n\toutput := QuickSort([]int{-19, 759, 168, 306, 270, -602, 558, -821, -599, 328, 753, -50, -568, 268, -92, 381, -96, 730, 629, 678, -837, 351, 896, 63, -85, 437, -453, -991, 294, -384, -628, -529, 518, 613, -319, -519, -220, -67, 834, 619, 802, 207, 946, -904, 295, 718, -740, -557, -560, 80, 296, -90, 401, 407, 798, 254, 154, 387, 434, 491, 228, 307, 268, 505, -415, -976, 676, -917, 937, -609, 593, -36, 881, 607, 121, -373, 915, -885, 879, 391, -158, 588, -641, -937, 986, 949, -321})\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase18(t *TestCase) {\n\texpected := []int{-987, -950, -949, -942, -941, -935, -908, -874, -855, -846, -823, -817, -796, -738, -733, -730, -685, -578, -575, -575, -544, -542, -469, -441, -420, -415, -410, -376, -371, -363, -359, -353, -337, -293, -265, -257, -254, -191, -167, -160, -155, -126, -120, -51, -36, -13, 14, 48, 52, 59, 59, 125, 157, 164, 183, 201, 238, 243, 295, 323, 328, 341, 355, 356, 372, 399, 422, 490, 490, 540, 572, 610, 631, 646, 700, 724, 746, 800, 829, 842, 888, 892, 892, 919, 950, 965, 980, 995}\n\toutput := QuickSort([]int{-823, 164, 48, -987, 323, 399, -293, 183, -908, -376, 14, 980, 965, 842, 422, 829, 59, 724, -415, -733, 356, -855, -155, 52, 328, -544, -371, -160, -942, -51, 700, -363, -353, -359, 238, 892, -730, -575, 892, 490, 490, 995, 572, 888, -935, 919, -191, 646, -120, 125, -817, 341, -575, 372, -874, 243, 610, -36, -685, -337, -13, 295, 800, -950, -949, -257, 631, -542, 201, -796, 157, 950, 540, -846, -265, 746, 355, -578, -441, -254, -941, -738, -469, -167, -420, -126, -410, 59})\n\trequire.Equal(t, expected, output)\n}\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\texpected := []int{2, 3, 5, 5, 6, 8, 9}\n\toutput := QuickSort([]int{8, 5, 2, 9, 5, 6, 3})\n\trequire.Equal(t, expected, output)\n}\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\npackage main\n\nfunc QuickSort(array []int) []int {\n\treturn helper(array, 0, len(array)-1)\n}\n\nfunc helper(array []int, start, end int) []int {\n\tif start >= end {\n\t\treturn array\n\t}\n\n\tpivot := start\n\tleft := start + 1\n\tright := end\n\tfor right >= left {\n\t\tif array[left] > array[pivot] && array[right] < array[pivot] {\n\t\t\tarray[left], array[right] = array[right], array[left]\n\t\t}\n\t\tif array[left] <= array[pivot] {\n\t\t\tleft += 1\n\t\t}\n\t\tif array[right] >= array[pivot] {\n\t\t\tright -= 1\n\t\t}\n\t}\n\n\tarray[pivot], array[right] = array[right], array[pivot]\n\n\tif right-1-start < end-(right+1) {\n\t\thelper(array, start, right-1)\n\t\thelper(array, right+1, end)\n\t} else {\n\t\thelper(array, right+1, end)\n\t\thelper(array, start, right-1)\n\t}\n\treturn array\n}\n"
      ]
    },
    "java": {
      "Language": "java",
      "StartingCode": "import java.util.*;\n\nclass Program {\n  public static int[] quickSort(int[] array) {\n    // Write your code here.\n    return null;\n  }\n}\n",
      "StartingTest": "class ProgramTest {\n  @Test\n  public void TestCase1() {\n    int[] expected = {1};\n    int[] input = {1};\n    Utils.assertTrue(compare(Program.quickSort(input), expected));\n  }\n\n  @Test\n  public void TestCase2() {\n    int[] expected = {1, 2};\n    int[] input = {1, 2};\n    Utils.assertTrue(compare(Program.quickSort(input), expected));\n  }\n\n  @Test\n  public void TestCase3() {\n    int[] expected = {1, 2};\n    int[] input = {2, 1};\n    Utils.assertTrue(compare(Program.quickSort(input), expected));\n  }\n\n  @Test\n  public void TestCase4() {\n    int[] expected = {1, 2, 3};\n    int[] input = {1, 3, 2};\n    Utils.assertTrue(compare(Program.quickSort(input), expected));\n  }\n\n  @Test\n  public void TestCase5() {\n    int[] expected = {1, 2, 3};\n    int[] input = {3, 1, 2};\n    Utils.assertTrue(compare(Program.quickSort(input), expected));\n  }\n\n  @Test\n  public void TestCase6() {\n    int[] expected = {1, 2, 3};\n    int[] input = {1, 2, 3};\n    Utils.assertTrue(compare(Program.quickSort(input), expected));\n  }\n\n  @Test\n  public void TestCase7() {\n    int[] expected = {-10, -7, -7, -6, -6, -5, -5, -4, -4, -4, -2, -1, 1, 3, 5, 5, 6, 8, 8, 10};\n    int[] input = {-4, 5, 10, 8, -10, -6, -4, -2, -5, 3, 5, -4, -5, -1, 1, 6, -7, -6, -7, 8};\n    Utils.assertTrue(compare(Program.quickSort(input), expected));\n  }\n\n  @Test\n  public void TestCase8() {\n    int[] expected = {-10, -10, -9, -7, -7, -6, -5, -2, 2, 2, 3, 3, 4, 5, 8, 8, 9, 10};\n    int[] input = {-7, 2, 3, 8, -10, 4, -6, -10, -2, -7, 10, 5, 2, 9, -9, -5, 3, 8};\n    Utils.assertTrue(compare(Program.quickSort(input), expected));\n  }\n\n  @Test\n  public void TestCase9() {\n    int[] expected = {-10, -10, -9, -6, -5, -2, -2, -1, 1, 2, 4, 4, 6, 7, 7, 8, 8, 8, 8, 9, 10, 10};\n    int[] input = {8, -6, 7, 10, 8, -1, 6, 2, 4, -5, 1, 10, 8, -10, -9, -10, 8, 9, -2, 7, -2, 4};\n    Utils.assertTrue(compare(Program.quickSort(input), expected));\n  }\n\n  @Test\n  public void TestCase10() {\n    int[] expected = {-10, -8, -6, -2, -2, -1, 1, 1, 2, 2, 3, 5, 9};\n    int[] input = {5, -2, 2, -8, 3, -10, -6, -1, 2, -2, 9, 1, 1};\n    Utils.assertTrue(compare(Program.quickSort(input), expected));\n  }\n\n  @Test\n  public void TestCase11() {\n    int[] expected = {\n      -10, -10, -9, -9, -9, -8, -8, -6, -4, -4, -4, -2, -1, 0, 0, 0, 0, 1, 1, 2, 2, 4, 4, 5, 5, 7,\n      8, 8, 9, 10\n    };\n    int[] input = {\n      2, -2, -6, -10, 10, 4, -8, -1, -8, -4, 7, -4, 0, 9, -9, 0, -9, -9, 8, 1, -4, 4, 8, 5, 1, 5, 0,\n      0, 2, -10\n    };\n    Utils.assertTrue(compare(Program.quickSort(input), expected));\n  }\n\n  @Test\n  public void TestCase12() {\n    int[] expected = {\n      -9, -9, -9, -7, -7, -7, -4, -4, -3, -3, -3, -2, -1, 0, 1, 1, 3, 4, 4, 5, 8, 9\n    };\n    int[] input = {4, 1, 5, 0, -9, -3, -3, 9, 3, -4, -9, 8, 1, -3, -7, -4, -9, -1, -7, -2, -7, 4};\n    Utils.assertTrue(compare(Program.quickSort(input), expected));\n  }\n\n  @Test\n  public void TestCase13() {\n    int[] expected = {\n      -991, -848, -764, -755, -710, -706, -646, -614, -610, -583, -484, -474, -439, -359, -348,\n      -246, -215, -212, -171, -160, -153, -56, -32, -27, -3, 9, 12, 55, 107, 131, 222, 230, 240,\n      246, 427, 507, 564, 565, 568, 603, 635, 661, 710, 736, 787, 821, 892, 934, 970, 996\n    };\n    int[] input = {\n      427, 787, 222, 996, -359, -614, 246, 230, 107, -706, 568, 9, -246, 12, -764, -212, -484, 603,\n      934, -848, -646, -991, 661, -32, -348, -474, -439, -56, 507, 736, 635, -171, -215, 564, -710,\n      710, 565, 892, 970, -755, 55, 821, -3, -153, 240, -160, -610, -583, -27, 131\n    };\n    Utils.assertTrue(compare(Program.quickSort(input), expected));\n  }\n\n  @Test\n  public void TestCase14() {\n    int[] expected = {\n      -998, -882, -827, -817, -796, -731, -681, -657, -581, -523, -435, -387, -382, -331, -269,\n      -255, -220, -216, -169, -163, -75, -43, -6, 80, 100, 180, 228, 280, 354, 366, 372, 382, 382,\n      432, 471, 519, 652, 680, 747, 749, 753, 769, 771, 805, 847, 906, 913, 956, 972, 980, 991\n    };\n    int[] input = {\n      991, -731, -882, 100, 280, -43, 432, 771, -581, 180, -382, -998, 847, 80, -220, 680, 769, -75,\n      -817, 366, 956, 749, 471, 228, -435, -269, 652, -331, -387, -657, -255, 382, -216, -6, -163,\n      -681, 980, 913, -169, 972, -523, 354, 747, 805, 382, -827, -796, 372, 753, 519, 906\n    };\n    Utils.assertTrue(compare(Program.quickSort(input), expected));\n  }\n\n  @Test\n  public void TestCase15() {\n    int[] expected = {\n      -995, -987, -978, -898, -796, -785, -772, -763, -755, -746, -720, -679, -626, -609, -581,\n      -562, -559, -557, -544, -491, -489, -425, -389, -367, -343, -313, -112, -94, -86, -79, -68,\n      -67, -19, -7, 31, 34, 43, 51, 67, 85, 120, 165, 187, 204, 232, 243, 260, 384, 393, 397, 421,\n      432, 444, 489, 508, 515, 612, 624, 662, 687, 697, 732, 737, 759, 776, 777, 825, 878, 921, 924,\n      946, 947, 975, 993\n    };\n    int[] input = {\n      384, -67, 120, 759, 697, 232, -7, -557, -772, -987, 687, 397, -763, -86, -491, 947, 921, 421,\n      825, -679, 946, -562, -626, -898, 204, 776, -343, 393, 51, -796, -425, 31, 165, 975, -720,\n      878, -785, -367, -609, 662, -79, -112, -313, -94, 187, 260, 43, 85, -746, 612, 67, -389, 508,\n      777, 624, 993, -581, 34, 444, -544, 243, -995, 432, -755, -978, 515, -68, -559, 489, 732, -19,\n      -489, 737, 924\n    };\n    Utils.assertTrue(compare(Program.quickSort(input), expected));\n  }\n\n  @Test\n  public void TestCase16() {\n    int[] expected = {\n      -975, -947, -924, -917, -877, -810, -753, -739, -738, -731, -702, -685, -656, -655, -581,\n      -578, -531, -500, -488, -401, -396, -359, -356, -320, -312, -279, -249, -154, -90, -54, -45,\n      61, 94, 150, 153, 153, 194, 195, 266, 329, 343, 376, 394, 399, 445, 452, 459, 464, 528, 544,\n      551, 556, 568, 669, 689, 713, 738, 748, 763, 788, 844, 867, 886, 904, 972, 993\n    };\n    int[] input = {\n      544, -578, 556, 713, -655, -359, -810, -731, 194, -531, -685, 689, -279, -738, 886, -54, -320,\n      -500, 738, 445, -401, 993, -753, 329, -396, -924, -975, 376, 748, -356, 972, 459, 399, 669,\n      -488, 568, -702, 551, 763, -90, -249, -45, 452, -917, 394, 195, -877, 153, 153, 788, 844, 867,\n      266, -739, 904, -154, -947, 464, 343, -312, 150, -656, 528, 61, 94, -581\n    };\n    Utils.assertTrue(compare(Program.quickSort(input), expected));\n  }\n\n  @Test\n  public void TestCase17() {\n    int[] expected = {\n      -991, -976, -937, -917, -904, -885, -837, -821, -740, -641, -628, -609, -602, -599, -568,\n      -560, -557, -529, -519, -453, -415, -384, -373, -321, -319, -220, -158, -96, -92, -90, -85,\n      -67, -50, -36, -19, 63, 80, 121, 154, 168, 207, 228, 254, 268, 268, 270, 294, 295, 296, 306,\n      307, 328, 351, 381, 387, 391, 401, 407, 434, 437, 491, 505, 518, 558, 588, 593, 607, 613, 619,\n      629, 676, 678, 718, 730, 753, 759, 798, 802, 834, 879, 881, 896, 915, 937, 946, 949, 986\n    };\n    int[] input = {\n      -19, 759, 168, 306, 270, -602, 558, -821, -599, 328, 753, -50, -568, 268, -92, 381, -96, 730,\n      629, 678, -837, 351, 896, 63, -85, 437, -453, -991, 294, -384, -628, -529, 518, 613, -319,\n      -519, -220, -67, 834, 619, 802, 207, 946, -904, 295, 718, -740, -557, -560, 80, 296, -90, 401,\n      407, 798, 254, 154, 387, 434, 491, 228, 307, 268, 505, -415, -976, 676, -917, 937, -609, 593,\n      -36, 881, 607, 121, -373, 915, -885, 879, 391, -158, 588, -641, -937, 986, 949, -321\n    };\n    Utils.assertTrue(compare(Program.quickSort(input), expected));\n  }\n\n  @Test\n  public void TestCase18() {\n    int[] expected = {\n      -987, -950, -949, -942, -941, -935, -908, -874, -855, -846, -823, -817, -796, -738, -733,\n      -730, -685, -578, -575, -575, -544, -542, -469, -441, -420, -415, -410, -376, -371, -363,\n      -359, -353, -337, -293, -265, -257, -254, -191, -167, -160, -155, -126, -120, -51, -36, -13,\n      14, 48, 52, 59, 59, 125, 157, 164, 183, 201, 238, 243, 295, 323, 328, 341, 355, 356, 372, 399,\n      422, 490, 490, 540, 572, 610, 631, 646, 700, 724, 746, 800, 829, 842, 888, 892, 892, 919, 950,\n      965, 980, 995\n    };\n    int[] input = {\n      -823, 164, 48, -987, 323, 399, -293, 183, -908, -376, 14, 980, 965, 842, 422, 829, 59, 724,\n      -415, -733, 356, -855, -155, 52, 328, -544, -371, -160, -942, -51, 700, -363, -353, -359, 238,\n      892, -730, -575, 892, 490, 490, 995, 572, 888, -935, 919, -191, 646, -120, 125, -817, 341,\n      -575, 372, -874, 243, 610, -36, -685, -337, -13, 295, 800, -950, -949, -257, 631, -542, 201,\n      -796, 157, 950, 540, -846, -265, 746, 355, -578, -441, -254, -941, -738, -469, -167, -420,\n      -126, -410, 59\n    };\n    Utils.assertTrue(compare(Program.quickSort(input), expected));\n  }\n\n  public boolean compare(int[] arr1, int[] arr2) {\n    if (arr1.length != arr2.length) {\n      return false;\n    }\n    for (int i = 0; i < arr1.length; i++) {\n      if (arr1[i] != arr2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    int[] expected = {2, 3, 5, 5, 6, 8, 9};\n    int[] input = {8, 5, 2, 9, 5, 6, 3};\n    Utils.assertTrue(compare(Program.quickSort(input), expected));\n  }\n\n  public boolean compare(int[] arr1, int[] arr2) {\n    if (arr1.length != arr2.length) {\n      return false;\n    }\n    for (int i = 0; i < arr1.length; i++) {\n      if (arr1[i] != arr2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nclass Program {\n  // Best: O(nlog(n)) time | O(log(n)) space\n  // Average: O(nlog(n)) time | O(log(n)) space\n  // Worst: O(n^2) time | O(log(n)) space\n  public static int[] quickSort(int[] array) {\n    quickSort(array, 0, array.length - 1);\n    return array;\n  }\n\n  public static void quickSort(int[] array, int startIdx, int endIdx) {\n    if (startIdx >= endIdx) {\n      return;\n    }\n    int pivotIdx = startIdx;\n    int leftIdx = startIdx + 1;\n    int rightIdx = endIdx;\n    while (rightIdx >= leftIdx) {\n      if (array[leftIdx] > array[pivotIdx] && array[rightIdx] < array[pivotIdx]) {\n        swap(leftIdx, rightIdx, array);\n      }\n      if (array[leftIdx] <= array[pivotIdx]) {\n        leftIdx += 1;\n      }\n      if (array[rightIdx] >= array[pivotIdx]) {\n        rightIdx -= 1;\n      }\n    }\n    swap(pivotIdx, rightIdx, array);\n    boolean leftSubarrayIsSmaller = rightIdx - 1 - startIdx < endIdx - (rightIdx + 1);\n    if (leftSubarrayIsSmaller) {\n      quickSort(array, startIdx, rightIdx - 1);\n      quickSort(array, rightIdx + 1, endIdx);\n    } else {\n      quickSort(array, rightIdx + 1, endIdx);\n      quickSort(array, startIdx, rightIdx - 1);\n    }\n  }\n\n  public static void swap(int i, int j, int[] array) {\n    int temp = array[j];\n    array[j] = array[i];\n    array[i] = temp;\n  }\n}\n"
      ]
    },
    "javascript": {
      "Language": "javascript",
      "StartingCode": "function quickSort(array) {\n  // Write your code here.\n}\n\n// Do not edit the line below.\nexports.quickSort = quickSort;\n",
      "StartingTest": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai.expect(program.quickSort([1])).to.deep.equal([1]);\n});\n\nit('Test Case #2', function () {\n  chai.expect(program.quickSort([1, 2])).to.deep.equal([1, 2]);\n});\n\nit('Test Case #3', function () {\n  chai.expect(program.quickSort([2, 1])).to.deep.equal([1, 2]);\n});\n\nit('Test Case #4', function () {\n  chai.expect(program.quickSort([1, 3, 2])).to.deep.equal([1, 2, 3]);\n});\n\nit('Test Case #5', function () {\n  chai.expect(program.quickSort([3, 1, 2])).to.deep.equal([1, 2, 3]);\n});\n\nit('Test Case #6', function () {\n  chai.expect(program.quickSort([1, 2, 3])).to.deep.equal([1, 2, 3]);\n});\n\nit('Test Case #7', function () {\n  chai\n    .expect(program.quickSort([-4, 5, 10, 8, -10, -6, -4, -2, -5, 3, 5, -4, -5, -1, 1, 6, -7, -6, -7, 8]))\n    .to.deep.equal([-10, -7, -7, -6, -6, -5, -5, -4, -4, -4, -2, -1, 1, 3, 5, 5, 6, 8, 8, 10]);\n});\n\nit('Test Case #8', function () {\n  chai\n    .expect(program.quickSort([-7, 2, 3, 8, -10, 4, -6, -10, -2, -7, 10, 5, 2, 9, -9, -5, 3, 8]))\n    .to.deep.equal([-10, -10, -9, -7, -7, -6, -5, -2, 2, 2, 3, 3, 4, 5, 8, 8, 9, 10]);\n});\n\nit('Test Case #9', function () {\n  chai\n    .expect(program.quickSort([8, -6, 7, 10, 8, -1, 6, 2, 4, -5, 1, 10, 8, -10, -9, -10, 8, 9, -2, 7, -2, 4]))\n    .to.deep.equal([-10, -10, -9, -6, -5, -2, -2, -1, 1, 2, 4, 4, 6, 7, 7, 8, 8, 8, 8, 9, 10, 10]);\n});\n\nit('Test Case #10', function () {\n  chai\n    .expect(program.quickSort([5, -2, 2, -8, 3, -10, -6, -1, 2, -2, 9, 1, 1]))\n    .to.deep.equal([-10, -8, -6, -2, -2, -1, 1, 1, 2, 2, 3, 5, 9]);\n});\n\nit('Test Case #11', function () {\n  chai\n    .expect(\n      program.quickSort([\n        2,\n        -2,\n        -6,\n        -10,\n        10,\n        4,\n        -8,\n        -1,\n        -8,\n        -4,\n        7,\n        -4,\n        0,\n        9,\n        -9,\n        0,\n        -9,\n        -9,\n        8,\n        1,\n        -4,\n        4,\n        8,\n        5,\n        1,\n        5,\n        0,\n        0,\n        2,\n        -10,\n      ]),\n    )\n    .to.deep.equal([\n      -10,\n      -10,\n      -9,\n      -9,\n      -9,\n      -8,\n      -8,\n      -6,\n      -4,\n      -4,\n      -4,\n      -2,\n      -1,\n      0,\n      0,\n      0,\n      0,\n      1,\n      1,\n      2,\n      2,\n      4,\n      4,\n      5,\n      5,\n      7,\n      8,\n      8,\n      9,\n      10,\n    ]);\n});\n\nit('Test Case #12', function () {\n  chai\n    .expect(program.quickSort([4, 1, 5, 0, -9, -3, -3, 9, 3, -4, -9, 8, 1, -3, -7, -4, -9, -1, -7, -2, -7, 4]))\n    .to.deep.equal([-9, -9, -9, -7, -7, -7, -4, -4, -3, -3, -3, -2, -1, 0, 1, 1, 3, 4, 4, 5, 8, 9]);\n});\n\nit('Test Case #13', function () {\n  chai\n    .expect(\n      program.quickSort([\n        427,\n        787,\n        222,\n        996,\n        -359,\n        -614,\n        246,\n        230,\n        107,\n        -706,\n        568,\n        9,\n        -246,\n        12,\n        -764,\n        -212,\n        -484,\n        603,\n        934,\n        -848,\n        -646,\n        -991,\n        661,\n        -32,\n        -348,\n        -474,\n        -439,\n        -56,\n        507,\n        736,\n        635,\n        -171,\n        -215,\n        564,\n        -710,\n        710,\n        565,\n        892,\n        970,\n        -755,\n        55,\n        821,\n        -3,\n        -153,\n        240,\n        -160,\n        -610,\n        -583,\n        -27,\n        131,\n      ]),\n    )\n    .to.deep.equal([\n      -991,\n      -848,\n      -764,\n      -755,\n      -710,\n      -706,\n      -646,\n      -614,\n      -610,\n      -583,\n      -484,\n      -474,\n      -439,\n      -359,\n      -348,\n      -246,\n      -215,\n      -212,\n      -171,\n      -160,\n      -153,\n      -56,\n      -32,\n      -27,\n      -3,\n      9,\n      12,\n      55,\n      107,\n      131,\n      222,\n      230,\n      240,\n      246,\n      427,\n      507,\n      564,\n      565,\n      568,\n      603,\n      635,\n      661,\n      710,\n      736,\n      787,\n      821,\n      892,\n      934,\n      970,\n      996,\n    ]);\n});\n\nit('Test Case #14', function () {\n  chai\n    .expect(\n      program.quickSort([\n        991,\n        -731,\n        -882,\n        100,\n        280,\n        -43,\n        432,\n        771,\n        -581,\n        180,\n        -382,\n        -998,\n        847,\n        80,\n        -220,\n        680,\n        769,\n        -75,\n        -817,\n        366,\n        956,\n        749,\n        471,\n        228,\n        -435,\n        -269,\n        652,\n        -331,\n        -387,\n        -657,\n        -255,\n        382,\n        -216,\n        -6,\n        -163,\n        -681,\n        980,\n        913,\n        -169,\n        972,\n        -523,\n        354,\n        747,\n        805,\n        382,\n        -827,\n        -796,\n        372,\n        753,\n        519,\n        906,\n      ]),\n    )\n    .to.deep.equal([\n      -998,\n      -882,\n      -827,\n      -817,\n      -796,\n      -731,\n      -681,\n      -657,\n      -581,\n      -523,\n      -435,\n      -387,\n      -382,\n      -331,\n      -269,\n      -255,\n      -220,\n      -216,\n      -169,\n      -163,\n      -75,\n      -43,\n      -6,\n      80,\n      100,\n      180,\n      228,\n      280,\n      354,\n      366,\n      372,\n      382,\n      382,\n      432,\n      471,\n      519,\n      652,\n      680,\n      747,\n      749,\n      753,\n      769,\n      771,\n      805,\n      847,\n      906,\n      913,\n      956,\n      972,\n      980,\n      991,\n    ]);\n});\n\nit('Test Case #15', function () {\n  chai\n    .expect(\n      program.quickSort([\n        384,\n        -67,\n        120,\n        759,\n        697,\n        232,\n        -7,\n        -557,\n        -772,\n        -987,\n        687,\n        397,\n        -763,\n        -86,\n        -491,\n        947,\n        921,\n        421,\n        825,\n        -679,\n        946,\n        -562,\n        -626,\n        -898,\n        204,\n        776,\n        -343,\n        393,\n        51,\n        -796,\n        -425,\n        31,\n        165,\n        975,\n        -720,\n        878,\n        -785,\n        -367,\n        -609,\n        662,\n        -79,\n        -112,\n        -313,\n        -94,\n        187,\n        260,\n        43,\n        85,\n        -746,\n        612,\n        67,\n        -389,\n        508,\n        777,\n        624,\n        993,\n        -581,\n        34,\n        444,\n        -544,\n        243,\n        -995,\n        432,\n        -755,\n        -978,\n        515,\n        -68,\n        -559,\n        489,\n        732,\n        -19,\n        -489,\n        737,\n        924,\n      ]),\n    )\n    .to.deep.equal([\n      -995,\n      -987,\n      -978,\n      -898,\n      -796,\n      -785,\n      -772,\n      -763,\n      -755,\n      -746,\n      -720,\n      -679,\n      -626,\n      -609,\n      -581,\n      -562,\n      -559,\n      -557,\n      -544,\n      -491,\n      -489,\n      -425,\n      -389,\n      -367,\n      -343,\n      -313,\n      -112,\n      -94,\n      -86,\n      -79,\n      -68,\n      -67,\n      -19,\n      -7,\n      31,\n      34,\n      43,\n      51,\n      67,\n      85,\n      120,\n      165,\n      187,\n      204,\n      232,\n      243,\n      260,\n      384,\n      393,\n      397,\n      421,\n      432,\n      444,\n      489,\n      508,\n      515,\n      612,\n      624,\n      662,\n      687,\n      697,\n      732,\n      737,\n      759,\n      776,\n      777,\n      825,\n      878,\n      921,\n      924,\n      946,\n      947,\n      975,\n      993,\n    ]);\n});\n\nit('Test Case #16', function () {\n  chai\n    .expect(\n      program.quickSort([\n        544,\n        -578,\n        556,\n        713,\n        -655,\n        -359,\n        -810,\n        -731,\n        194,\n        -531,\n        -685,\n        689,\n        -279,\n        -738,\n        886,\n        -54,\n        -320,\n        -500,\n        738,\n        445,\n        -401,\n        993,\n        -753,\n        329,\n        -396,\n        -924,\n        -975,\n        376,\n        748,\n        -356,\n        972,\n        459,\n        399,\n        669,\n        -488,\n        568,\n        -702,\n        551,\n        763,\n        -90,\n        -249,\n        -45,\n        452,\n        -917,\n        394,\n        195,\n        -877,\n        153,\n        153,\n        788,\n        844,\n        867,\n        266,\n        -739,\n        904,\n        -154,\n        -947,\n        464,\n        343,\n        -312,\n        150,\n        -656,\n        528,\n        61,\n        94,\n        -581,\n      ]),\n    )\n    .to.deep.equal([\n      -975,\n      -947,\n      -924,\n      -917,\n      -877,\n      -810,\n      -753,\n      -739,\n      -738,\n      -731,\n      -702,\n      -685,\n      -656,\n      -655,\n      -581,\n      -578,\n      -531,\n      -500,\n      -488,\n      -401,\n      -396,\n      -359,\n      -356,\n      -320,\n      -312,\n      -279,\n      -249,\n      -154,\n      -90,\n      -54,\n      -45,\n      61,\n      94,\n      150,\n      153,\n      153,\n      194,\n      195,\n      266,\n      329,\n      343,\n      376,\n      394,\n      399,\n      445,\n      452,\n      459,\n      464,\n      528,\n      544,\n      551,\n      556,\n      568,\n      669,\n      689,\n      713,\n      738,\n      748,\n      763,\n      788,\n      844,\n      867,\n      886,\n      904,\n      972,\n      993,\n    ]);\n});\n\nit('Test Case #17', function () {\n  chai\n    .expect(\n      program.quickSort([\n        -19,\n        759,\n        168,\n        306,\n        270,\n        -602,\n        558,\n        -821,\n        -599,\n        328,\n        753,\n        -50,\n        -568,\n        268,\n        -92,\n        381,\n        -96,\n        730,\n        629,\n        678,\n        -837,\n        351,\n        896,\n        63,\n        -85,\n        437,\n        -453,\n        -991,\n        294,\n        -384,\n        -628,\n        -529,\n        518,\n        613,\n        -319,\n        -519,\n        -220,\n        -67,\n        834,\n        619,\n        802,\n        207,\n        946,\n        -904,\n        295,\n        718,\n        -740,\n        -557,\n        -560,\n        80,\n        296,\n        -90,\n        401,\n        407,\n        798,\n        254,\n        154,\n        387,\n        434,\n        491,\n        228,\n        307,\n        268,\n        505,\n        -415,\n        -976,\n        676,\n        -917,\n        937,\n        -609,\n        593,\n        -36,\n        881,\n        607,\n        121,\n        -373,\n        915,\n        -885,\n        879,\n        391,\n        -158,\n        588,\n        -641,\n        -937,\n        986,\n        949,\n        -321,\n      ]),\n    )\n    .to.deep.equal([\n      -991,\n      -976,\n      -937,\n      -917,\n      -904,\n      -885,\n      -837,\n      -821,\n      -740,\n      -641,\n      -628,\n      -609,\n      -602,\n      -599,\n      -568,\n      -560,\n      -557,\n      -529,\n      -519,\n      -453,\n      -415,\n      -384,\n      -373,\n      -321,\n      -319,\n      -220,\n      -158,\n      -96,\n      -92,\n      -90,\n      -85,\n      -67,\n      -50,\n      -36,\n      -19,\n      63,\n      80,\n      121,\n      154,\n      168,\n      207,\n      228,\n      254,\n      268,\n      268,\n      270,\n      294,\n      295,\n      296,\n      306,\n      307,\n      328,\n      351,\n      381,\n      387,\n      391,\n      401,\n      407,\n      434,\n      437,\n      491,\n      505,\n      518,\n      558,\n      588,\n      593,\n      607,\n      613,\n      619,\n      629,\n      676,\n      678,\n      718,\n      730,\n      753,\n      759,\n      798,\n      802,\n      834,\n      879,\n      881,\n      896,\n      915,\n      937,\n      946,\n      949,\n      986,\n    ]);\n});\n\nit('Test Case #18', function () {\n  chai\n    .expect(\n      program.quickSort([\n        -823,\n        164,\n        48,\n        -987,\n        323,\n        399,\n        -293,\n        183,\n        -908,\n        -376,\n        14,\n        980,\n        965,\n        842,\n        422,\n        829,\n        59,\n        724,\n        -415,\n        -733,\n        356,\n        -855,\n        -155,\n        52,\n        328,\n        -544,\n        -371,\n        -160,\n        -942,\n        -51,\n        700,\n        -363,\n        -353,\n        -359,\n        238,\n        892,\n        -730,\n        -575,\n        892,\n        490,\n        490,\n        995,\n        572,\n        888,\n        -935,\n        919,\n        -191,\n        646,\n        -120,\n        125,\n        -817,\n        341,\n        -575,\n        372,\n        -874,\n        243,\n        610,\n        -36,\n        -685,\n        -337,\n        -13,\n        295,\n        800,\n        -950,\n        -949,\n        -257,\n        631,\n        -542,\n        201,\n        -796,\n        157,\n        950,\n        540,\n        -846,\n        -265,\n        746,\n        355,\n        -578,\n        -441,\n        -254,\n        -941,\n        -738,\n        -469,\n        -167,\n        -420,\n        -126,\n        -410,\n        59,\n      ]),\n    )\n    .to.deep.equal([\n      -987,\n      -950,\n      -949,\n      -942,\n      -941,\n      -935,\n      -908,\n      -874,\n      -855,\n      -846,\n      -823,\n      -817,\n      -796,\n      -738,\n      -733,\n      -730,\n      -685,\n      -578,\n      -575,\n      -575,\n      -544,\n      -542,\n      -469,\n      -441,\n      -420,\n      -415,\n      -410,\n      -376,\n      -371,\n      -363,\n      -359,\n      -353,\n      -337,\n      -293,\n      -265,\n      -257,\n      -254,\n      -191,\n      -167,\n      -160,\n      -155,\n      -126,\n      -120,\n      -51,\n      -36,\n      -13,\n      14,\n      48,\n      52,\n      59,\n      59,\n      125,\n      157,\n      164,\n      183,\n      201,\n      238,\n      243,\n      295,\n      323,\n      328,\n      341,\n      355,\n      356,\n      372,\n      399,\n      422,\n      490,\n      490,\n      540,\n      572,\n      610,\n      631,\n      646,\n      700,\n      724,\n      746,\n      800,\n      829,\n      842,\n      888,\n      892,\n      892,\n      919,\n      950,\n      965,\n      980,\n      995,\n    ]);\n});\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const input = [8, 5, 2, 9, 5, 6, 3];\n  chai.expect(program.quickSort(input)).to.deep.equal([2, 3, 5, 5, 6, 8, 9]);\n});\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\n// Best: O(nlog(n)) time | O(log(n)) space\n// Average: O(nlog(n)) time | O(log(n)) space\n// Worst: O(n^2) time | O(log(n)) space\nfunction quickSort(array) {\n  quickSortHelper(array, 0, array.length - 1);\n  return array;\n}\n\nfunction quickSortHelper(array, startIdx, endIdx) {\n  if (startIdx >= endIdx) return;\n  const pivotIdx = startIdx;\n  let leftIdx = startIdx + 1;\n  let rightIdx = endIdx;\n  while (rightIdx >= leftIdx) {\n    if (array[leftIdx] > array[pivotIdx] && array[rightIdx] < array[pivotIdx]) {\n      swap(leftIdx, rightIdx, array);\n    }\n    if (array[leftIdx] <= array[pivotIdx]) leftIdx++;\n    if (array[rightIdx] >= array[pivotIdx]) rightIdx--;\n  }\n  swap(pivotIdx, rightIdx, array);\n  const leftSubarrayIsSmaller = rightIdx - 1 - startIdx < endIdx - (rightIdx + 1);\n  if (leftSubarrayIsSmaller) {\n    quickSortHelper(array, startIdx, rightIdx - 1);\n    quickSortHelper(array, rightIdx + 1, endIdx);\n  } else {\n    quickSortHelper(array, rightIdx + 1, endIdx);\n    quickSortHelper(array, startIdx, rightIdx - 1);\n  }\n}\n\nfunction swap(i, j, array) {\n  let temp = array[j];\n  array[j] = array[i];\n  array[i] = temp;\n}\n\nexports.quickSort = quickSort;\n"
      ]
    },
    "python": {
      "Language": "python",
      "StartingCode": "def quickSort(array):\n    # Write your code here.\n    pass\n",
      "StartingTest": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(program.quickSort([1]), [1])\n\n    def test_case_2(self):\n        self.assertEqual(program.quickSort([1, 2]), [1, 2])\n\n    def test_case_3(self):\n        self.assertEqual(program.quickSort([2, 1]), [1, 2])\n\n    def test_case_4(self):\n        self.assertEqual(program.quickSort([1, 3, 2]), [1, 2, 3])\n\n    def test_case_5(self):\n        self.assertEqual(program.quickSort([3, 1, 2]), [1, 2, 3])\n\n    def test_case_6(self):\n        self.assertEqual(program.quickSort([1, 2, 3]), [1, 2, 3])\n\n    def test_case_7(self):\n        self.assertEqual(\n            program.quickSort([-4, 5, 10, 8, -10, -6, -4, -2, -5, 3, 5, -4, -5, -1, 1, 6, -7, -6, -7, 8]),\n            [-10, -7, -7, -6, -6, -5, -5, -4, -4, -4, -2, -1, 1, 3, 5, 5, 6, 8, 8, 10],\n        )\n\n    def test_case_8(self):\n        self.assertEqual(\n            program.quickSort([-7, 2, 3, 8, -10, 4, -6, -10, -2, -7, 10, 5, 2, 9, -9, -5, 3, 8]),\n            [-10, -10, -9, -7, -7, -6, -5, -2, 2, 2, 3, 3, 4, 5, 8, 8, 9, 10],\n        )\n\n    def test_case_9(self):\n        self.assertEqual(\n            program.quickSort([8, -6, 7, 10, 8, -1, 6, 2, 4, -5, 1, 10, 8, -10, -9, -10, 8, 9, -2, 7, -2, 4]),\n            [-10, -10, -9, -6, -5, -2, -2, -1, 1, 2, 4, 4, 6, 7, 7, 8, 8, 8, 8, 9, 10, 10],\n        )\n\n    def test_case_10(self):\n        self.assertEqual(\n            program.quickSort([5, -2, 2, -8, 3, -10, -6, -1, 2, -2, 9, 1, 1]),\n            [-10, -8, -6, -2, -2, -1, 1, 1, 2, 2, 3, 5, 9],\n        )\n\n    def test_case_11(self):\n        self.assertEqual(\n            program.quickSort(\n                [\n                    2,\n                    -2,\n                    -6,\n                    -10,\n                    10,\n                    4,\n                    -8,\n                    -1,\n                    -8,\n                    -4,\n                    7,\n                    -4,\n                    0,\n                    9,\n                    -9,\n                    0,\n                    -9,\n                    -9,\n                    8,\n                    1,\n                    -4,\n                    4,\n                    8,\n                    5,\n                    1,\n                    5,\n                    0,\n                    0,\n                    2,\n                    -10,\n                ]\n            ),\n            [-10, -10, -9, -9, -9, -8, -8, -6, -4, -4, -4, -2, -1, 0, 0, 0, 0, 1, 1, 2, 2, 4, 4, 5, 5, 7, 8, 8, 9, 10],\n        )\n\n    def test_case_12(self):\n        self.assertEqual(\n            program.quickSort([4, 1, 5, 0, -9, -3, -3, 9, 3, -4, -9, 8, 1, -3, -7, -4, -9, -1, -7, -2, -7, 4]),\n            [-9, -9, -9, -7, -7, -7, -4, -4, -3, -3, -3, -2, -1, 0, 1, 1, 3, 4, 4, 5, 8, 9],\n        )\n\n    def test_case_13(self):\n        self.assertEqual(\n            program.quickSort(\n                [\n                    427,\n                    787,\n                    222,\n                    996,\n                    -359,\n                    -614,\n                    246,\n                    230,\n                    107,\n                    -706,\n                    568,\n                    9,\n                    -246,\n                    12,\n                    -764,\n                    -212,\n                    -484,\n                    603,\n                    934,\n                    -848,\n                    -646,\n                    -991,\n                    661,\n                    -32,\n                    -348,\n                    -474,\n                    -439,\n                    -56,\n                    507,\n                    736,\n                    635,\n                    -171,\n                    -215,\n                    564,\n                    -710,\n                    710,\n                    565,\n                    892,\n                    970,\n                    -755,\n                    55,\n                    821,\n                    -3,\n                    -153,\n                    240,\n                    -160,\n                    -610,\n                    -583,\n                    -27,\n                    131,\n                ]\n            ),\n            [\n                -991,\n                -848,\n                -764,\n                -755,\n                -710,\n                -706,\n                -646,\n                -614,\n                -610,\n                -583,\n                -484,\n                -474,\n                -439,\n                -359,\n                -348,\n                -246,\n                -215,\n                -212,\n                -171,\n                -160,\n                -153,\n                -56,\n                -32,\n                -27,\n                -3,\n                9,\n                12,\n                55,\n                107,\n                131,\n                222,\n                230,\n                240,\n                246,\n                427,\n                507,\n                564,\n                565,\n                568,\n                603,\n                635,\n                661,\n                710,\n                736,\n                787,\n                821,\n                892,\n                934,\n                970,\n                996,\n            ],\n        )\n\n    def test_case_14(self):\n        self.assertEqual(\n            program.quickSort(\n                [\n                    991,\n                    -731,\n                    -882,\n                    100,\n                    280,\n                    -43,\n                    432,\n                    771,\n                    -581,\n                    180,\n                    -382,\n                    -998,\n                    847,\n                    80,\n                    -220,\n                    680,\n                    769,\n                    -75,\n                    -817,\n                    366,\n                    956,\n                    749,\n                    471,\n                    228,\n                    -435,\n                    -269,\n                    652,\n                    -331,\n                    -387,\n                    -657,\n                    -255,\n                    382,\n                    -216,\n                    -6,\n                    -163,\n                    -681,\n                    980,\n                    913,\n                    -169,\n                    972,\n                    -523,\n                    354,\n                    747,\n                    805,\n                    382,\n                    -827,\n                    -796,\n                    372,\n                    753,\n                    519,\n                    906,\n                ]\n            ),\n            [\n                -998,\n                -882,\n                -827,\n                -817,\n                -796,\n                -731,\n                -681,\n                -657,\n                -581,\n                -523,\n                -435,\n                -387,\n                -382,\n                -331,\n                -269,\n                -255,\n                -220,\n                -216,\n                -169,\n                -163,\n                -75,\n                -43,\n                -6,\n                80,\n                100,\n                180,\n                228,\n                280,\n                354,\n                366,\n                372,\n                382,\n                382,\n                432,\n                471,\n                519,\n                652,\n                680,\n                747,\n                749,\n                753,\n                769,\n                771,\n                805,\n                847,\n                906,\n                913,\n                956,\n                972,\n                980,\n                991,\n            ],\n        )\n\n    def test_case_15(self):\n        self.assertEqual(\n            program.quickSort(\n                [\n                    384,\n                    -67,\n                    120,\n                    759,\n                    697,\n                    232,\n                    -7,\n                    -557,\n                    -772,\n                    -987,\n                    687,\n                    397,\n                    -763,\n                    -86,\n                    -491,\n                    947,\n                    921,\n                    421,\n                    825,\n                    -679,\n                    946,\n                    -562,\n                    -626,\n                    -898,\n                    204,\n                    776,\n                    -343,\n                    393,\n                    51,\n                    -796,\n                    -425,\n                    31,\n                    165,\n                    975,\n                    -720,\n                    878,\n                    -785,\n                    -367,\n                    -609,\n                    662,\n                    -79,\n                    -112,\n                    -313,\n                    -94,\n                    187,\n                    260,\n                    43,\n                    85,\n                    -746,\n                    612,\n                    67,\n                    -389,\n                    508,\n                    777,\n                    624,\n                    993,\n                    -581,\n                    34,\n                    444,\n                    -544,\n                    243,\n                    -995,\n                    432,\n                    -755,\n                    -978,\n                    515,\n                    -68,\n                    -559,\n                    489,\n                    732,\n                    -19,\n                    -489,\n                    737,\n                    924,\n                ]\n            ),\n            [\n                -995,\n                -987,\n                -978,\n                -898,\n                -796,\n                -785,\n                -772,\n                -763,\n                -755,\n                -746,\n                -720,\n                -679,\n                -626,\n                -609,\n                -581,\n                -562,\n                -559,\n                -557,\n                -544,\n                -491,\n                -489,\n                -425,\n                -389,\n                -367,\n                -343,\n                -313,\n                -112,\n                -94,\n                -86,\n                -79,\n                -68,\n                -67,\n                -19,\n                -7,\n                31,\n                34,\n                43,\n                51,\n                67,\n                85,\n                120,\n                165,\n                187,\n                204,\n                232,\n                243,\n                260,\n                384,\n                393,\n                397,\n                421,\n                432,\n                444,\n                489,\n                508,\n                515,\n                612,\n                624,\n                662,\n                687,\n                697,\n                732,\n                737,\n                759,\n                776,\n                777,\n                825,\n                878,\n                921,\n                924,\n                946,\n                947,\n                975,\n                993,\n            ],\n        )\n\n    def test_case_16(self):\n        self.assertEqual(\n            program.quickSort(\n                [\n                    544,\n                    -578,\n                    556,\n                    713,\n                    -655,\n                    -359,\n                    -810,\n                    -731,\n                    194,\n                    -531,\n                    -685,\n                    689,\n                    -279,\n                    -738,\n                    886,\n                    -54,\n                    -320,\n                    -500,\n                    738,\n                    445,\n                    -401,\n                    993,\n                    -753,\n                    329,\n                    -396,\n                    -924,\n                    -975,\n                    376,\n                    748,\n                    -356,\n                    972,\n                    459,\n                    399,\n                    669,\n                    -488,\n                    568,\n                    -702,\n                    551,\n                    763,\n                    -90,\n                    -249,\n                    -45,\n                    452,\n                    -917,\n                    394,\n                    195,\n                    -877,\n                    153,\n                    153,\n                    788,\n                    844,\n                    867,\n                    266,\n                    -739,\n                    904,\n                    -154,\n                    -947,\n                    464,\n                    343,\n                    -312,\n                    150,\n                    -656,\n                    528,\n                    61,\n                    94,\n                    -581,\n                ]\n            ),\n            [\n                -975,\n                -947,\n                -924,\n                -917,\n                -877,\n                -810,\n                -753,\n                -739,\n                -738,\n                -731,\n                -702,\n                -685,\n                -656,\n                -655,\n                -581,\n                -578,\n                -531,\n                -500,\n                -488,\n                -401,\n                -396,\n                -359,\n                -356,\n                -320,\n                -312,\n                -279,\n                -249,\n                -154,\n                -90,\n                -54,\n                -45,\n                61,\n                94,\n                150,\n                153,\n                153,\n                194,\n                195,\n                266,\n                329,\n                343,\n                376,\n                394,\n                399,\n                445,\n                452,\n                459,\n                464,\n                528,\n                544,\n                551,\n                556,\n                568,\n                669,\n                689,\n                713,\n                738,\n                748,\n                763,\n                788,\n                844,\n                867,\n                886,\n                904,\n                972,\n                993,\n            ],\n        )\n\n    def test_case_17(self):\n        self.assertEqual(\n            program.quickSort(\n                [\n                    -19,\n                    759,\n                    168,\n                    306,\n                    270,\n                    -602,\n                    558,\n                    -821,\n                    -599,\n                    328,\n                    753,\n                    -50,\n                    -568,\n                    268,\n                    -92,\n                    381,\n                    -96,\n                    730,\n                    629,\n                    678,\n                    -837,\n                    351,\n                    896,\n                    63,\n                    -85,\n                    437,\n                    -453,\n                    -991,\n                    294,\n                    -384,\n                    -628,\n                    -529,\n                    518,\n                    613,\n                    -319,\n                    -519,\n                    -220,\n                    -67,\n                    834,\n                    619,\n                    802,\n                    207,\n                    946,\n                    -904,\n                    295,\n                    718,\n                    -740,\n                    -557,\n                    -560,\n                    80,\n                    296,\n                    -90,\n                    401,\n                    407,\n                    798,\n                    254,\n                    154,\n                    387,\n                    434,\n                    491,\n                    228,\n                    307,\n                    268,\n                    505,\n                    -415,\n                    -976,\n                    676,\n                    -917,\n                    937,\n                    -609,\n                    593,\n                    -36,\n                    881,\n                    607,\n                    121,\n                    -373,\n                    915,\n                    -885,\n                    879,\n                    391,\n                    -158,\n                    588,\n                    -641,\n                    -937,\n                    986,\n                    949,\n                    -321,\n                ]\n            ),\n            [\n                -991,\n                -976,\n                -937,\n                -917,\n                -904,\n                -885,\n                -837,\n                -821,\n                -740,\n                -641,\n                -628,\n                -609,\n                -602,\n                -599,\n                -568,\n                -560,\n                -557,\n                -529,\n                -519,\n                -453,\n                -415,\n                -384,\n                -373,\n                -321,\n                -319,\n                -220,\n                -158,\n                -96,\n                -92,\n                -90,\n                -85,\n                -67,\n                -50,\n                -36,\n                -19,\n                63,\n                80,\n                121,\n                154,\n                168,\n                207,\n                228,\n                254,\n                268,\n                268,\n                270,\n                294,\n                295,\n                296,\n                306,\n                307,\n                328,\n                351,\n                381,\n                387,\n                391,\n                401,\n                407,\n                434,\n                437,\n                491,\n                505,\n                518,\n                558,\n                588,\n                593,\n                607,\n                613,\n                619,\n                629,\n                676,\n                678,\n                718,\n                730,\n                753,\n                759,\n                798,\n                802,\n                834,\n                879,\n                881,\n                896,\n                915,\n                937,\n                946,\n                949,\n                986,\n            ],\n        )\n\n    def test_case_18(self):\n        self.assertEqual(\n            program.quickSort(\n                [\n                    -823,\n                    164,\n                    48,\n                    -987,\n                    323,\n                    399,\n                    -293,\n                    183,\n                    -908,\n                    -376,\n                    14,\n                    980,\n                    965,\n                    842,\n                    422,\n                    829,\n                    59,\n                    724,\n                    -415,\n                    -733,\n                    356,\n                    -855,\n                    -155,\n                    52,\n                    328,\n                    -544,\n                    -371,\n                    -160,\n                    -942,\n                    -51,\n                    700,\n                    -363,\n                    -353,\n                    -359,\n                    238,\n                    892,\n                    -730,\n                    -575,\n                    892,\n                    490,\n                    490,\n                    995,\n                    572,\n                    888,\n                    -935,\n                    919,\n                    -191,\n                    646,\n                    -120,\n                    125,\n                    -817,\n                    341,\n                    -575,\n                    372,\n                    -874,\n                    243,\n                    610,\n                    -36,\n                    -685,\n                    -337,\n                    -13,\n                    295,\n                    800,\n                    -950,\n                    -949,\n                    -257,\n                    631,\n                    -542,\n                    201,\n                    -796,\n                    157,\n                    950,\n                    540,\n                    -846,\n                    -265,\n                    746,\n                    355,\n                    -578,\n                    -441,\n                    -254,\n                    -941,\n                    -738,\n                    -469,\n                    -167,\n                    -420,\n                    -126,\n                    -410,\n                    59,\n                ]\n            ),\n            [\n                -987,\n                -950,\n                -949,\n                -942,\n                -941,\n                -935,\n                -908,\n                -874,\n                -855,\n                -846,\n                -823,\n                -817,\n                -796,\n                -738,\n                -733,\n                -730,\n                -685,\n                -578,\n                -575,\n                -575,\n                -544,\n                -542,\n                -469,\n                -441,\n                -420,\n                -415,\n                -410,\n                -376,\n                -371,\n                -363,\n                -359,\n                -353,\n                -337,\n                -293,\n                -265,\n                -257,\n                -254,\n                -191,\n                -167,\n                -160,\n                -155,\n                -126,\n                -120,\n                -51,\n                -36,\n                -13,\n                14,\n                48,\n                52,\n                59,\n                59,\n                125,\n                157,\n                164,\n                183,\n                201,\n                238,\n                243,\n                295,\n                323,\n                328,\n                341,\n                355,\n                356,\n                372,\n                399,\n                422,\n                490,\n                490,\n                540,\n                572,\n                610,\n                631,\n                646,\n                700,\n                724,\n                746,\n                800,\n                829,\n                842,\n                888,\n                892,\n                892,\n                919,\n                950,\n                965,\n                980,\n                995,\n            ],\n        )\n",
      "SandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(program.quickSort([8, 5, 2, 9, 5, 6, 3]), [2, 3, 5, 5, 6, 8, 9])\n",
      "Solutions": [
        "# Copyright © 2020 Code Complete. All rights reserved.\n\n# Best: O(nlog(n)) time | O(log(n)) space\n# Average: O(nlog(n)) time | O(log(n)) space\n# Worst: O(n^2) time | O(log(n)) space\ndef quickSort(array):\n    quickSortHelper(array, 0, len(array) - 1)\n    return array\n\n\ndef quickSortHelper(array, startIdx, endIdx):\n    if startIdx >= endIdx:\n        return\n    pivotIdx = startIdx\n    leftIdx = startIdx + 1\n    rightIdx = endIdx\n    while rightIdx >= leftIdx:\n        if array[leftIdx] > array[pivotIdx] and array[rightIdx] < array[pivotIdx]:\n            swap(leftIdx, rightIdx, array)\n        if array[leftIdx] <= array[pivotIdx]:\n            leftIdx += 1\n        if array[rightIdx] >= array[pivotIdx]:\n            rightIdx -= 1\n    swap(pivotIdx, rightIdx, array)\n    leftSubarrayIsSmaller = rightIdx - 1 - startIdx < endIdx - (rightIdx + 1)\n    if leftSubarrayIsSmaller:\n        quickSortHelper(array, startIdx, rightIdx - 1)\n        quickSortHelper(array, rightIdx + 1, endIdx)\n    else:\n        quickSortHelper(array, rightIdx + 1, endIdx)\n        quickSortHelper(array, startIdx, rightIdx - 1)\n\n\ndef swap(i, j, array):\n    array[i], array[j] = array[j], array[i]\n"
      ]
    },
    "swift": {
      "Language": "swift",
      "StartingCode": "class Program {\n  func quickSort(_ array: inout [Int]) -> [Int] {\n    // Write your code here.\n    return []\n  }\n}\n",
      "StartingTest": "class ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      var arr = [1]\n      try assertEqual([1], program.quickSort(&arr))\n    }\n    runTest(\"Test Case 2\") { () throws -> Void in\n      var arr = [1, 2]\n      try assertEqual([1, 2], program.quickSort(&arr))\n    }\n    runTest(\"Test Case 3\") { () throws -> Void in\n      var arr = [2, 1]\n      try assertEqual([1, 2], program.quickSort(&arr))\n    }\n    runTest(\"Test Case 4\") { () throws -> Void in\n      var arr = [1, 3, 2]\n      try assertEqual([1, 2, 3], program.quickSort(&arr))\n    }\n    runTest(\"Test Case 5\") { () throws -> Void in\n      var arr = [3, 1, 2]\n      try assertEqual([1, 2, 3], program.quickSort(&arr))\n    }\n    runTest(\"Test Case 6\") { () throws -> Void in\n      var arr = [1, 2, 3]\n      try assertEqual([1, 2, 3], program.quickSort(&arr))\n    }\n    runTest(\"Test Case 7\") { () throws -> Void in\n      var arr = [-4, 5, 10, 8, -10, -6, -4, -2, -5, 3, 5, -4, -5, -1, 1, 6, -7, -6, -7, 8]\n      try assertEqual([-10, -7, -7, -6, -6, -5, -5, -4, -4, -4, -2, -1, 1, 3, 5, 5, 6, 8, 8, 10], program.quickSort(&arr))\n    }\n    runTest(\"Test Case 8\") { () throws -> Void in\n      var arr = [-7, 2, 3, 8, -10, 4, -6, -10, -2, -7, 10, 5, 2, 9, -9, -5, 3, 8]\n      try assertEqual([-10, -10, -9, -7, -7, -6, -5, -2, 2, 2, 3, 3, 4, 5, 8, 8, 9, 10], program.quickSort(&arr))\n    }\n    runTest(\"Test Case 9\") { () throws -> Void in\n      var arr = [8, -6, 7, 10, 8, -1, 6, 2, 4, -5, 1, 10, 8, -10, -9, -10, 8, 9, -2, 7, -2, 4]\n      try assertEqual([-10, -10, -9, -6, -5, -2, -2, -1, 1, 2, 4, 4, 6, 7, 7, 8, 8, 8, 8, 9, 10, 10], program.quickSort(&arr))\n    }\n    runTest(\"Test Case 10\") { () throws -> Void in\n      var arr = [5, -2, 2, -8, 3, -10, -6, -1, 2, -2, 9, 1, 1]\n      try assertEqual([-10, -8, -6, -2, -2, -1, 1, 1, 2, 2, 3, 5, 9], program.quickSort(&arr))\n    }\n    runTest(\"Test Case 11\") { () throws -> Void in\n      var arr = [2, -2, -6, -10, 10, 4, -8, -1, -8, -4, 7, -4, 0, 9, -9, 0, -9, -9, 8, 1, -4, 4, 8, 5, 1, 5, 0, 0, 2, -10]\n      try assertEqual([-10, -10, -9, -9, -9, -8, -8, -6, -4, -4, -4, -2, -1, 0, 0, 0, 0, 1, 1, 2, 2, 4, 4, 5, 5, 7, 8, 8, 9, 10], program.quickSort(&arr))\n    }\n    runTest(\"Test Case 12\") { () throws -> Void in\n      var arr = [4, 1, 5, 0, -9, -3, -3, 9, 3, -4, -9, 8, 1, -3, -7, -4, -9, -1, -7, -2, -7, 4]\n      try assertEqual([-9, -9, -9, -7, -7, -7, -4, -4, -3, -3, -3, -2, -1, 0, 1, 1, 3, 4, 4, 5, 8, 9], program.quickSort(&arr))\n    }\n    runTest(\"Test Case 13\") { () throws -> Void in\n      var arr = [427, 787, 222, 996, -359, -614, 246, 230, 107, -706, 568, 9, -246, 12, -764, -212, -484, 603, 934, -848, -646, -991, 661, -32, -348, -474, -439, -56, 507, 736, 635, -171, -215, 564, -710, 710, 565, 892, 970, -755, 55, 821, -3, -153, 240, -160, -610, -583, -27, 131]\n      try assertEqual([-991, -848, -764, -755, -710, -706, -646, -614, -610, -583, -484, -474, -439, -359, -348, -246, -215, -212, -171, -160, -153, -56, -32, -27, -3, 9, 12, 55, 107, 131, 222, 230, 240, 246, 427, 507, 564, 565, 568, 603, 635, 661, 710, 736, 787, 821, 892, 934, 970, 996], program.quickSort(&arr))\n    }\n    runTest(\"Test Case 14\") { () throws -> Void in\n      var arr = [991, -731, -882, 100, 280, -43, 432, 771, -581, 180, -382, -998, 847, 80, -220, 680, 769, -75, -817, 366, 956, 749, 471, 228, -435, -269, 652, -331, -387, -657, -255, 382, -216, -6, -163, -681, 980, 913, -169, 972, -523, 354, 747, 805, 382, -827, -796, 372, 753, 519, 906]\n      try assertEqual([-998, -882, -827, -817, -796, -731, -681, -657, -581, -523, -435, -387, -382, -331, -269, -255, -220, -216, -169, -163, -75, -43, -6, 80, 100, 180, 228, 280, 354, 366, 372, 382, 382, 432, 471, 519, 652, 680, 747, 749, 753, 769, 771, 805, 847, 906, 913, 956, 972, 980, 991], program.quickSort(&arr))\n    }\n    runTest(\"Test Case 15\") { () throws -> Void in\n      var arr = [384, -67, 120, 759, 697, 232, -7, -557, -772, -987, 687, 397, -763, -86, -491, 947, 921, 421, 825, -679, 946, -562, -626, -898, 204, 776, -343, 393, 51, -796, -425, 31, 165, 975, -720, 878, -785, -367, -609, 662, -79, -112, -313, -94, 187, 260, 43, 85, -746, 612, 67, -389, 508, 777, 624, 993, -581, 34, 444, -544, 243, -995, 432, -755, -978, 515, -68, -559, 489, 732, -19, -489, 737, 924]\n      try assertEqual([-995, -987, -978, -898, -796, -785, -772, -763, -755, -746, -720, -679, -626, -609, -581, -562, -559, -557, -544, -491, -489, -425, -389, -367, -343, -313, -112, -94, -86, -79, -68, -67, -19, -7, 31, 34, 43, 51, 67, 85, 120, 165, 187, 204, 232, 243, 260, 384, 393, 397, 421, 432, 444, 489, 508, 515, 612, 624, 662, 687, 697, 732, 737, 759, 776, 777, 825, 878, 921, 924, 946, 947, 975, 993], program.quickSort(&arr))\n    }\n    runTest(\"Test Case 16\") { () throws -> Void in\n      var arr = [544, -578, 556, 713, -655, -359, -810, -731, 194, -531, -685, 689, -279, -738, 886, -54, -320, -500, 738, 445, -401, 993, -753, 329, -396, -924, -975, 376, 748, -356, 972, 459, 399, 669, -488, 568, -702, 551, 763, -90, -249, -45, 452, -917, 394, 195, -877, 153, 153, 788, 844, 867, 266, -739, 904, -154, -947, 464, 343, -312, 150, -656, 528, 61, 94, -581]\n      try assertEqual([-975, -947, -924, -917, -877, -810, -753, -739, -738, -731, -702, -685, -656, -655, -581, -578, -531, -500, -488, -401, -396, -359, -356, -320, -312, -279, -249, -154, -90, -54, -45, 61, 94, 150, 153, 153, 194, 195, 266, 329, 343, 376, 394, 399, 445, 452, 459, 464, 528, 544, 551, 556, 568, 669, 689, 713, 738, 748, 763, 788, 844, 867, 886, 904, 972, 993], program.quickSort(&arr))\n    }\n    runTest(\"Test Case 17\") { () throws -> Void in\n      var arr = [-19, 759, 168, 306, 270, -602, 558, -821, -599, 328, 753, -50, -568, 268, -92, 381, -96, 730, 629, 678, -837, 351, 896, 63, -85, 437, -453, -991, 294, -384, -628, -529, 518, 613, -319, -519, -220, -67, 834, 619, 802, 207, 946, -904, 295, 718, -740, -557, -560, 80, 296, -90, 401, 407, 798, 254, 154, 387, 434, 491, 228, 307, 268, 505, -415, -976, 676, -917, 937, -609, 593, -36, 881, 607, 121, -373, 915, -885, 879, 391, -158, 588, -641, -937, 986, 949, -321]\n      try assertEqual([-991, -976, -937, -917, -904, -885, -837, -821, -740, -641, -628, -609, -602, -599, -568, -560, -557, -529, -519, -453, -415, -384, -373, -321, -319, -220, -158, -96, -92, -90, -85, -67, -50, -36, -19, 63, 80, 121, 154, 168, 207, 228, 254, 268, 268, 270, 294, 295, 296, 306, 307, 328, 351, 381, 387, 391, 401, 407, 434, 437, 491, 505, 518, 558, 588, 593, 607, 613, 619, 629, 676, 678, 718, 730, 753, 759, 798, 802, 834, 879, 881, 896, 915, 937, 946, 949, 986], program.quickSort(&arr))\n    }\n    runTest(\"Test Case 18\") { () throws -> Void in\n      var arr = [-823, 164, 48, -987, 323, 399, -293, 183, -908, -376, 14, 980, 965, 842, 422, 829, 59, 724, -415, -733, 356, -855, -155, 52, 328, -544, -371, -160, -942, -51, 700, -363, -353, -359, 238, 892, -730, -575, 892, 490, 490, 995, 572, 888, -935, 919, -191, 646, -120, 125, -817, 341, -575, 372, -874, 243, 610, -36, -685, -337, -13, 295, 800, -950, -949, -257, 631, -542, 201, -796, 157, 950, 540, -846, -265, 746, 355, -578, -441, -254, -941, -738, -469, -167, -420, -126, -410, 59]\n      try assertEqual([-987, -950, -949, -942, -941, -935, -908, -874, -855, -846, -823, -817, -796, -738, -733, -730, -685, -578, -575, -575, -544, -542, -469, -441, -420, -415, -410, -376, -371, -363, -359, -353, -337, -293, -265, -257, -254, -191, -167, -160, -155, -126, -120, -51, -36, -13, 14, 48, 52, 59, 59, 125, 157, 164, 183, 201, 238, 243, 295, 323, 328, 341, 355, 356, 372, 399, 422, 490, 490, 540, 572, 610, 631, 646, 700, 724, 746, 800, 829, 842, 888, 892, 892, 919, 950, 965, 980, 995], program.quickSort(&arr))\n    }\n  }\n}\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      var arrayToSort = [8, 5, 2, 9, 5, 6, 3]\n      try assertEqual([2, 3, 5, 5, 6, 8, 9], program.quickSort(&arrayToSort))\n    }\n  }\n}\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nclass Program {\n  // Best: O(nlog(n)) time | O(log(n)) space\n  // Average: O(nlog(n)) time | O(log(n)) space\n  // Worst: O(n^2) time | O(log(n)) space\n  func quickSort(_ array: inout [Int]) -> [Int] {\n    quickSortHelper(&array, 0, array.count - 1)\n    return array\n  }\n\n  func quickSortHelper(_ array: inout [Int], _ startIndex: Int, _ endIndex: Int) {\n    if startIndex >= endIndex {\n      return\n    }\n\n    let pivotIndex = startIndex\n    var leftPointer = startIndex + 1\n    var rightPointer = endIndex\n\n    while leftPointer <= rightPointer {\n      if array[leftPointer] > array[pivotIndex], array[rightPointer] < array[pivotIndex] {\n        swap(&array, leftPointer, rightPointer)\n      }\n\n      if array[leftPointer] <= array[pivotIndex] {\n        leftPointer += 1\n      }\n\n      if array[rightPointer] >= array[pivotIndex] {\n        rightPointer -= 1\n      }\n    }\n\n    swap(&array, pivotIndex, rightPointer)\n\n    let leftLength = rightPointer - 1 - startIndex\n    let rightLength = endIndex - rightPointer + 1\n\n    let leftSubArrayIsSmaller = leftLength < rightLength\n\n    if leftSubArrayIsSmaller {\n      quickSortHelper(&array, startIndex, rightPointer - 1)\n      quickSortHelper(&array, rightPointer + 1, endIndex)\n    } else {\n      quickSortHelper(&array, rightPointer + 1, endIndex)\n      quickSortHelper(&array, startIndex, rightPointer - 1)\n    }\n  }\n\n  func swap(_ array: inout [Int], _ leftPointer: Int, _ rightPointer: Int) {\n    let temp = array[leftPointer]\n\n    array[leftPointer] = array[rightPointer]\n    array[rightPointer] = temp\n  }\n}\n"
      ]
    },
    "typescript": {
      "Language": "typescript",
      "StartingCode": "export function quickSort(array: number[]) {\n  // Write your code here.\n  return array;\n}\n",
      "StartingTest": "",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const input = [8, 5, 2, 9, 5, 6, 3];\n  chai.expect(program.quickSort(input)).to.deep.equal([2, 3, 5, 5, 6, 8, 9]);\n});\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\n// Best: O(nlog(n)) time | O(log(n)) space\n// Average: O(nlog(n)) time | O(log(n)) space\n// Worst: O(n^2) time | O(log(n)) space\nexport function quickSort(array: number[]) {\n  quickSortHelper(array, 0, array.length - 1);\n  return array;\n}\n\nfunction quickSortHelper(array: number[], startIdx: number, endIdx: number) {\n  if (startIdx >= endIdx) return;\n  const pivotIdx = startIdx;\n  let leftIdx = startIdx + 1;\n  let rightIdx = endIdx;\n  while (rightIdx >= leftIdx) {\n    if (array[leftIdx] > array[pivotIdx] && array[rightIdx] < array[pivotIdx]) {\n      swap(leftIdx, rightIdx, array);\n    }\n    if (array[leftIdx] <= array[pivotIdx]) leftIdx++;\n    if (array[rightIdx] >= array[pivotIdx]) rightIdx--;\n  }\n  swap(pivotIdx, rightIdx, array);\n  const leftSubarrayIsSmaller = rightIdx - 1 - startIdx < endIdx - (rightIdx + 1);\n  if (leftSubarrayIsSmaller) {\n    quickSortHelper(array, startIdx, rightIdx - 1);\n    quickSortHelper(array, rightIdx + 1, endIdx);\n  } else {\n    quickSortHelper(array, rightIdx + 1, endIdx);\n    quickSortHelper(array, startIdx, rightIdx - 1);\n  }\n}\n\nfunction swap(i: number, j: number, array: number[]) {\n  let temp = array[j];\n  array[j] = array[i];\n  array[i] = temp;\n}\n"
      ]
    }
  },
  "JSONTestLanguages": [
    "javascript",
    "cpp",
    "python",
    "java",
    "csharp",
    "go",
    "swift",
    "typescript"
  ],
  "JSONTests": [
    {
      "array": [
        8,
        5,
        2,
        9,
        5,
        6,
        3
      ]
    },
    {
      "array": [
        1
      ]
    },
    {
      "array": [
        1,
        2
      ]
    },
    {
      "array": [
        2,
        1
      ]
    },
    {
      "array": [
        1,
        3,
        2
      ]
    },
    {
      "array": [
        3,
        1,
        2
      ]
    },
    {
      "array": [
        1,
        2,
        3
      ]
    },
    {
      "array": [
        -4,
        5,
        10,
        8,
        -10,
        -6,
        -4,
        -2,
        -5,
        3,
        5,
        -4,
        -5,
        -1,
        1,
        6,
        -7,
        -6,
        -7,
        8
      ]
    },
    {
      "array": [
        -7,
        2,
        3,
        8,
        -10,
        4,
        -6,
        -10,
        -2,
        -7,
        10,
        5,
        2,
        9,
        -9,
        -5,
        3,
        8
      ]
    },
    {
      "array": [
        8,
        -6,
        7,
        10,
        8,
        -1,
        6,
        2,
        4,
        -5,
        1,
        10,
        8,
        -10,
        -9,
        -10,
        8,
        9,
        -2,
        7,
        -2,
        4
      ]
    },
    {
      "array": [
        5,
        -2,
        2,
        -8,
        3,
        -10,
        -6,
        -1,
        2,
        -2,
        9,
        1,
        1
      ]
    },
    {
      "array": [
        2,
        -2,
        -6,
        -10,
        10,
        4,
        -8,
        -1,
        -8,
        -4,
        7,
        -4,
        0,
        9,
        -9,
        0,
        -9,
        -9,
        8,
        1,
        -4,
        4,
        8,
        5,
        1,
        5,
        0,
        0,
        2,
        -10
      ]
    },
    {
      "array": [
        4,
        1,
        5,
        0,
        -9,
        -3,
        -3,
        9,
        3,
        -4,
        -9,
        8,
        1,
        -3,
        -7,
        -4,
        -9,
        -1,
        -7,
        -2,
        -7,
        4
      ]
    },
    {
      "array": [
        427,
        787,
        222,
        996,
        -359,
        -614,
        246,
        230,
        107,
        -706,
        568,
        9,
        -246,
        12,
        -764,
        -212,
        -484,
        603,
        934,
        -848,
        -646,
        -991,
        661,
        -32,
        -348,
        -474,
        -439,
        -56,
        507,
        736,
        635,
        -171,
        -215,
        564,
        -710,
        710,
        565,
        892,
        970,
        -755,
        55,
        821,
        -3,
        -153,
        240,
        -160,
        -610,
        -583,
        -27,
        131
      ]
    },
    {
      "array": [
        991,
        -731,
        -882,
        100,
        280,
        -43,
        432,
        771,
        -581,
        180,
        -382,
        -998,
        847,
        80,
        -220,
        680,
        769,
        -75,
        -817,
        366,
        956,
        749,
        471,
        228,
        -435,
        -269,
        652,
        -331,
        -387,
        -657,
        -255,
        382,
        -216,
        -6,
        -163,
        -681,
        980,
        913,
        -169,
        972,
        -523,
        354,
        747,
        805,
        382,
        -827,
        -796,
        372,
        753,
        519,
        906
      ]
    },
    {
      "array": [
        384,
        -67,
        120,
        759,
        697,
        232,
        -7,
        -557,
        -772,
        -987,
        687,
        397,
        -763,
        -86,
        -491,
        947,
        921,
        421,
        825,
        -679,
        946,
        -562,
        -626,
        -898,
        204,
        776,
        -343,
        393,
        51,
        -796,
        -425,
        31,
        165,
        975,
        -720,
        878,
        -785,
        -367,
        -609,
        662,
        -79,
        -112,
        -313,
        -94,
        187,
        260,
        43,
        85,
        -746,
        612,
        67,
        -389,
        508,
        777,
        624,
        993,
        -581,
        34,
        444,
        -544,
        243,
        -995,
        432,
        -755,
        -978,
        515,
        -68,
        -559,
        489,
        732,
        -19,
        -489,
        737,
        924
      ]
    },
    {
      "array": [
        544,
        -578,
        556,
        713,
        -655,
        -359,
        -810,
        -731,
        194,
        -531,
        -685,
        689,
        -279,
        -738,
        886,
        -54,
        -320,
        -500,
        738,
        445,
        -401,
        993,
        -753,
        329,
        -396,
        -924,
        -975,
        376,
        748,
        -356,
        972,
        459,
        399,
        669,
        -488,
        568,
        -702,
        551,
        763,
        -90,
        -249,
        -45,
        452,
        -917,
        394,
        195,
        -877,
        153,
        153,
        788,
        844,
        867,
        266,
        -739,
        904,
        -154,
        -947,
        464,
        343,
        -312,
        150,
        -656,
        528,
        61,
        94,
        -581
      ]
    },
    {
      "array": [
        -19,
        759,
        168,
        306,
        270,
        -602,
        558,
        -821,
        -599,
        328,
        753,
        -50,
        -568,
        268,
        -92,
        381,
        -96,
        730,
        629,
        678,
        -837,
        351,
        896,
        63,
        -85,
        437,
        -453,
        -991,
        294,
        -384,
        -628,
        -529,
        518,
        613,
        -319,
        -519,
        -220,
        -67,
        834,
        619,
        802,
        207,
        946,
        -904,
        295,
        718,
        -740,
        -557,
        -560,
        80,
        296,
        -90,
        401,
        407,
        798,
        254,
        154,
        387,
        434,
        491,
        228,
        307,
        268,
        505,
        -415,
        -976,
        676,
        -917,
        937,
        -609,
        593,
        -36,
        881,
        607,
        121,
        -373,
        915,
        -885,
        879,
        391,
        -158,
        588,
        -641,
        -937,
        986,
        949,
        -321
      ]
    },
    {
      "array": [
        -823,
        164,
        48,
        -987,
        323,
        399,
        -293,
        183,
        -908,
        -376,
        14,
        980,
        965,
        842,
        422,
        829,
        59,
        724,
        -415,
        -733,
        356,
        -855,
        -155,
        52,
        328,
        -544,
        -371,
        -160,
        -942,
        -51,
        700,
        -363,
        -353,
        -359,
        238,
        892,
        -730,
        -575,
        892,
        490,
        490,
        995,
        572,
        888,
        -935,
        919,
        -191,
        646,
        -120,
        125,
        -817,
        341,
        -575,
        372,
        -874,
        243,
        610,
        -36,
        -685,
        -337,
        -13,
        295,
        800,
        -950,
        -949,
        -257,
        631,
        -542,
        201,
        -796,
        157,
        950,
        540,
        -846,
        -265,
        746,
        355,
        -578,
        -441,
        -254,
        -941,
        -738,
        -469,
        -167,
        -420,
        -126,
        -410,
        59
      ]
    }
  ],
  "JSONAnswers": [
    [
      [
        2,
        3,
        5,
        5,
        6,
        8,
        9
      ],
      [
        1
      ],
      [
        1,
        2
      ],
      [
        1,
        2
      ],
      [
        1,
        2,
        3
      ],
      [
        1,
        2,
        3
      ],
      [
        1,
        2,
        3
      ],
      [
        -10,
        -7,
        -7,
        -6,
        -6,
        -5,
        -5,
        -4,
        -4,
        -4,
        -2,
        -1,
        1,
        3,
        5,
        5,
        6,
        8,
        8,
        10
      ],
      [
        -10,
        -10,
        -9,
        -7,
        -7,
        -6,
        -5,
        -2,
        2,
        2,
        3,
        3,
        4,
        5,
        8,
        8,
        9,
        10
      ],
      [
        -10,
        -10,
        -9,
        -6,
        -5,
        -2,
        -2,
        -1,
        1,
        2,
        4,
        4,
        6,
        7,
        7,
        8,
        8,
        8,
        8,
        9,
        10,
        10
      ],
      [
        -10,
        -8,
        -6,
        -2,
        -2,
        -1,
        1,
        1,
        2,
        2,
        3,
        5,
        9
      ],
      [
        -10,
        -10,
        -9,
        -9,
        -9,
        -8,
        -8,
        -6,
        -4,
        -4,
        -4,
        -2,
        -1,
        0,
        0,
        0,
        0,
        1,
        1,
        2,
        2,
        4,
        4,
        5,
        5,
        7,
        8,
        8,
        9,
        10
      ],
      [
        -9,
        -9,
        -9,
        -7,
        -7,
        -7,
        -4,
        -4,
        -3,
        -3,
        -3,
        -2,
        -1,
        0,
        1,
        1,
        3,
        4,
        4,
        5,
        8,
        9
      ],
      [
        -991,
        -848,
        -764,
        -755,
        -710,
        -706,
        -646,
        -614,
        -610,
        -583,
        -484,
        -474,
        -439,
        -359,
        -348,
        -246,
        -215,
        -212,
        -171,
        -160,
        -153,
        -56,
        -32,
        -27,
        -3,
        9,
        12,
        55,
        107,
        131,
        222,
        230,
        240,
        246,
        427,
        507,
        564,
        565,
        568,
        603,
        635,
        661,
        710,
        736,
        787,
        821,
        892,
        934,
        970,
        996
      ],
      [
        -998,
        -882,
        -827,
        -817,
        -796,
        -731,
        -681,
        -657,
        -581,
        -523,
        -435,
        -387,
        -382,
        -331,
        -269,
        -255,
        -220,
        -216,
        -169,
        -163,
        -75,
        -43,
        -6,
        80,
        100,
        180,
        228,
        280,
        354,
        366,
        372,
        382,
        382,
        432,
        471,
        519,
        652,
        680,
        747,
        749,
        753,
        769,
        771,
        805,
        847,
        906,
        913,
        956,
        972,
        980,
        991
      ],
      [
        -995,
        -987,
        -978,
        -898,
        -796,
        -785,
        -772,
        -763,
        -755,
        -746,
        -720,
        -679,
        -626,
        -609,
        -581,
        -562,
        -559,
        -557,
        -544,
        -491,
        -489,
        -425,
        -389,
        -367,
        -343,
        -313,
        -112,
        -94,
        -86,
        -79,
        -68,
        -67,
        -19,
        -7,
        31,
        34,
        43,
        51,
        67,
        85,
        120,
        165,
        187,
        204,
        232,
        243,
        260,
        384,
        393,
        397,
        421,
        432,
        444,
        489,
        508,
        515,
        612,
        624,
        662,
        687,
        697,
        732,
        737,
        759,
        776,
        777,
        825,
        878,
        921,
        924,
        946,
        947,
        975,
        993
      ],
      [
        -975,
        -947,
        -924,
        -917,
        -877,
        -810,
        -753,
        -739,
        -738,
        -731,
        -702,
        -685,
        -656,
        -655,
        -581,
        -578,
        -531,
        -500,
        -488,
        -401,
        -396,
        -359,
        -356,
        -320,
        -312,
        -279,
        -249,
        -154,
        -90,
        -54,
        -45,
        61,
        94,
        150,
        153,
        153,
        194,
        195,
        266,
        329,
        343,
        376,
        394,
        399,
        445,
        452,
        459,
        464,
        528,
        544,
        551,
        556,
        568,
        669,
        689,
        713,
        738,
        748,
        763,
        788,
        844,
        867,
        886,
        904,
        972,
        993
      ],
      [
        -991,
        -976,
        -937,
        -917,
        -904,
        -885,
        -837,
        -821,
        -740,
        -641,
        -628,
        -609,
        -602,
        -599,
        -568,
        -560,
        -557,
        -529,
        -519,
        -453,
        -415,
        -384,
        -373,
        -321,
        -319,
        -220,
        -158,
        -96,
        -92,
        -90,
        -85,
        -67,
        -50,
        -36,
        -19,
        63,
        80,
        121,
        154,
        168,
        207,
        228,
        254,
        268,
        268,
        270,
        294,
        295,
        296,
        306,
        307,
        328,
        351,
        381,
        387,
        391,
        401,
        407,
        434,
        437,
        491,
        505,
        518,
        558,
        588,
        593,
        607,
        613,
        619,
        629,
        676,
        678,
        718,
        730,
        753,
        759,
        798,
        802,
        834,
        879,
        881,
        896,
        915,
        937,
        946,
        949,
        986
      ],
      [
        -987,
        -950,
        -949,
        -942,
        -941,
        -935,
        -908,
        -874,
        -855,
        -846,
        -823,
        -817,
        -796,
        -738,
        -733,
        -730,
        -685,
        -578,
        -575,
        -575,
        -544,
        -542,
        -469,
        -441,
        -420,
        -415,
        -410,
        -376,
        -371,
        -363,
        -359,
        -353,
        -337,
        -293,
        -265,
        -257,
        -254,
        -191,
        -167,
        -160,
        -155,
        -126,
        -120,
        -51,
        -36,
        -13,
        14,
        48,
        52,
        59,
        59,
        125,
        157,
        164,
        183,
        201,
        238,
        243,
        295,
        323,
        328,
        341,
        355,
        356,
        372,
        399,
        422,
        490,
        490,
        540,
        572,
        610,
        631,
        646,
        700,
        724,
        746,
        800,
        829,
        842,
        888,
        892,
        892,
        919,
        950,
        965,
        980,
        995
      ]
    ]
  ]
}