{
  "Summary": {
    "Name": "Apartment Hunting",
    "Category": "Arrays",
    "Difficulty": 4,
    "Available": true,
    "Metadata": {
      "date": "2019-09-01T00:00:00Z",
      "number": 464,
      "timeOne": 0,
      "timeTwo": 1568,
      "url": "https://player.vimeo.com/video/354828587"
    }
  },
  "Prompt": "",
  "Hints": "For every block, you want to go through every requirement, and for every requirement, you want to find the closest other block with that requirement (or rather, the smallest distance to another block with that requirement). Once you've done that for every requirement and for every block, you want to pick, for every block, the distance of the farthest requirement. You can do this with three nested \"for\" loops.\nIs there a way to optimize on the solution mentioned in Hint #1 (that uses three nested \"for\" loops) by pre-computing the smallest distances of every requirement from every block?\nFor every requirement, you should be able to pre-compute its smallest distances from every block by doing two simple passes though the array of blocks: one pass from left to right and one pass from right to left. Once you have these pre-computed values, you can iterate through all of the blocks and pick the biggest of all the pre-computed distances at that block.",
  "SpaceTime": "O(br) time | O(br) space - where b is the number of blocks and r is the number of requirements",
  "PromptHTML": "<p>\n  You're looking to move into a new apartment, and you're given a list of blocks\n  where each block contains an apartment that you could move into. In order to\n  pick your apartment, you want to optimize its location. You also have a list\n  of requirements: a list of buildings that are important to you. For instance,\n  you might value having a school and a gym near your apartment. The list of\n  blocks that you have contains information at every block about all of the\n  buildings that are present and absent at the block in question. For instance,\n  for every block, you might know whether a school, a pool, an office, and a gym\n  are present.\n</p>\n<p>\n  In order to optimize your life, you want to minimize the farthest distance\n  you'd have to walk from your apartment to reach any of your required\n  buildings.\n</p>\n<p>\n  Write a function that takes in a list of blocks and a list of your required\n  buildings and that returns the location (the index) of the block that's most\n  optimal for you.\n</p>\n<p>\n  If there are multiple most optimal blocks, your function can return the index\n  of any one of them.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">blocks</span> = [\n  {\n    \"gym\": false,\n    \"school\": true,\n    \"store\": false,\n  },\n  {\n    \"gym\": true,\n    \"school\": false,\n    \"store\": false,\n  },\n  {\n    \"gym\": true,\n    \"school\": true,\n    \"store\": false,\n  },\n  {\n    \"gym\": false,\n    \"school\": true,\n    \"store\": false,\n  },\n  {\n    \"gym\": false,\n    \"school\": true,\n    \"store\": true,\n  },\n]\n<span class=\"CodeEditor-promptParameter\">reqs</span> = [\"gym\", \"school\", \"store\"]\n</pre>\n<h3>Sample Output</h3>\n<pre>\n3 <span class=\"CodeEditor-promptComment\">// at index 3, the farthest you'd have to walk to reach a gym, a school, or a store is 1 block; at any other index, you'd have to walk farther</span>\n</pre>\n",
  "Notes": "",
  "IsLongOutput": false,
  "Visualization": {
    "inputType": null,
    "outputType": null
  },
  "CustomInputLanguages": [
    "javascript",
    "cpp",
    "python",
    "java",
    "csharp",
    "go",
    "swift",
    "typescript"
  ],
  "CustomInputVars": [
    {
      "Name": "blocks",
      "Example": [
        {
          "gym": false,
          "school": true,
          "store": false
        },
        {
          "gym": true,
          "school": false,
          "store": false
        },
        {
          "gym": true,
          "school": true,
          "store": false
        },
        {
          "gym": false,
          "school": true,
          "store": false
        },
        {
          "gym": false,
          "school": true,
          "store": true
        }
      ],
      "Schema": {
        "items": {
          "additionalProperties": {
            "type": "boolean"
          },
          "type": "object"
        },
        "type": "array"
      }
    },
    {
      "Name": "reqs",
      "Example": [
        "gym",
        "school",
        "store"
      ],
      "Schema": {
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    }
  ],
  "Resources": {
    "cpp": {
      "Language": "cpp",
      "StartingCode": "#include <vector>\n#include <unordered_map>\n\nusing namespace std;\n\nint apartmentHunting(vector<unordered_map<string, bool>> blocks,\n                     vector<string> reqs) {\n  // Write your code here;\n  return -1;\n}\n",
      "StartingTest": "#include <algorithm>\n\nclass ProgramTest : public TestSuite {\npublic:\n  void Run() {\n\n    RunTest(\"Test Case 1\", []() {\n      vector<unordered_map<string, bool>> blocks(5);\n\n      blocks[0].insert({\"gym\", false});\n      blocks[0].insert({\"school\", true});\n      blocks[0].insert({\"store\", false});\n\n      blocks[1].insert({\"gym\", true});\n      blocks[1].insert({\"school\", false});\n      blocks[1].insert({\"store\", false});\n\n      blocks[2].insert({\"gym\", true});\n      blocks[2].insert({\"school\", true});\n      blocks[2].insert({\"store\", false});\n\n      blocks[3].insert({\"gym\", false});\n      blocks[3].insert({\"school\", true});\n      blocks[3].insert({\"store\", false});\n\n      blocks[4].insert({\"gym\", false});\n      blocks[4].insert({\"school\", true});\n      blocks[4].insert({\"store\", true});\n\n      vector<string> reqs = {\"gym\", \"school\", \"store\"};\n      assert(apartmentHunting(blocks, reqs) == 3);\n    });\n\n    RunTest(\"Test Case 2\", []() {\n      vector<unordered_map<string, bool>> blocks(5);\n\n      blocks[0].insert({\"gym\", false});\n      blocks[0].insert({\"office\", true});\n      blocks[0].insert({\"school\", true});\n      blocks[0].insert({\"store\", false});\n\n      blocks[1].insert({\"gym\", true});\n      blocks[1].insert({\"office\", false});\n      blocks[1].insert({\"school\", false});\n      blocks[1].insert({\"store\", false});\n\n      blocks[2].insert({\"gym\", true});\n      blocks[2].insert({\"office\", false});\n      blocks[2].insert({\"school\", true});\n      blocks[2].insert({\"store\", false});\n\n      blocks[3].insert({\"gym\", false});\n      blocks[3].insert({\"office\", false});\n      blocks[3].insert({\"school\", true});\n      blocks[3].insert({\"store\", false});\n\n      blocks[4].insert({\"gym\", false});\n      blocks[4].insert({\"office\", false});\n      blocks[4].insert({\"school\", true});\n      blocks[4].insert({\"store\", true});\n\n      vector<string> reqs = {\"gym\", \"office\", \"school\", \"store\"};\n      assert(apartmentHunting(blocks, reqs) == 2);\n    });\n\n    RunTest(\"Test Case 3\", []() {\n      vector<unordered_map<string, bool>> blocks(6);\n\n      blocks[0].insert({\"gym\", false});\n      blocks[0].insert({\"office\", true});\n      blocks[0].insert({\"school\", true});\n      blocks[0].insert({\"store\", false});\n\n      blocks[1].insert({\"gym\", true});\n      blocks[1].insert({\"office\", false});\n      blocks[1].insert({\"school\", false});\n      blocks[1].insert({\"store\", false});\n\n      blocks[2].insert({\"gym\", true});\n      blocks[2].insert({\"office\", false});\n      blocks[2].insert({\"school\", true});\n      blocks[2].insert({\"store\", false});\n\n      blocks[3].insert({\"gym\", false});\n      blocks[3].insert({\"office\", false});\n      blocks[3].insert({\"school\", true});\n      blocks[3].insert({\"store\", false});\n\n      blocks[4].insert({\"gym\", false});\n      blocks[4].insert({\"office\", false});\n      blocks[4].insert({\"school\", true});\n      blocks[4].insert({\"store\", false});\n\n      blocks[5].insert({\"gym\", false});\n      blocks[5].insert({\"office\", false});\n      blocks[5].insert({\"school\", true});\n      blocks[5].insert({\"store\", true});\n\n      vector<string> reqs = {\"gym\", \"office\", \"school\", \"store\"};\n      vector<int> solutions = {2, 3};\n      assert(find(solutions.begin(), solutions.end(),\n                  apartmentHunting(blocks, reqs)) != solutions.end());\n    });\n\n    RunTest(\"Test Case 4\", []() {\n      vector<unordered_map<string, bool>> blocks(6);\n\n      blocks[0].insert({\"foo\", true});\n      blocks[0].insert({\"gym\", false});\n      blocks[0].insert({\"kappa\", false});\n      blocks[0].insert({\"office\", true});\n      blocks[0].insert({\"school\", true});\n      blocks[0].insert({\"store\", false});\n\n      blocks[1].insert({\"foo\", true});\n      blocks[1].insert({\"gym\", true});\n      blocks[1].insert({\"kappa\", false});\n      blocks[1].insert({\"office\", false});\n      blocks[1].insert({\"school\", false});\n      blocks[1].insert({\"store\", false});\n\n      blocks[2].insert({\"foo\", true});\n      blocks[2].insert({\"gym\", true});\n      blocks[2].insert({\"kappa\", false});\n      blocks[2].insert({\"office\", false});\n      blocks[2].insert({\"school\", true});\n      blocks[2].insert({\"store\", false});\n\n      blocks[3].insert({\"foo\", true});\n      blocks[3].insert({\"gym\", false});\n      blocks[3].insert({\"kappa\", false});\n      blocks[3].insert({\"office\", false});\n      blocks[3].insert({\"school\", true});\n      blocks[3].insert({\"store\", false});\n\n      blocks[4].insert({\"foo\", true});\n      blocks[4].insert({\"gym\", true});\n      blocks[4].insert({\"kappa\", false});\n      blocks[4].insert({\"office\", false});\n      blocks[4].insert({\"school\", true});\n      blocks[4].insert({\"store\", false});\n\n      blocks[5].insert({\"foo\", true});\n      blocks[5].insert({\"gym\", false});\n      blocks[5].insert({\"kappa\", false});\n      blocks[5].insert({\"office\", false});\n      blocks[5].insert({\"school\", true});\n      blocks[5].insert({\"store\", true});\n\n      vector<string> reqs = {\"gym\", \"school\", \"store\"};\n      vector<int> solutions = {4, 5};\n      assert(find(solutions.begin(), solutions.end(),\n                  apartmentHunting(blocks, reqs)) != solutions.end());\n    });\n\n    RunTest(\"Test Case 5\", []() {\n      vector<unordered_map<string, bool>> blocks(10);\n\n      blocks[0].insert({\"gym\", true});\n      blocks[0].insert({\"school\", true});\n      blocks[0].insert({\"store\", false});\n\n      blocks[1].insert({\"gym\", false});\n      blocks[1].insert({\"school\", false});\n      blocks[1].insert({\"store\", false});\n\n      blocks[2].insert({\"gym\", false});\n      blocks[2].insert({\"school\", true});\n      blocks[2].insert({\"store\", false});\n\n      blocks[3].insert({\"gym\", false});\n      blocks[3].insert({\"school\", false});\n      blocks[3].insert({\"store\", false});\n\n      blocks[4].insert({\"gym\", false});\n      blocks[4].insert({\"school\", false});\n      blocks[4].insert({\"store\", true});\n\n      blocks[5].insert({\"gym\", true});\n      blocks[5].insert({\"school\", false});\n      blocks[5].insert({\"store\", false});\n\n      blocks[6].insert({\"gym\", false});\n      blocks[6].insert({\"school\", false});\n      blocks[6].insert({\"store\", false});\n\n      blocks[7].insert({\"gym\", false});\n      blocks[7].insert({\"school\", false});\n      blocks[7].insert({\"store\", false});\n\n      blocks[8].insert({\"gym\", false});\n      blocks[8].insert({\"school\", false});\n      blocks[8].insert({\"store\", false});\n\n      blocks[9].insert({\"gym\", false});\n      blocks[9].insert({\"school\", true});\n      blocks[9].insert({\"store\", false});\n\n      vector<string> reqs = {\"gym\", \"school\", \"store\"};\n      vector<int> solutions = {2, 3, 4};\n      assert(find(solutions.begin(), solutions.end(),\n                  apartmentHunting(blocks, reqs)) != solutions.end());\n    });\n\n    RunTest(\"Test Case 6\", []() {\n      vector<unordered_map<string, bool>> blocks(11);\n\n      blocks[0].insert({\"gym\", true});\n      blocks[0].insert({\"pool\", false});\n      blocks[0].insert({\"school\", true});\n      blocks[0].insert({\"store\", false});\n\n      blocks[1].insert({\"gym\", false});\n      blocks[1].insert({\"pool\", false});\n      blocks[1].insert({\"school\", false});\n      blocks[1].insert({\"store\", false});\n\n      blocks[2].insert({\"gym\", false});\n      blocks[2].insert({\"pool\", false});\n      blocks[2].insert({\"school\", true});\n      blocks[2].insert({\"store\", false});\n\n      blocks[3].insert({\"gym\", false});\n      blocks[3].insert({\"pool\", false});\n      blocks[3].insert({\"school\", false});\n      blocks[3].insert({\"store\", false});\n\n      blocks[4].insert({\"gym\", false});\n      blocks[4].insert({\"pool\", false});\n      blocks[4].insert({\"school\", false});\n      blocks[4].insert({\"store\", true});\n\n      blocks[5].insert({\"gym\", true});\n      blocks[5].insert({\"pool\", false});\n      blocks[5].insert({\"school\", false});\n      blocks[5].insert({\"store\", false});\n\n      blocks[6].insert({\"gym\", false});\n      blocks[6].insert({\"pool\", false});\n      blocks[6].insert({\"school\", false});\n      blocks[6].insert({\"store\", false});\n\n      blocks[7].insert({\"gym\", false});\n      blocks[7].insert({\"pool\", false});\n      blocks[7].insert({\"school\", false});\n      blocks[7].insert({\"store\", false});\n\n      blocks[8].insert({\"gym\", false});\n      blocks[8].insert({\"pool\", false});\n      blocks[8].insert({\"school\", false});\n      blocks[8].insert({\"store\", false});\n\n      blocks[9].insert({\"gym\", false});\n      blocks[9].insert({\"pool\", false});\n      blocks[9].insert({\"school\", true});\n      blocks[9].insert({\"store\", false});\n\n      blocks[10].insert({\"gym\", false});\n      blocks[10].insert({\"pool\", true});\n      blocks[10].insert({\"school\", false});\n      blocks[10].insert({\"store\", false});\n\n      vector<string> reqs = {\"gym\", \"pool\", \"school\", \"store\"};\n      assert(apartmentHunting(blocks, reqs) == 7);\n    });\n\n    RunTest(\"Test Case 7\", []() {\n      vector<unordered_map<string, bool>> blocks(11);\n\n      blocks[0].insert({\"gym\", true});\n      blocks[0].insert({\"office\", false});\n      blocks[0].insert({\"pool\", false});\n      blocks[0].insert({\"school\", true});\n      blocks[0].insert({\"store\", false});\n\n      blocks[1].insert({\"gym\", false});\n      blocks[1].insert({\"office\", false});\n      blocks[1].insert({\"pool\", false});\n      blocks[1].insert({\"school\", false});\n      blocks[1].insert({\"store\", false});\n\n      blocks[2].insert({\"gym\", false});\n      blocks[2].insert({\"office\", true});\n      blocks[2].insert({\"pool\", false});\n      blocks[2].insert({\"school\", true});\n      blocks[2].insert({\"store\", false});\n\n      blocks[3].insert({\"gym\", false});\n      blocks[3].insert({\"office\", true});\n      blocks[3].insert({\"pool\", false});\n      blocks[3].insert({\"school\", false});\n      blocks[3].insert({\"store\", false});\n\n      blocks[4].insert({\"gym\", false});\n      blocks[4].insert({\"office\", false});\n      blocks[4].insert({\"pool\", false});\n      blocks[4].insert({\"school\", false});\n      blocks[4].insert({\"store\", true});\n\n      blocks[5].insert({\"gym\", true});\n      blocks[5].insert({\"office\", true});\n      blocks[5].insert({\"pool\", false});\n      blocks[5].insert({\"school\", false});\n      blocks[5].insert({\"store\", false});\n\n      blocks[6].insert({\"gym\", false});\n      blocks[6].insert({\"office\", false});\n      blocks[6].insert({\"pool\", true});\n      blocks[6].insert({\"school\", false});\n      blocks[6].insert({\"store\", false});\n\n      blocks[7].insert({\"gym\", false});\n      blocks[7].insert({\"office\", false});\n      blocks[7].insert({\"pool\", false});\n      blocks[7].insert({\"school\", false});\n      blocks[7].insert({\"store\", false});\n\n      blocks[8].insert({\"gym\", false});\n      blocks[8].insert({\"office\", false});\n      blocks[8].insert({\"pool\", false});\n      blocks[8].insert({\"school\", false});\n      blocks[8].insert({\"store\", false});\n\n      blocks[9].insert({\"gym\", false});\n      blocks[9].insert({\"office\", false});\n      blocks[9].insert({\"pool\", false});\n      blocks[9].insert({\"school\", true});\n      blocks[9].insert({\"store\", false});\n\n      blocks[10].insert({\"gym\", false});\n      blocks[10].insert({\"office\", false});\n      blocks[10].insert({\"pool\", true});\n      blocks[10].insert({\"school\", false});\n      blocks[10].insert({\"store\", false});\n\n      vector<string> reqs = {\"gym\", \"pool\", \"school\", \"store\"};\n      assert(apartmentHunting(blocks, reqs) == 4);\n    });\n  }\n};\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\n#include <algorithm>\n\nclass ProgramTest : public TestSuite {\npublic:\n  void Run() {\n\n    RunTest(\"Test Case 1\", []() {\n      vector<unordered_map<string, bool>> blocks(5);\n\n      blocks[0].insert({\"gym\", false});\n      blocks[0].insert({\"school\", true});\n      blocks[0].insert({\"store\", false});\n\n      blocks[1].insert({\"gym\", true});\n      blocks[1].insert({\"school\", false});\n      blocks[1].insert({\"store\", false});\n\n      blocks[2].insert({\"gym\", true});\n      blocks[2].insert({\"school\", true});\n      blocks[2].insert({\"store\", false});\n\n      blocks[3].insert({\"gym\", false});\n      blocks[3].insert({\"school\", true});\n      blocks[3].insert({\"store\", false});\n\n      blocks[4].insert({\"gym\", false});\n      blocks[4].insert({\"school\", true});\n      blocks[4].insert({\"store\", true});\n\n      vector<string> reqs = {\"gym\", \"school\", \"store\"};\n      assert(apartmentHunting(blocks, reqs) == 3);\n    });\n  }\n};\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\n#include <vector>\n#include <unordered_map>\n#include <climits>\n#include <algorithm>\n#include <cmath>\n\nusing namespace std;\n\nint getIdxAtMinValue(vector<int> array);\nint distanceBetween(int a, int b);\n\n// O(b^2*r) time | O(b) space - where b is the number of blocks and r is the\n// number of requirements\nint apartmentHunting(vector<unordered_map<string, bool>> blocks,\n                     vector<string> reqs) {\n  vector<int> maxDistancesAtBlocks(blocks.size(), INT_MIN);\n  for (int i = 0; i < blocks.size(); i++) {\n    for (string req : reqs) {\n      int closestReqDistance = INT_MAX;\n      for (int j = 0; j < blocks.size(); j++) {\n        if (blocks[j][req]) {\n          closestReqDistance = min(closestReqDistance, distanceBetween(i, j));\n        }\n      }\n      maxDistancesAtBlocks[i] =\n          max(maxDistancesAtBlocks[i], closestReqDistance);\n    }\n  }\n  return getIdxAtMinValue(maxDistancesAtBlocks);\n}\n\nint getIdxAtMinValue(vector<int> array) {\n  int idxAtMinValue = 0;\n  int minValue = INT_MAX;\n  for (int i = 0; i < array.size(); i++) {\n    int currentValue = array[i];\n    if (currentValue < minValue) {\n      minValue = currentValue;\n      idxAtMinValue = i;\n    }\n  }\n  return idxAtMinValue;\n}\n\nint distanceBetween(int a, int b) { return abs(a - b); }\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\n\n#include <vector>\n#include <unordered_map>\n#include <climits>\n#include <algorithm>\n#include <cmath>\n\nusing namespace std;\n\nvector<int> getMinDistances(vector<unordered_map<string, bool>> blocks,\n                            string req);\nvector<int> getMaxDistancesAtBlocks(vector<unordered_map<string, bool>> blocks,\n                                    vector<vector<int>> minDistancesFromBlocks);\nint getIdxAtMinValue(vector<int> array);\nint distanceBetween(int a, int b);\n\n// O(br) time | O(br) space - where b is the number of blocks and r is the\n// number of requirements\nint apartmentHunting(vector<unordered_map<string, bool>> blocks,\n                     vector<string> reqs) {\n  vector<vector<int>> minDistancesFromBlocks;\n  for (string req : reqs) {\n    minDistancesFromBlocks.push_back(getMinDistances(blocks, req));\n  }\n  vector<int> maxDistancesAtBlocks =\n      getMaxDistancesAtBlocks(blocks, minDistancesFromBlocks);\n  return getIdxAtMinValue(maxDistancesAtBlocks);\n}\n\nvector<int> getMinDistances(vector<unordered_map<string, bool>> blocks,\n                            string req) {\n  vector<int> minDistances(blocks.size());\n  int closestReqIdx = INT_MAX;\n  for (int i = 0; i < blocks.size(); i++) {\n    if (blocks[i][req])\n      closestReqIdx = i;\n    minDistances[i] = distanceBetween(i, closestReqIdx);\n  }\n  for (int i = blocks.size() - 1; i >= 0; i--) {\n    if (blocks[i][req])\n      closestReqIdx = i;\n    minDistances[i] = min(minDistances[i], distanceBetween(i, closestReqIdx));\n  }\n  return minDistances;\n}\n\nvector<int>\ngetMaxDistancesAtBlocks(vector<unordered_map<string, bool>> blocks,\n                        vector<vector<int>> minDistancesFromBlocks) {\n  vector<int> maxDistancesAtBlocks(blocks.size());\n  for (int i = 0; i < blocks.size(); i++) {\n    vector<int> minDistancesAtBlock;\n    for (vector<int> distances : minDistancesFromBlocks) {\n      minDistancesAtBlock.push_back(distances[i]);\n    }\n    maxDistancesAtBlocks[i] =\n        *max_element(minDistancesAtBlock.begin(), minDistancesAtBlock.end());\n  }\n  return maxDistancesAtBlocks;\n}\n\nint getIdxAtMinValue(vector<int> array) {\n  int idxAtMinValue = 0;\n  int minValue = INT_MAX;\n  for (int i = 0; i < array.size(); i++) {\n    int currentValue = array[i];\n    if (currentValue < minValue) {\n      minValue = currentValue;\n      idxAtMinValue = i;\n    }\n  }\n  return idxAtMinValue;\n}\n\nint distanceBetween(int a, int b) { return abs(a - b); }\n"
      ]
    },
    "csharp": {
      "Language": "csharp",
      "StartingCode": "using System.Collections.Generic;\n\npublic class Program {\n\tpublic static int ApartmentHunting(List<Dictionary<string, bool> > blocks, string[] reqs) {\n\t\t// Write your code here.\n\t\treturn -1;\n\t}\n}\n",
      "StartingTest": "using System.Collections.Generic;\n\npublic class ProgramTest {\n\t[Test]\n\tpublic void TestCase1() {\n\t\tList<Dictionary<string, bool> > blocks = new List<Dictionary<string, bool> >();\n\n\t\tblocks.Insert(0, new Dictionary<string, bool>());\n\t\tblocks[0][\"gym\"] = false;\n\t\tblocks[0][\"school\"] = true;\n\t\tblocks[0][\"store\"] = false;\n\n\t\tblocks.Insert(1, new Dictionary<string, bool>());\n\t\tblocks[1][\"gym\"] = true;\n\t\tblocks[1][\"school\"] = false;\n\t\tblocks[1][\"store\"] = false;\n\n\t\tblocks.Insert(2, new Dictionary<string, bool>());\n\t\tblocks[2][\"gym\"] = true;\n\t\tblocks[2][\"school\"] = true;\n\t\tblocks[2][\"store\"] = false;\n\n\t\tblocks.Insert(3, new Dictionary<string, bool>());\n\t\tblocks[3][\"gym\"] = false;\n\t\tblocks[3][\"school\"] = true;\n\t\tblocks[3][\"store\"] = false;\n\n\t\tblocks.Insert(4, new Dictionary<string, bool>());\n\t\tblocks[4][\"gym\"] = false;\n\t\tblocks[4][\"school\"] = true;\n\t\tblocks[4][\"store\"] = true;\n\n\t\tstring[] reqs = new string[] {\"gym\", \"school\", \"store\"};\n\t\tUtils.AssertTrue(Program.ApartmentHunting(blocks, reqs) == 3);\n\t}\n\n\t[Test]\n\tpublic void TestCase2() {\n\t\tList<Dictionary<string, bool> > blocks = new List<Dictionary<string, bool> >();\n\n\t\tblocks.Insert(0, new Dictionary<string, bool>());\n\t\tblocks[0][\"gym\"] = false;\n\t\tblocks[0][\"office\"] = true;\n\t\tblocks[0][\"school\"] = true;\n\t\tblocks[0][\"store\"] = false;\n\n\t\tblocks.Insert(1, new Dictionary<string, bool>());\n\t\tblocks[1][\"gym\"] = true;\n\t\tblocks[1][\"office\"] = false;\n\t\tblocks[1][\"school\"] = false;\n\t\tblocks[1][\"store\"] = false;\n\n\t\tblocks.Insert(2, new Dictionary<string, bool>());\n\t\tblocks[2][\"gym\"] = true;\n\t\tblocks[2][\"office\"] = false;\n\t\tblocks[2][\"school\"] = true;\n\t\tblocks[2][\"store\"] = false;\n\n\t\tblocks.Insert(3, new Dictionary<string, bool>());\n\t\tblocks[3][\"gym\"] = false;\n\t\tblocks[3][\"office\"] = false;\n\t\tblocks[3][\"school\"] = true;\n\t\tblocks[3][\"store\"] = false;\n\n\t\tblocks.Insert(4, new Dictionary<string, bool>());\n\t\tblocks[4][\"gym\"] = false;\n\t\tblocks[4][\"office\"] = false;\n\t\tblocks[4][\"school\"] = true;\n\t\tblocks[4][\"store\"] = true;\n\n\t\tstring[] reqs = new string[] {\"gym\", \"office\", \"school\", \"store\"};\n\t\tUtils.AssertTrue(Program.ApartmentHunting(blocks, reqs) == 2);\n\t}\n\n\t[Test]\n\tpublic void TestCase3() {\n\t\tList<Dictionary<string, bool> > blocks = new List<Dictionary<string, bool> >();\n\n\t\tblocks.Insert(0, new Dictionary<string, bool>());\n\t\tblocks[0][\"gym\"] = false;\n\t\tblocks[0][\"office\"] = true;\n\t\tblocks[0][\"school\"] = true;\n\t\tblocks[0][\"store\"] = false;\n\n\t\tblocks.Insert(1, new Dictionary<string, bool>());\n\t\tblocks[1][\"gym\"] = true;\n\t\tblocks[1][\"office\"] = false;\n\t\tblocks[1][\"school\"] = false;\n\t\tblocks[1][\"store\"] = false;\n\n\t\tblocks.Insert(2, new Dictionary<string, bool>());\n\t\tblocks[2][\"gym\"] = true;\n\t\tblocks[2][\"office\"] = false;\n\t\tblocks[2][\"school\"] = true;\n\t\tblocks[2][\"store\"] = false;\n\n\t\tblocks.Insert(3, new Dictionary<string, bool>());\n\t\tblocks[3][\"gym\"] = false;\n\t\tblocks[3][\"office\"] = false;\n\t\tblocks[3][\"school\"] = true;\n\t\tblocks[3][\"store\"] = false;\n\n\t\tblocks.Insert(4, new Dictionary<string, bool>());\n\t\tblocks[4][\"gym\"] = false;\n\t\tblocks[4][\"office\"] = false;\n\t\tblocks[4][\"school\"] = true;\n\t\tblocks[4][\"store\"] = false;\n\n\t\tblocks.Insert(5, new Dictionary<string, bool>());\n\t\tblocks[5][\"gym\"] = false;\n\t\tblocks[5][\"office\"] = false;\n\t\tblocks[5][\"school\"] = true;\n\t\tblocks[5][\"store\"] = true;\n\n\t\tstring[] reqs = new string[] {\"gym\", \"office\", \"school\", \"store\"};\n\t\tList<int> solutions = new List<int>(){\n\t\t\t2, 3\n\t\t};\n\t\tUtils.AssertTrue(solutions.Contains(Program.ApartmentHunting(blocks, reqs)));\n\t}\n\n\t[Test]\n\tpublic void TestCase4() {\n\t\tList<Dictionary<string, bool> > blocks = new List<Dictionary<string, bool> >();\n\n\t\tblocks.Insert(0, new Dictionary<string, bool>());\n\t\tblocks[0][\"foo\"] = true;\n\t\tblocks[0][\"gym\"] = false;\n\t\tblocks[0][\"kappa\"] = false;\n\t\tblocks[0][\"office\"] = true;\n\t\tblocks[0][\"school\"] = true;\n\t\tblocks[0][\"store\"] = false;\n\n\t\tblocks.Insert(1, new Dictionary<string, bool>());\n\t\tblocks[1][\"foo\"] = true;\n\t\tblocks[1][\"gym\"] = true;\n\t\tblocks[1][\"kappa\"] = false;\n\t\tblocks[1][\"office\"] = false;\n\t\tblocks[1][\"school\"] = false;\n\t\tblocks[1][\"store\"] = false;\n\n\t\tblocks.Insert(2, new Dictionary<string, bool>());\n\t\tblocks[2][\"foo\"] = true;\n\t\tblocks[2][\"gym\"] = true;\n\t\tblocks[2][\"kappa\"] = false;\n\t\tblocks[2][\"office\"] = false;\n\t\tblocks[2][\"school\"] = true;\n\t\tblocks[2][\"store\"] = false;\n\n\t\tblocks.Insert(3, new Dictionary<string, bool>());\n\t\tblocks[3][\"foo\"] = true;\n\t\tblocks[3][\"gym\"] = false;\n\t\tblocks[3][\"kappa\"] = false;\n\t\tblocks[3][\"office\"] = false;\n\t\tblocks[3][\"school\"] = true;\n\t\tblocks[3][\"store\"] = false;\n\n\t\tblocks.Insert(4, new Dictionary<string, bool>());\n\t\tblocks[4][\"foo\"] = true;\n\t\tblocks[4][\"gym\"] = true;\n\t\tblocks[4][\"kappa\"] = false;\n\t\tblocks[4][\"office\"] = false;\n\t\tblocks[4][\"school\"] = true;\n\t\tblocks[4][\"store\"] = false;\n\n\t\tblocks.Insert(5, new Dictionary<string, bool>());\n\t\tblocks[5][\"foo\"] = true;\n\t\tblocks[5][\"gym\"] = false;\n\t\tblocks[5][\"kappa\"] = false;\n\t\tblocks[5][\"office\"] = false;\n\t\tblocks[5][\"school\"] = true;\n\t\tblocks[5][\"store\"] = true;\n\n\t\tstring[] reqs = new string[] {\"gym\", \"school\", \"store\"};\n\t\tList<int> solutions = new List<int>(){\n\t\t\t4, 5\n\t\t};\n\t\tUtils.AssertTrue(solutions.Contains(Program.ApartmentHunting(blocks, reqs)));\n\t}\n\n\t[Test]\n\tpublic void TestCase5() {\n\t\tList<Dictionary<string, bool> > blocks = new List<Dictionary<string, bool> >();\n\n\t\tblocks.Insert(0, new Dictionary<string, bool>());\n\t\tblocks[0][\"gym\"] = true;\n\t\tblocks[0][\"school\"] = true;\n\t\tblocks[0][\"store\"] = false;\n\n\t\tblocks.Insert(1, new Dictionary<string, bool>());\n\t\tblocks[1][\"gym\"] = false;\n\t\tblocks[1][\"school\"] = false;\n\t\tblocks[1][\"store\"] = false;\n\n\t\tblocks.Insert(2, new Dictionary<string, bool>());\n\t\tblocks[2][\"gym\"] = false;\n\t\tblocks[2][\"school\"] = true;\n\t\tblocks[2][\"store\"] = false;\n\n\t\tblocks.Insert(3, new Dictionary<string, bool>());\n\t\tblocks[3][\"gym\"] = false;\n\t\tblocks[3][\"school\"] = false;\n\t\tblocks[3][\"store\"] = false;\n\n\t\tblocks.Insert(4, new Dictionary<string, bool>());\n\t\tblocks[4][\"gym\"] = false;\n\t\tblocks[4][\"school\"] = false;\n\t\tblocks[4][\"store\"] = true;\n\n\t\tblocks.Insert(5, new Dictionary<string, bool>());\n\t\tblocks[5][\"gym\"] = true;\n\t\tblocks[5][\"school\"] = false;\n\t\tblocks[5][\"store\"] = false;\n\n\t\tblocks.Insert(6, new Dictionary<string, bool>());\n\t\tblocks[6][\"gym\"] = false;\n\t\tblocks[6][\"school\"] = false;\n\t\tblocks[6][\"store\"] = false;\n\n\t\tblocks.Insert(7, new Dictionary<string, bool>());\n\t\tblocks[7][\"gym\"] = false;\n\t\tblocks[7][\"school\"] = false;\n\t\tblocks[7][\"store\"] = false;\n\n\t\tblocks.Insert(8, new Dictionary<string, bool>());\n\t\tblocks[8][\"gym\"] = false;\n\t\tblocks[8][\"school\"] = false;\n\t\tblocks[8][\"store\"] = false;\n\n\t\tblocks.Insert(9, new Dictionary<string, bool>());\n\t\tblocks[9][\"gym\"] = false;\n\t\tblocks[9][\"school\"] = true;\n\t\tblocks[9][\"store\"] = false;\n\n\t\tstring[] reqs = new string[] {\"gym\", \"school\", \"store\"};\n\t\tList<int> solutions = new List<int>(){\n\t\t\t2, 3, 4\n\t\t};\n\t\tUtils.AssertTrue(solutions.Contains(Program.ApartmentHunting(blocks, reqs)));\n\t}\n\n\t[Test]\n\tpublic void TestCase6() {\n\t\tList<Dictionary<string, bool> > blocks = new List<Dictionary<string, bool> >();\n\n\t\tblocks.Insert(0, new Dictionary<string, bool>());\n\t\tblocks[0][\"gym\"] = true;\n\t\tblocks[0][\"pool\"] = false;\n\t\tblocks[0][\"school\"] = true;\n\t\tblocks[0][\"store\"] = false;\n\n\t\tblocks.Insert(1, new Dictionary<string, bool>());\n\t\tblocks[1][\"gym\"] = false;\n\t\tblocks[1][\"pool\"] = false;\n\t\tblocks[1][\"school\"] = false;\n\t\tblocks[1][\"store\"] = false;\n\n\t\tblocks.Insert(2, new Dictionary<string, bool>());\n\t\tblocks[2][\"gym\"] = false;\n\t\tblocks[2][\"pool\"] = false;\n\t\tblocks[2][\"school\"] = true;\n\t\tblocks[2][\"store\"] = false;\n\n\t\tblocks.Insert(3, new Dictionary<string, bool>());\n\t\tblocks[3][\"gym\"] = false;\n\t\tblocks[3][\"pool\"] = false;\n\t\tblocks[3][\"school\"] = false;\n\t\tblocks[3][\"store\"] = false;\n\n\t\tblocks.Insert(4, new Dictionary<string, bool>());\n\t\tblocks[4][\"gym\"] = false;\n\t\tblocks[4][\"pool\"] = false;\n\t\tblocks[4][\"school\"] = false;\n\t\tblocks[4][\"store\"] = true;\n\n\t\tblocks.Insert(5, new Dictionary<string, bool>());\n\t\tblocks[5][\"gym\"] = true;\n\t\tblocks[5][\"pool\"] = false;\n\t\tblocks[5][\"school\"] = false;\n\t\tblocks[5][\"store\"] = false;\n\n\t\tblocks.Insert(6, new Dictionary<string, bool>());\n\t\tblocks[6][\"gym\"] = false;\n\t\tblocks[6][\"pool\"] = false;\n\t\tblocks[6][\"school\"] = false;\n\t\tblocks[6][\"store\"] = false;\n\n\t\tblocks.Insert(7, new Dictionary<string, bool>());\n\t\tblocks[7][\"gym\"] = false;\n\t\tblocks[7][\"pool\"] = false;\n\t\tblocks[7][\"school\"] = false;\n\t\tblocks[7][\"store\"] = false;\n\n\t\tblocks.Insert(8, new Dictionary<string, bool>());\n\t\tblocks[8][\"gym\"] = false;\n\t\tblocks[8][\"pool\"] = false;\n\t\tblocks[8][\"school\"] = false;\n\t\tblocks[8][\"store\"] = false;\n\n\t\tblocks.Insert(9, new Dictionary<string, bool>());\n\t\tblocks[9][\"gym\"] = false;\n\t\tblocks[9][\"pool\"] = false;\n\t\tblocks[9][\"school\"] = true;\n\t\tblocks[9][\"store\"] = false;\n\n\t\tblocks.Insert(10, new Dictionary<string, bool>());\n\t\tblocks[10][\"gym\"] = false;\n\t\tblocks[10][\"pool\"] = true;\n\t\tblocks[10][\"school\"] = false;\n\t\tblocks[10][\"store\"] = false;\n\n\t\tstring[] reqs = new string[] {\"gym\", \"pool\", \"school\", \"store\"};\n\t\tUtils.AssertTrue(Program.ApartmentHunting(blocks, reqs) == 7);\n\t}\n\n\t[Test]\n\tpublic void TestCase7() {\n\t\tList<Dictionary<string, bool> > blocks = new List<Dictionary<string, bool> >();\n\n\t\tblocks.Insert(0, new Dictionary<string, bool>());\n\t\tblocks[0][\"gym\"] = true;\n\t\tblocks[0][\"office\"] = false;\n\t\tblocks[0][\"pool\"] = false;\n\t\tblocks[0][\"school\"] = true;\n\t\tblocks[0][\"store\"] = false;\n\n\t\tblocks.Insert(1, new Dictionary<string, bool>());\n\t\tblocks[1][\"gym\"] = false;\n\t\tblocks[1][\"office\"] = false;\n\t\tblocks[1][\"pool\"] = false;\n\t\tblocks[1][\"school\"] = false;\n\t\tblocks[1][\"store\"] = false;\n\n\t\tblocks.Insert(2, new Dictionary<string, bool>());\n\t\tblocks[2][\"gym\"] = false;\n\t\tblocks[2][\"office\"] = true;\n\t\tblocks[2][\"pool\"] = false;\n\t\tblocks[2][\"school\"] = true;\n\t\tblocks[2][\"store\"] = false;\n\n\t\tblocks.Insert(3, new Dictionary<string, bool>());\n\t\tblocks[3][\"gym\"] = false;\n\t\tblocks[3][\"office\"] = true;\n\t\tblocks[3][\"pool\"] = false;\n\t\tblocks[3][\"school\"] = false;\n\t\tblocks[3][\"store\"] = false;\n\n\t\tblocks.Insert(4, new Dictionary<string, bool>());\n\t\tblocks[4][\"gym\"] = false;\n\t\tblocks[4][\"office\"] = false;\n\t\tblocks[4][\"pool\"] = false;\n\t\tblocks[4][\"school\"] = false;\n\t\tblocks[4][\"store\"] = true;\n\n\t\tblocks.Insert(5, new Dictionary<string, bool>());\n\t\tblocks[5][\"gym\"] = true;\n\t\tblocks[5][\"office\"] = true;\n\t\tblocks[5][\"pool\"] = false;\n\t\tblocks[5][\"school\"] = false;\n\t\tblocks[5][\"store\"] = false;\n\n\t\tblocks.Insert(6, new Dictionary<string, bool>());\n\t\tblocks[6][\"gym\"] = false;\n\t\tblocks[6][\"office\"] = false;\n\t\tblocks[6][\"pool\"] = true;\n\t\tblocks[6][\"school\"] = false;\n\t\tblocks[6][\"store\"] = false;\n\n\t\tblocks.Insert(7, new Dictionary<string, bool>());\n\t\tblocks[7][\"gym\"] = false;\n\t\tblocks[7][\"office\"] = false;\n\t\tblocks[7][\"pool\"] = false;\n\t\tblocks[7][\"school\"] = false;\n\t\tblocks[7][\"store\"] = false;\n\n\t\tblocks.Insert(8, new Dictionary<string, bool>());\n\t\tblocks[8][\"gym\"] = false;\n\t\tblocks[8][\"office\"] = false;\n\t\tblocks[8][\"pool\"] = false;\n\t\tblocks[8][\"school\"] = false;\n\t\tblocks[8][\"store\"] = false;\n\n\t\tblocks.Insert(9, new Dictionary<string, bool>());\n\t\tblocks[9][\"gym\"] = false;\n\t\tblocks[9][\"office\"] = false;\n\t\tblocks[9][\"pool\"] = false;\n\t\tblocks[9][\"school\"] = true;\n\t\tblocks[9][\"store\"] = false;\n\n\t\tblocks.Insert(10, new Dictionary<string, bool>());\n\t\tblocks[10][\"gym\"] = false;\n\t\tblocks[10][\"office\"] = false;\n\t\tblocks[10][\"pool\"] = true;\n\t\tblocks[10][\"school\"] = false;\n\t\tblocks[10][\"store\"] = false;\n\n\t\tstring[] reqs = new string[] {\"gym\", \"pool\", \"school\", \"store\"};\n\t\tUtils.AssertTrue(Program.ApartmentHunting(blocks, reqs) == 4);\n\t}\n}\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nusing System.Collections.Generic;\n\npublic class ProgramTest {\n\t[Test]\n\tpublic void TestCase1() {\n\t\tList<Dictionary<string, bool> > blocks = new List<Dictionary<string, bool> >();\n\n\t\tblocks.Insert(0, new Dictionary<string, bool>());\n\t\tblocks[0][\"gym\"] = false;\n\t\tblocks[0][\"school\"] = true;\n\t\tblocks[0][\"store\"] = false;\n\n\t\tblocks.Insert(1, new Dictionary<string, bool>());\n\t\tblocks[1][\"gym\"] = true;\n\t\tblocks[1][\"school\"] = false;\n\t\tblocks[1][\"store\"] = false;\n\n\t\tblocks.Insert(2, new Dictionary<string, bool>());\n\t\tblocks[2][\"gym\"] = true;\n\t\tblocks[2][\"school\"] = true;\n\t\tblocks[2][\"store\"] = false;\n\n\t\tblocks.Insert(3, new Dictionary<string, bool>());\n\t\tblocks[3][\"gym\"] = false;\n\t\tblocks[3][\"school\"] = true;\n\t\tblocks[3][\"store\"] = false;\n\n\t\tblocks.Insert(4, new Dictionary<string, bool>());\n\t\tblocks[4][\"gym\"] = false;\n\t\tblocks[4][\"school\"] = true;\n\t\tblocks[4][\"store\"] = true;\n\n\t\tstring[] reqs = new string[] {\"gym\", \"school\", \"store\"};\n\t\tUtils.AssertTrue(Program.ApartmentHunting(blocks, reqs) == 3);\n\t}\n}\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nusing System;\nusing System.Collections.Generic;\n\npublic class Program {\n\t// O(b^2*r) time | O(b) space - where b is the number of blocks and r is the number of requirements\n\tpublic static int ApartmentHunting(List<Dictionary<string, bool> > blocks, string[] reqs) {\n\t\tint[] maxDistancesAtBlocks = new int[blocks.Count];\n\t\tArray.Fill(maxDistancesAtBlocks, Int32.MinValue);\n\n\t\tfor (int i = 0; i < blocks.Count; i++) {\n\t\t\tforeach (string req in reqs) {\n\t\t\t\tint closestReqDistance = Int32.MaxValue;\n\t\t\t\tfor (int j = 0; j < blocks.Count; j++) {\n\t\t\t\t\tif (blocks[j][req]) {\n\t\t\t\t\t\tclosestReqDistance = Math.Min(closestReqDistance, distanceBetween(\n\t\t\t\t\t\t\t    i,\n\t\t\t\t\t\t\t    j));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tmaxDistancesAtBlocks[i] = Math.Max(maxDistancesAtBlocks[i],\n\t\t\t\t    closestReqDistance);\n\t\t\t}\n\t\t}\n\t\treturn getIdxAtMinValue(maxDistancesAtBlocks);\n\t}\n\n\tpublic static int getIdxAtMinValue(int[] array) {\n\t\tint idxAtMinValue = 0;\n\t\tint minValue = Int32.MaxValue;\n\t\tfor (int i = 0; i < array.Length; i++) {\n\t\t\tint currentValue = array[i];\n\t\t\tif (currentValue < minValue) {\n\t\t\t\tminValue = currentValue;\n\t\t\t\tidxAtMinValue = i;\n\t\t\t}\n\t\t}\n\t\treturn idxAtMinValue;\n\t}\n\n\tpublic static int distanceBetween(int a, int b) {\n\t\treturn Math.Abs(a - b);\n\t}\n}\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nusing System;\nusing System.Collections.Generic;\n\n\npublic class Program {\n\t// O(br) time | O(br) space - where b is the number of blocks and r is the number of requirements\n\tpublic static int ApartmentHunting(List<Dictionary<string, bool> > blocks, string[] reqs) {\n\t\tint[][] minDistancesFromBlocks = new int[reqs.Length][];\n\t\tfor (int i = 0; i < reqs.Length; i++) {\n\t\t\tminDistancesFromBlocks[i] = getMinDistances(blocks, reqs[i]);\n\t\t}\n\t\tint[] maxDistancesAtBlocks =\n\t\t  getMaxDistancesAtBlocks(blocks, minDistancesFromBlocks);\n\t\treturn getIdxAtMinValue(maxDistancesAtBlocks);\n\t}\n\n\tpublic static int[] getMinDistances(List<Dictionary<string, bool> > blocks, string req) {\n\t\tint[] minDistances = new int[blocks.Count];\n\t\tint closestReqIdx = Int32.MaxValue;\n\t\tfor (int i = 0; i < blocks.Count; i++) {\n\t\t\tif (blocks[i][req]) closestReqIdx = i;\n\t\t\tminDistances[i] = distanceBetween(i, closestReqIdx);\n\t\t}\n\t\tfor (int i = blocks.Count - 1; i >= 0; i--) {\n\t\t\tif (blocks[i][req]) closestReqIdx = i;\n\t\t\tminDistances[i] = Math.Min(minDistances[i], distanceBetween(i,\n\t\t\t    closestReqIdx));\n\t\t}\n\t\treturn minDistances;\n\t}\n\n\tpublic static int[] getMaxDistancesAtBlocks(List<Dictionary<string, bool> > blocks,\n\t  int[][] minDistancesFromBlocks) {\n\t\tint[] maxDistancesAtBlocks = new int[blocks.Count];\n\t\tfor (int i = 0; i < blocks.Count; i++) {\n\t\t\tint[] minDistancesAtBlock = new int[minDistancesFromBlocks.Length];\n\t\t\tfor (int j = 0; j < minDistancesFromBlocks.Length; j++) {\n\t\t\t\tminDistancesAtBlock[j] = minDistancesFromBlocks[j][i];\n\t\t\t}\n\t\t\tmaxDistancesAtBlocks[i] = arrayMax(minDistancesAtBlock);\n\t\t}\n\t\treturn maxDistancesAtBlocks;\n\t}\n\n\tpublic static int getIdxAtMinValue(int[] array) {\n\t\tint idxAtMinValue = 0;\n\t\tint minValue = Int32.MaxValue;\n\t\tfor (int i = 0; i < array.Length; i++) {\n\t\t\tint currentValue = array[i];\n\t\t\tif (currentValue < minValue) {\n\t\t\t\tminValue = currentValue;\n\t\t\t\tidxAtMinValue = i;\n\t\t\t}\n\t\t}\n\t\treturn idxAtMinValue;\n\t}\n\n\tpublic static int distanceBetween(int a, int b) {\n\t\treturn Math.Abs(a - b);\n\t}\n\n\tpublic static int arrayMax(int[] array) {\n\t\tint max = array[0];\n\t\tforeach (int a in array) {\n\t\t\tif (a > max) {\n\t\t\t\tmax = a;\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n"
      ]
    },
    "go": {
      "Language": "go",
      "StartingCode": "package main\n\ntype Block map[string]bool\n\nfunc ApartmentHunting(blocks []Block, reqs []string) int {\n\t// Write your code here.\n\treturn -1\n}\n",
      "StartingTest": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tblocks := []Block{\n\t\t{\n\t\t\t\"gym\":    false,\n\t\t\t\"school\": true,\n\t\t\t\"store\":  false,\n\t\t},\n\t\t{\n\t\t\t\"gym\":    true,\n\t\t\t\"school\": false,\n\t\t\t\"store\":  false,\n\t\t},\n\t\t{\n\t\t\t\"gym\":    true,\n\t\t\t\"school\": true,\n\t\t\t\"store\":  false,\n\t\t},\n\t\t{\n\t\t\t\"gym\":    false,\n\t\t\t\"school\": true,\n\t\t\t\"store\":  false,\n\t\t},\n\t\t{\n\t\t\t\"gym\":    false,\n\t\t\t\"school\": true,\n\t\t\t\"store\":  true,\n\t\t},\n\t}\n\treqs := []string{\"gym\", \"school\", \"store\"}\n\toutput := ApartmentHunting(blocks, reqs)\n\trequire.Equal(t, output, 3)\n}\n\nfunc (s *TestSuite) TestCase2(t *TestCase) {\n\tblocks := []Block{\n\t\t{\n\t\t\t\"gym\":    false,\n\t\t\t\"office\": true,\n\t\t\t\"school\": true,\n\t\t\t\"store\":  false,\n\t\t},\n\t\t{\n\t\t\t\"gym\":    true,\n\t\t\t\"office\": false,\n\t\t\t\"school\": false,\n\t\t\t\"store\":  false,\n\t\t},\n\t\t{\n\t\t\t\"gym\":    true,\n\t\t\t\"office\": false,\n\t\t\t\"school\": true,\n\t\t\t\"store\":  false,\n\t\t},\n\t\t{\n\t\t\t\"gym\":    false,\n\t\t\t\"office\": false,\n\t\t\t\"school\": true,\n\t\t\t\"store\":  false,\n\t\t},\n\t\t{\n\t\t\t\"gym\":    false,\n\t\t\t\"office\": false,\n\t\t\t\"school\": true,\n\t\t\t\"store\":  true,\n\t\t},\n\t}\n\treqs := []string{\"gym\", \"office\", \"school\", \"store\"}\n\toutput := ApartmentHunting(blocks, reqs)\n\trequire.Equal(t, output, 2)\n}\n\nfunc (s *TestSuite) TestCase3(t *TestCase) {\n\tblocks := []Block{\n\t\t{\n\t\t\t\"gym\":    false,\n\t\t\t\"office\": true,\n\t\t\t\"school\": true,\n\t\t\t\"store\":  false,\n\t\t},\n\t\t{\n\t\t\t\"gym\":    true,\n\t\t\t\"office\": false,\n\t\t\t\"school\": false,\n\t\t\t\"store\":  false,\n\t\t},\n\t\t{\n\t\t\t\"gym\":    true,\n\t\t\t\"office\": false,\n\t\t\t\"school\": true,\n\t\t\t\"store\":  false,\n\t\t},\n\t\t{\n\t\t\t\"gym\":    false,\n\t\t\t\"office\": false,\n\t\t\t\"school\": true,\n\t\t\t\"store\":  false,\n\t\t},\n\t\t{\n\t\t\t\"gym\":    false,\n\t\t\t\"office\": false,\n\t\t\t\"school\": true,\n\t\t\t\"store\":  false,\n\t\t},\n\t\t{\n\t\t\t\"gym\":    false,\n\t\t\t\"office\": false,\n\t\t\t\"school\": true,\n\t\t\t\"store\":  true,\n\t\t},\n\t}\n\treqs := []string{\"gym\", \"school\", \"store\"}\n\toutput := ApartmentHunting(blocks, reqs)\n\trequire.True(t, output == 3 || output == 2)\n}\n\nfunc (s *TestSuite) TestCase4(t *TestCase) {\n\tblocks := []Block{\n\t\t{\n\t\t\t\"foo\":    true,\n\t\t\t\"gym\":    false,\n\t\t\t\"kappa\":  false,\n\t\t\t\"office\": true,\n\t\t\t\"school\": true,\n\t\t\t\"store\":  false,\n\t\t},\n\t\t{\n\t\t\t\"foo\":    true,\n\t\t\t\"gym\":    true,\n\t\t\t\"kappa\":  false,\n\t\t\t\"office\": false,\n\t\t\t\"school\": false,\n\t\t\t\"store\":  false,\n\t\t},\n\t\t{\n\t\t\t\"foo\":    true,\n\t\t\t\"gym\":    true,\n\t\t\t\"kappa\":  false,\n\t\t\t\"office\": false,\n\t\t\t\"school\": true,\n\t\t\t\"store\":  false,\n\t\t},\n\t\t{\n\t\t\t\"foo\":    true,\n\t\t\t\"gym\":    false,\n\t\t\t\"kappa\":  false,\n\t\t\t\"office\": false,\n\t\t\t\"school\": true,\n\t\t\t\"store\":  false,\n\t\t},\n\t\t{\n\t\t\t\"foo\":    true,\n\t\t\t\"gym\":    true,\n\t\t\t\"kappa\":  false,\n\t\t\t\"office\": false,\n\t\t\t\"school\": true,\n\t\t\t\"store\":  false,\n\t\t},\n\t\t{\n\t\t\t\"foo\":    true,\n\t\t\t\"gym\":    false,\n\t\t\t\"kappa\":  false,\n\t\t\t\"office\": false,\n\t\t\t\"school\": true,\n\t\t\t\"store\":  true,\n\t\t},\n\t}\n\treqs := []string{\"gym\", \"school\", \"store\"}\n\toutput := ApartmentHunting(blocks, reqs)\n\trequire.True(t, output == 4 || output == 3)\n}\n\nfunc (s *TestSuite) TestCase5(t *TestCase) {\n\tblocks := []Block{\n\t\t{\n\t\t\t\"gym\":    true,\n\t\t\t\"school\": true,\n\t\t\t\"store\":  false,\n\t\t},\n\t\t{\n\t\t\t\"gym\":    false,\n\t\t\t\"school\": false,\n\t\t\t\"store\":  false,\n\t\t},\n\t\t{\n\t\t\t\"gym\":    false,\n\t\t\t\"school\": true,\n\t\t\t\"store\":  false,\n\t\t},\n\t\t{\n\t\t\t\"gym\":    false,\n\t\t\t\"school\": false,\n\t\t\t\"store\":  false,\n\t\t},\n\t\t{\n\t\t\t\"gym\":    false,\n\t\t\t\"school\": false,\n\t\t\t\"store\":  true,\n\t\t},\n\t\t{\n\t\t\t\"gym\":    true,\n\t\t\t\"school\": false,\n\t\t\t\"store\":  false,\n\t\t},\n\t\t{\n\t\t\t\"gym\":    false,\n\t\t\t\"school\": false,\n\t\t\t\"store\":  false,\n\t\t},\n\t\t{\n\t\t\t\"gym\":    false,\n\t\t\t\"school\": false,\n\t\t\t\"store\":  false,\n\t\t},\n\t\t{\n\t\t\t\"gym\":    false,\n\t\t\t\"school\": false,\n\t\t\t\"store\":  false,\n\t\t},\n\t\t{\n\t\t\t\"gym\":    false,\n\t\t\t\"school\": true,\n\t\t\t\"store\":  false,\n\t\t},\n\t}\n\treqs := []string{\"gym\", \"school\", \"store\"}\n\toutput := ApartmentHunting(blocks, reqs)\n\trequire.True(t, output == 3 || output == 2 || output == 4)\n}\n\nfunc (s *TestSuite) TestCase6(t *TestCase) {\n\tblocks := []Block{\n\t\t{\n\t\t\t\"gym\":    true,\n\t\t\t\"pool\":   false,\n\t\t\t\"school\": true,\n\t\t\t\"store\":  false,\n\t\t},\n\t\t{\n\t\t\t\"gym\":    false,\n\t\t\t\"pool\":   false,\n\t\t\t\"school\": false,\n\t\t\t\"store\":  false,\n\t\t},\n\t\t{\n\t\t\t\"gym\":    false,\n\t\t\t\"pool\":   false,\n\t\t\t\"school\": true,\n\t\t\t\"store\":  false,\n\t\t},\n\t\t{\n\t\t\t\"gym\":    false,\n\t\t\t\"pool\":   false,\n\t\t\t\"school\": false,\n\t\t\t\"store\":  false,\n\t\t},\n\t\t{\n\t\t\t\"gym\":    false,\n\t\t\t\"pool\":   false,\n\t\t\t\"school\": false,\n\t\t\t\"store\":  true,\n\t\t},\n\t\t{\n\t\t\t\"gym\":    true,\n\t\t\t\"pool\":   false,\n\t\t\t\"school\": false,\n\t\t\t\"store\":  false,\n\t\t},\n\t\t{\n\t\t\t\"gym\":    false,\n\t\t\t\"pool\":   false,\n\t\t\t\"school\": false,\n\t\t\t\"store\":  false,\n\t\t},\n\t\t{\n\t\t\t\"gym\":    false,\n\t\t\t\"pool\":   false,\n\t\t\t\"school\": false,\n\t\t\t\"store\":  false,\n\t\t},\n\t\t{\n\t\t\t\"gym\":    false,\n\t\t\t\"pool\":   false,\n\t\t\t\"school\": false,\n\t\t\t\"store\":  false,\n\t\t},\n\t\t{\n\t\t\t\"gym\":    false,\n\t\t\t\"pool\":   false,\n\t\t\t\"school\": true,\n\t\t\t\"store\":  false,\n\t\t},\n\t\t{\n\t\t\t\"gym\":    false,\n\t\t\t\"pool\":   true,\n\t\t\t\"school\": false,\n\t\t\t\"store\":  false,\n\t\t},\n\t}\n\treqs := []string{\"gym\", \"pool\", \"school\", \"store\"}\n\toutput := ApartmentHunting(blocks, reqs)\n\trequire.Equal(t, output, 7)\n}\n\nfunc (s *TestSuite) TestCase7(t *TestCase) {\n\tblocks := []Block{\n\t\t{\n\t\t\t\"gym\":    true,\n\t\t\t\"office\": false,\n\t\t\t\"pool\":   false,\n\t\t\t\"school\": true,\n\t\t\t\"store\":  false,\n\t\t},\n\t\t{\n\t\t\t\"gym\":    false,\n\t\t\t\"office\": false,\n\t\t\t\"pool\":   false,\n\t\t\t\"school\": false,\n\t\t\t\"store\":  false,\n\t\t},\n\t\t{\n\t\t\t\"gym\":    false,\n\t\t\t\"office\": true,\n\t\t\t\"pool\":   false,\n\t\t\t\"school\": true,\n\t\t\t\"store\":  false,\n\t\t},\n\t\t{\n\t\t\t\"gym\":    false,\n\t\t\t\"office\": true,\n\t\t\t\"pool\":   false,\n\t\t\t\"school\": false,\n\t\t\t\"store\":  false,\n\t\t},\n\t\t{\n\t\t\t\"gym\":    false,\n\t\t\t\"office\": false,\n\t\t\t\"pool\":   false,\n\t\t\t\"school\": false,\n\t\t\t\"store\":  true,\n\t\t},\n\t\t{\n\t\t\t\"gym\":    true,\n\t\t\t\"office\": true,\n\t\t\t\"pool\":   false,\n\t\t\t\"school\": false,\n\t\t\t\"store\":  false,\n\t\t},\n\t\t{\n\t\t\t\"gym\":    false,\n\t\t\t\"office\": false,\n\t\t\t\"pool\":   true,\n\t\t\t\"school\": false,\n\t\t\t\"store\":  false,\n\t\t},\n\t\t{\n\t\t\t\"gym\":    false,\n\t\t\t\"office\": false,\n\t\t\t\"pool\":   false,\n\t\t\t\"school\": false,\n\t\t\t\"store\":  false,\n\t\t},\n\t\t{\n\t\t\t\"gym\":    false,\n\t\t\t\"office\": false,\n\t\t\t\"pool\":   false,\n\t\t\t\"school\": false,\n\t\t\t\"store\":  false,\n\t\t},\n\t\t{\n\t\t\t\"gym\":    false,\n\t\t\t\"office\": false,\n\t\t\t\"pool\":   false,\n\t\t\t\"school\": true,\n\t\t\t\"store\":  false,\n\t\t},\n\t\t{\n\t\t\t\"gym\":    false,\n\t\t\t\"office\": false,\n\t\t\t\"pool\":   true,\n\t\t\t\"school\": false,\n\t\t\t\"store\":  false,\n\t\t},\n\t}\n\treqs := []string{\"gym\", \"pool\", \"school\", \"store\"}\n\toutput := ApartmentHunting(blocks, reqs)\n\trequire.Equal(t, output, 4)\n}\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tblocks := []Block{\n\t\t{\n\t\t\t\"gym\":    false,\n\t\t\t\"school\": true,\n\t\t\t\"store\":  false,\n\t\t},\n\t\t{\n\t\t\t\"gym\":    true,\n\t\t\t\"school\": false,\n\t\t\t\"store\":  false,\n\t\t},\n\t\t{\n\t\t\t\"gym\":    true,\n\t\t\t\"school\": true,\n\t\t\t\"store\":  false,\n\t\t},\n\t\t{\n\t\t\t\"gym\":    false,\n\t\t\t\"school\": true,\n\t\t\t\"store\":  false,\n\t\t},\n\t\t{\n\t\t\t\"gym\":    false,\n\t\t\t\"school\": true,\n\t\t\t\"store\":  true,\n\t\t},\n\t}\n\treqs := []string{\"gym\", \"school\", \"store\"}\n\toutput := ApartmentHunting(blocks, reqs)\n\trequire.Equal(t, output, 3)\n}",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\npackage main\n\nimport \"math\"\n\ntype Block map[string]bool\n\n// O(b^2*r) time | O(b) space - where b is the number of blocks\n// and r is the number of requirements.\nfunc ApartmentHunting(blocks []Block, reqs []string) int {\n\tmaxDistancesAtBlocks := make([]int, len(blocks))\n\tfor i := range blocks {\n\t\tmaxDistancesAtBlocks[i] = -1\n\t\tfor _, req := range reqs {\n\t\t\tclosestReqDistance := math.MaxInt32\n\t\t\tfor j := range blocks {\n\t\t\t\tif blocks[j][req] {\n\t\t\t\t\tclosestReqDistance = min(closestReqDistance, distanceBetween(i, j))\n\t\t\t\t}\n\t\t\t}\n\t\t\tmaxDistancesAtBlocks[i] = max(maxDistancesAtBlocks[i], closestReqDistance)\n\t\t}\n\t}\n\n\tvar optimalBlockIdx int\n\tsmallestMaxDistance := math.MaxInt32\n\tfor i, currentDistance := range maxDistancesAtBlocks {\n\t\tif currentDistance < smallestMaxDistance {\n\t\t\tsmallestMaxDistance = currentDistance\n\t\t\toptimalBlockIdx = i\n\t\t}\n\t}\n\treturn optimalBlockIdx\n}\n\nfunc distanceBetween(a, b int) int {\n\tif a > b {\n\t\treturn a - b\n\t}\n\treturn b - a\n}\n\nfunc min(a, b int) int {\n\tif a < b {\n\t\treturn a\n\t}\n\treturn b\n}\n\nfunc max(a, b int) int {\n\tif a > b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\npackage main\n\nimport \"math\"\n\ntype Block map[string]bool\n\n// O(br) time | O(br) space - where b is the number of blocks\n// and r is the number of requirements.\nfunc ApartmentHunting(blocks []Block, reqs []string) int {\n\tminDistancesFromBlocks := [][]int{}\n\tfor _, req := range reqs {\n\t\tminDistancesFromBlocks = append(minDistancesFromBlocks,\n\t\t\tgetMinDistances(blocks, req))\n\t}\n\tmaxDistancesAtBlocks := getMaxDistancesAtBlocks(blocks, minDistancesFromBlocks)\n\n\tvar optimalBlockIdx int\n\tsmallestMaxDistance := math.MaxInt32\n\tfor i, currentDistance := range maxDistancesAtBlocks {\n\t\tif currentDistance < smallestMaxDistance {\n\t\t\tsmallestMaxDistance = currentDistance\n\t\t\toptimalBlockIdx = i\n\t\t}\n\t}\n\treturn optimalBlockIdx\n}\n\nfunc getMinDistances(blocks []Block, req string) []int {\n\tminDistances := make([]int, len(blocks))\n\tclosestReq := math.MaxInt32\n\tfor i := range blocks {\n\t\tif val, found := blocks[i][req]; found && val {\n\t\t\tclosestReq = i\n\t\t}\n\t\tminDistances[i] = distanceBetween(i, closestReq)\n\t}\n\n\tfor i := len(blocks) - 1; i >= 0; i-- {\n\t\tif val, found := blocks[i][req]; found && val {\n\t\t\tclosestReq = i\n\t\t}\n\t\tminDistances[i] = min(minDistances[i], distanceBetween(i, closestReq))\n\t}\n\treturn minDistances\n}\n\nfunc getMaxDistancesAtBlocks(blocks []Block, minDistancesFromBlocks [][]int) []int {\n\tmaxDistancesAtBlocks := make([]int, len(blocks))\n\tfor i := range blocks {\n\t\tminDistancesAtBlock := []int{}\n\t\tfor _, distances := range minDistancesFromBlocks {\n\t\t\tminDistancesAtBlock = append(minDistancesAtBlock, distances[i])\n\t\t}\n\t\tmaxDistancesAtBlocks[i] = max(minDistancesAtBlock)\n\t}\n\treturn maxDistancesAtBlocks\n}\n\nfunc distanceBetween(a, b int) int {\n\tif a > b {\n\t\treturn a - b\n\t}\n\treturn b - a\n}\n\nfunc min(a, b int) int {\n\tif a < b {\n\t\treturn a\n\t}\n\treturn b\n}\n\nfunc max(array []int) int {\n\tif len(array) == 0 {\n\t\treturn 0\n\t}\n\n\tmax := array[0]\n\tfor i := 1; i < len(array); i++ {\n\t\tif array[i] > max {\n\t\t\tmax = array[i]\n\t\t}\n\t}\n\treturn max\n}\n"
      ]
    },
    "java": {
      "Language": "java",
      "StartingCode": "import java.util.*;\n\nclass Program {\n  public static int apartmentHunting(List<Map<String, Boolean>> blocks, String[] reqs) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "StartingTest": "import java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    List<Map<String, Boolean>> blocks = new ArrayList<Map<String, Boolean>>();\n\n    blocks.add(0, new HashMap<String, Boolean>());\n    blocks.get(0).put(\"gym\", false);\n    blocks.get(0).put(\"school\", true);\n    blocks.get(0).put(\"store\", false);\n\n    blocks.add(1, new HashMap<String, Boolean>());\n    blocks.get(1).put(\"gym\", true);\n    blocks.get(1).put(\"school\", false);\n    blocks.get(1).put(\"store\", false);\n\n    blocks.add(2, new HashMap<String, Boolean>());\n    blocks.get(2).put(\"gym\", true);\n    blocks.get(2).put(\"school\", true);\n    blocks.get(2).put(\"store\", false);\n\n    blocks.add(3, new HashMap<String, Boolean>());\n    blocks.get(3).put(\"gym\", false);\n    blocks.get(3).put(\"school\", true);\n    blocks.get(3).put(\"store\", false);\n\n    blocks.add(4, new HashMap<String, Boolean>());\n    blocks.get(4).put(\"gym\", false);\n    blocks.get(4).put(\"school\", true);\n    blocks.get(4).put(\"store\", true);\n\n    String[] reqs = new String[] {\"gym\", \"school\", \"store\"};\n    Utils.assertTrue(Program.apartmentHunting(blocks, reqs) == 3);\n  }\n\n  @Test\n  public void TestCase2() {\n    List<Map<String, Boolean>> blocks = new ArrayList<Map<String, Boolean>>();\n\n    blocks.add(0, new HashMap<String, Boolean>());\n    blocks.get(0).put(\"gym\", false);\n    blocks.get(0).put(\"office\", true);\n    blocks.get(0).put(\"school\", true);\n    blocks.get(0).put(\"store\", false);\n\n    blocks.add(1, new HashMap<String, Boolean>());\n    blocks.get(1).put(\"gym\", true);\n    blocks.get(1).put(\"office\", false);\n    blocks.get(1).put(\"school\", false);\n    blocks.get(1).put(\"store\", false);\n\n    blocks.add(2, new HashMap<String, Boolean>());\n    blocks.get(2).put(\"gym\", true);\n    blocks.get(2).put(\"office\", false);\n    blocks.get(2).put(\"school\", true);\n    blocks.get(2).put(\"store\", false);\n\n    blocks.add(3, new HashMap<String, Boolean>());\n    blocks.get(3).put(\"gym\", false);\n    blocks.get(3).put(\"office\", false);\n    blocks.get(3).put(\"school\", true);\n    blocks.get(3).put(\"store\", false);\n\n    blocks.add(4, new HashMap<String, Boolean>());\n    blocks.get(4).put(\"gym\", false);\n    blocks.get(4).put(\"office\", false);\n    blocks.get(4).put(\"school\", true);\n    blocks.get(4).put(\"store\", true);\n\n    String[] reqs = new String[] {\"gym\", \"office\", \"school\", \"store\"};\n    Utils.assertTrue(Program.apartmentHunting(blocks, reqs) == 2);\n  }\n\n  @Test\n  public void TestCase3() {\n    List<Map<String, Boolean>> blocks = new ArrayList<Map<String, Boolean>>();\n\n    blocks.add(0, new HashMap<String, Boolean>());\n    blocks.get(0).put(\"gym\", false);\n    blocks.get(0).put(\"office\", true);\n    blocks.get(0).put(\"school\", true);\n    blocks.get(0).put(\"store\", false);\n\n    blocks.add(1, new HashMap<String, Boolean>());\n    blocks.get(1).put(\"gym\", true);\n    blocks.get(1).put(\"office\", false);\n    blocks.get(1).put(\"school\", false);\n    blocks.get(1).put(\"store\", false);\n\n    blocks.add(2, new HashMap<String, Boolean>());\n    blocks.get(2).put(\"gym\", true);\n    blocks.get(2).put(\"office\", false);\n    blocks.get(2).put(\"school\", true);\n    blocks.get(2).put(\"store\", false);\n\n    blocks.add(3, new HashMap<String, Boolean>());\n    blocks.get(3).put(\"gym\", false);\n    blocks.get(3).put(\"office\", false);\n    blocks.get(3).put(\"school\", true);\n    blocks.get(3).put(\"store\", false);\n\n    blocks.add(4, new HashMap<String, Boolean>());\n    blocks.get(4).put(\"gym\", false);\n    blocks.get(4).put(\"office\", false);\n    blocks.get(4).put(\"school\", true);\n    blocks.get(4).put(\"store\", false);\n\n    blocks.add(5, new HashMap<String, Boolean>());\n    blocks.get(5).put(\"gym\", false);\n    blocks.get(5).put(\"office\", false);\n    blocks.get(5).put(\"school\", true);\n    blocks.get(5).put(\"store\", true);\n\n    String[] reqs = new String[] {\"gym\", \"office\", \"school\", \"store\"};\n    List<Integer> solutions = new ArrayList<Integer>(Arrays.asList(2, 3));\n    Utils.assertTrue(solutions.contains(Program.apartmentHunting(blocks, reqs)));\n  }\n\n  @Test\n  public void TestCase4() {\n    List<Map<String, Boolean>> blocks = new ArrayList<Map<String, Boolean>>();\n\n    blocks.add(0, new HashMap<String, Boolean>());\n    blocks.get(0).put(\"foo\", true);\n    blocks.get(0).put(\"gym\", false);\n    blocks.get(0).put(\"kappa\", false);\n    blocks.get(0).put(\"office\", true);\n    blocks.get(0).put(\"school\", true);\n    blocks.get(0).put(\"store\", false);\n\n    blocks.add(1, new HashMap<String, Boolean>());\n    blocks.get(1).put(\"foo\", true);\n    blocks.get(1).put(\"gym\", true);\n    blocks.get(1).put(\"kappa\", false);\n    blocks.get(1).put(\"office\", false);\n    blocks.get(1).put(\"school\", false);\n    blocks.get(1).put(\"store\", false);\n\n    blocks.add(2, new HashMap<String, Boolean>());\n    blocks.get(2).put(\"foo\", true);\n    blocks.get(2).put(\"gym\", true);\n    blocks.get(2).put(\"kappa\", false);\n    blocks.get(2).put(\"office\", false);\n    blocks.get(2).put(\"school\", true);\n    blocks.get(2).put(\"store\", false);\n\n    blocks.add(3, new HashMap<String, Boolean>());\n    blocks.get(3).put(\"foo\", true);\n    blocks.get(3).put(\"gym\", false);\n    blocks.get(3).put(\"kappa\", false);\n    blocks.get(3).put(\"office\", false);\n    blocks.get(3).put(\"school\", true);\n    blocks.get(3).put(\"store\", false);\n\n    blocks.add(4, new HashMap<String, Boolean>());\n    blocks.get(4).put(\"foo\", true);\n    blocks.get(4).put(\"gym\", true);\n    blocks.get(4).put(\"kappa\", false);\n    blocks.get(4).put(\"office\", false);\n    blocks.get(4).put(\"school\", true);\n    blocks.get(4).put(\"store\", false);\n\n    blocks.add(5, new HashMap<String, Boolean>());\n    blocks.get(5).put(\"foo\", true);\n    blocks.get(5).put(\"gym\", false);\n    blocks.get(5).put(\"kappa\", false);\n    blocks.get(5).put(\"office\", false);\n    blocks.get(5).put(\"school\", true);\n    blocks.get(5).put(\"store\", true);\n\n    String[] reqs = new String[] {\"gym\", \"school\", \"store\"};\n    List<Integer> solutions = new ArrayList<Integer>(Arrays.asList(4, 5));\n    Utils.assertTrue(solutions.contains(Program.apartmentHunting(blocks, reqs)));\n  }\n\n  @Test\n  public void TestCase5() {\n    List<Map<String, Boolean>> blocks = new ArrayList<Map<String, Boolean>>();\n\n    blocks.add(0, new HashMap<String, Boolean>());\n    blocks.get(0).put(\"gym\", true);\n    blocks.get(0).put(\"school\", true);\n    blocks.get(0).put(\"store\", false);\n\n    blocks.add(1, new HashMap<String, Boolean>());\n    blocks.get(1).put(\"gym\", false);\n    blocks.get(1).put(\"school\", false);\n    blocks.get(1).put(\"store\", false);\n\n    blocks.add(2, new HashMap<String, Boolean>());\n    blocks.get(2).put(\"gym\", false);\n    blocks.get(2).put(\"school\", true);\n    blocks.get(2).put(\"store\", false);\n\n    blocks.add(3, new HashMap<String, Boolean>());\n    blocks.get(3).put(\"gym\", false);\n    blocks.get(3).put(\"school\", false);\n    blocks.get(3).put(\"store\", false);\n\n    blocks.add(4, new HashMap<String, Boolean>());\n    blocks.get(4).put(\"gym\", false);\n    blocks.get(4).put(\"school\", false);\n    blocks.get(4).put(\"store\", true);\n\n    blocks.add(5, new HashMap<String, Boolean>());\n    blocks.get(5).put(\"gym\", true);\n    blocks.get(5).put(\"school\", false);\n    blocks.get(5).put(\"store\", false);\n\n    blocks.add(6, new HashMap<String, Boolean>());\n    blocks.get(6).put(\"gym\", false);\n    blocks.get(6).put(\"school\", false);\n    blocks.get(6).put(\"store\", false);\n\n    blocks.add(7, new HashMap<String, Boolean>());\n    blocks.get(7).put(\"gym\", false);\n    blocks.get(7).put(\"school\", false);\n    blocks.get(7).put(\"store\", false);\n\n    blocks.add(8, new HashMap<String, Boolean>());\n    blocks.get(8).put(\"gym\", false);\n    blocks.get(8).put(\"school\", false);\n    blocks.get(8).put(\"store\", false);\n\n    blocks.add(9, new HashMap<String, Boolean>());\n    blocks.get(9).put(\"gym\", false);\n    blocks.get(9).put(\"school\", true);\n    blocks.get(9).put(\"store\", false);\n\n    String[] reqs = new String[] {\"gym\", \"school\", \"store\"};\n    List<Integer> solutions = new ArrayList<Integer>(Arrays.asList(2, 3, 4));\n    Utils.assertTrue(solutions.contains(Program.apartmentHunting(blocks, reqs)));\n  }\n\n  @Test\n  public void TestCase6() {\n    List<Map<String, Boolean>> blocks = new ArrayList<Map<String, Boolean>>();\n\n    blocks.add(0, new HashMap<String, Boolean>());\n    blocks.get(0).put(\"gym\", true);\n    blocks.get(0).put(\"pool\", false);\n    blocks.get(0).put(\"school\", true);\n    blocks.get(0).put(\"store\", false);\n\n    blocks.add(1, new HashMap<String, Boolean>());\n    blocks.get(1).put(\"gym\", false);\n    blocks.get(1).put(\"pool\", false);\n    blocks.get(1).put(\"school\", false);\n    blocks.get(1).put(\"store\", false);\n\n    blocks.add(2, new HashMap<String, Boolean>());\n    blocks.get(2).put(\"gym\", false);\n    blocks.get(2).put(\"pool\", false);\n    blocks.get(2).put(\"school\", true);\n    blocks.get(2).put(\"store\", false);\n\n    blocks.add(3, new HashMap<String, Boolean>());\n    blocks.get(3).put(\"gym\", false);\n    blocks.get(3).put(\"pool\", false);\n    blocks.get(3).put(\"school\", false);\n    blocks.get(3).put(\"store\", false);\n\n    blocks.add(4, new HashMap<String, Boolean>());\n    blocks.get(4).put(\"gym\", false);\n    blocks.get(4).put(\"pool\", false);\n    blocks.get(4).put(\"school\", false);\n    blocks.get(4).put(\"store\", true);\n\n    blocks.add(5, new HashMap<String, Boolean>());\n    blocks.get(5).put(\"gym\", true);\n    blocks.get(5).put(\"pool\", false);\n    blocks.get(5).put(\"school\", false);\n    blocks.get(5).put(\"store\", false);\n\n    blocks.add(6, new HashMap<String, Boolean>());\n    blocks.get(6).put(\"gym\", false);\n    blocks.get(6).put(\"pool\", false);\n    blocks.get(6).put(\"school\", false);\n    blocks.get(6).put(\"store\", false);\n\n    blocks.add(7, new HashMap<String, Boolean>());\n    blocks.get(7).put(\"gym\", false);\n    blocks.get(7).put(\"pool\", false);\n    blocks.get(7).put(\"school\", false);\n    blocks.get(7).put(\"store\", false);\n\n    blocks.add(8, new HashMap<String, Boolean>());\n    blocks.get(8).put(\"gym\", false);\n    blocks.get(8).put(\"pool\", false);\n    blocks.get(8).put(\"school\", false);\n    blocks.get(8).put(\"store\", false);\n\n    blocks.add(9, new HashMap<String, Boolean>());\n    blocks.get(9).put(\"gym\", false);\n    blocks.get(9).put(\"pool\", false);\n    blocks.get(9).put(\"school\", true);\n    blocks.get(9).put(\"store\", false);\n\n    blocks.add(10, new HashMap<String, Boolean>());\n    blocks.get(10).put(\"gym\", false);\n    blocks.get(10).put(\"pool\", true);\n    blocks.get(10).put(\"school\", false);\n    blocks.get(10).put(\"store\", false);\n\n    String[] reqs = new String[] {\"gym\", \"pool\", \"school\", \"store\"};\n    Utils.assertTrue(Program.apartmentHunting(blocks, reqs) == 7);\n  }\n\n  @Test\n  public void TestCase7() {\n    List<Map<String, Boolean>> blocks = new ArrayList<Map<String, Boolean>>();\n\n    blocks.add(0, new HashMap<String, Boolean>());\n    blocks.get(0).put(\"gym\", true);\n    blocks.get(0).put(\"office\", false);\n    blocks.get(0).put(\"pool\", false);\n    blocks.get(0).put(\"school\", true);\n    blocks.get(0).put(\"store\", false);\n\n    blocks.add(1, new HashMap<String, Boolean>());\n    blocks.get(1).put(\"gym\", false);\n    blocks.get(1).put(\"office\", false);\n    blocks.get(1).put(\"pool\", false);\n    blocks.get(1).put(\"school\", false);\n    blocks.get(1).put(\"store\", false);\n\n    blocks.add(2, new HashMap<String, Boolean>());\n    blocks.get(2).put(\"gym\", false);\n    blocks.get(2).put(\"office\", true);\n    blocks.get(2).put(\"pool\", false);\n    blocks.get(2).put(\"school\", true);\n    blocks.get(2).put(\"store\", false);\n\n    blocks.add(3, new HashMap<String, Boolean>());\n    blocks.get(3).put(\"gym\", false);\n    blocks.get(3).put(\"office\", true);\n    blocks.get(3).put(\"pool\", false);\n    blocks.get(3).put(\"school\", false);\n    blocks.get(3).put(\"store\", false);\n\n    blocks.add(4, new HashMap<String, Boolean>());\n    blocks.get(4).put(\"gym\", false);\n    blocks.get(4).put(\"office\", false);\n    blocks.get(4).put(\"pool\", false);\n    blocks.get(4).put(\"school\", false);\n    blocks.get(4).put(\"store\", true);\n\n    blocks.add(5, new HashMap<String, Boolean>());\n    blocks.get(5).put(\"gym\", true);\n    blocks.get(5).put(\"office\", true);\n    blocks.get(5).put(\"pool\", false);\n    blocks.get(5).put(\"school\", false);\n    blocks.get(5).put(\"store\", false);\n\n    blocks.add(6, new HashMap<String, Boolean>());\n    blocks.get(6).put(\"gym\", false);\n    blocks.get(6).put(\"office\", false);\n    blocks.get(6).put(\"pool\", true);\n    blocks.get(6).put(\"school\", false);\n    blocks.get(6).put(\"store\", false);\n\n    blocks.add(7, new HashMap<String, Boolean>());\n    blocks.get(7).put(\"gym\", false);\n    blocks.get(7).put(\"office\", false);\n    blocks.get(7).put(\"pool\", false);\n    blocks.get(7).put(\"school\", false);\n    blocks.get(7).put(\"store\", false);\n\n    blocks.add(8, new HashMap<String, Boolean>());\n    blocks.get(8).put(\"gym\", false);\n    blocks.get(8).put(\"office\", false);\n    blocks.get(8).put(\"pool\", false);\n    blocks.get(8).put(\"school\", false);\n    blocks.get(8).put(\"store\", false);\n\n    blocks.add(9, new HashMap<String, Boolean>());\n    blocks.get(9).put(\"gym\", false);\n    blocks.get(9).put(\"office\", false);\n    blocks.get(9).put(\"pool\", false);\n    blocks.get(9).put(\"school\", true);\n    blocks.get(9).put(\"store\", false);\n\n    blocks.add(10, new HashMap<String, Boolean>());\n    blocks.get(10).put(\"gym\", false);\n    blocks.get(10).put(\"office\", false);\n    blocks.get(10).put(\"pool\", true);\n    blocks.get(10).put(\"school\", false);\n    blocks.get(10).put(\"store\", false);\n\n    String[] reqs = new String[] {\"gym\", \"pool\", \"school\", \"store\"};\n    Utils.assertTrue(Program.apartmentHunting(blocks, reqs) == 4);\n  }\n}\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    List<Map<String, Boolean>> blocks = new ArrayList<Map<String, Boolean>>();\n\n    blocks.add(0, new HashMap<String, Boolean>());\n    blocks.get(0).put(\"gym\", false);\n    blocks.get(0).put(\"school\", true);\n    blocks.get(0).put(\"store\", false);\n\n    blocks.add(1, new HashMap<String, Boolean>());\n    blocks.get(1).put(\"gym\", true);\n    blocks.get(1).put(\"school\", false);\n    blocks.get(1).put(\"store\", false);\n\n    blocks.add(2, new HashMap<String, Boolean>());\n    blocks.get(2).put(\"gym\", true);\n    blocks.get(2).put(\"school\", true);\n    blocks.get(2).put(\"store\", false);\n\n    blocks.add(3, new HashMap<String, Boolean>());\n    blocks.get(3).put(\"gym\", false);\n    blocks.get(3).put(\"school\", true);\n    blocks.get(3).put(\"store\", false);\n\n    blocks.add(4, new HashMap<String, Boolean>());\n    blocks.get(4).put(\"gym\", false);\n    blocks.get(4).put(\"school\", true);\n    blocks.get(4).put(\"store\", true);\n\n    String[] reqs = new String[] {\"gym\", \"school\", \"store\"};\n    Utils.assertTrue(Program.apartmentHunting(blocks, reqs) == 3);\n  }\n}\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(b^2*r) time | O(b) space - where b is the number of blocks and r is the number of\n  // requirements\n  public static int apartmentHunting(List<Map<String, Boolean>> blocks, String[] reqs) {\n    int[] maxDistancesAtBlocks = new int[blocks.size()];\n    Arrays.fill(maxDistancesAtBlocks, Integer.MIN_VALUE);\n\n    for (int i = 0; i < blocks.size(); i++) {\n      for (String req : reqs) {\n        int closestReqDistance = Integer.MAX_VALUE;\n        for (int j = 0; j < blocks.size(); j++) {\n          if (blocks.get(j).get(req)) {\n            closestReqDistance = Math.min(closestReqDistance, distanceBetween(i, j));\n          }\n        }\n        maxDistancesAtBlocks[i] = Math.max(maxDistancesAtBlocks[i], closestReqDistance);\n      }\n    }\n    return getIdxAtMinValue(maxDistancesAtBlocks);\n  }\n\n  public static int getIdxAtMinValue(int[] array) {\n    int idxAtMinValue = 0;\n    int minValue = Integer.MAX_VALUE;\n    for (int i = 0; i < array.length; i++) {\n      int currentValue = array[i];\n      if (currentValue < minValue) {\n        minValue = currentValue;\n        idxAtMinValue = i;\n      }\n    }\n    return idxAtMinValue;\n  }\n\n  public static int distanceBetween(int a, int b) {\n    return Math.abs(a - b);\n  }\n}\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(br) time | O(br) space - where b is the number of blocks and r is the number of\n  // requirements\n  public static int apartmentHunting(List<Map<String, Boolean>> blocks, String[] reqs) {\n    int[][] minDistancesFromBlocks = new int[reqs.length][];\n    for (int i = 0; i < reqs.length; i++) {\n      minDistancesFromBlocks[i] = getMinDistances(blocks, reqs[i]);\n    }\n    int[] maxDistancesAtBlocks = getMaxDistancesAtBlocks(blocks, minDistancesFromBlocks);\n    return getIdxAtMinValue(maxDistancesAtBlocks);\n  }\n\n  public static int[] getMinDistances(List<Map<String, Boolean>> blocks, String req) {\n    int[] minDistances = new int[blocks.size()];\n    int closestReqIdx = Integer.MAX_VALUE;\n    for (int i = 0; i < blocks.size(); i++) {\n      if (blocks.get(i).get(req)) closestReqIdx = i;\n      minDistances[i] = distanceBetween(i, closestReqIdx);\n    }\n    for (int i = blocks.size() - 1; i >= 0; i--) {\n      if (blocks.get(i).get(req)) closestReqIdx = i;\n      minDistances[i] = Math.min(minDistances[i], distanceBetween(i, closestReqIdx));\n    }\n    return minDistances;\n  }\n\n  public static int[] getMaxDistancesAtBlocks(\n      List<Map<String, Boolean>> blocks, int[][] minDistancesFromBlocks) {\n    int[] maxDistancesAtBlocks = new int[blocks.size()];\n    for (int i = 0; i < blocks.size(); i++) {\n      int[] minDistancesAtBlock = new int[minDistancesFromBlocks.length];\n      for (int j = 0; j < minDistancesFromBlocks.length; j++) {\n        minDistancesAtBlock[j] = minDistancesFromBlocks[j][i];\n      }\n      maxDistancesAtBlocks[i] = arrayMax(minDistancesAtBlock);\n    }\n    return maxDistancesAtBlocks;\n  }\n\n  public static int getIdxAtMinValue(int[] array) {\n    int idxAtMinValue = 0;\n    int minValue = Integer.MAX_VALUE;\n    for (int i = 0; i < array.length; i++) {\n      int currentValue = array[i];\n      if (currentValue < minValue) {\n        minValue = currentValue;\n        idxAtMinValue = i;\n      }\n    }\n    return idxAtMinValue;\n  }\n\n  public static int distanceBetween(int a, int b) {\n    return Math.abs(a - b);\n  }\n\n  public static int arrayMax(int[] array) {\n    int max = array[0];\n    for (int a : array) {\n      if (a > max) {\n        max = a;\n      }\n    }\n    return max;\n  }\n}\n"
      ]
    },
    "javascript": {
      "Language": "javascript",
      "StartingCode": "function apartmentHunting(blocks, reqs) {\n  // Write your code here.\n}\n\n// Do not edit the line below.\nexports.apartmentHunting = apartmentHunting;\n",
      "StartingTest": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const blocks = [\n    {\n      gym: false,\n      school: true,\n      store: false,\n    },\n    {\n      gym: true,\n      school: false,\n      store: false,\n    },\n    {\n      gym: true,\n      school: true,\n      store: false,\n    },\n    {\n      gym: false,\n      school: true,\n      store: false,\n    },\n    {\n      gym: false,\n      school: true,\n      store: true,\n    },\n  ];\n  const reqs = ['gym', 'school', 'store'];\n  chai.expect(program.apartmentHunting(blocks, reqs)).to.deep.equal(3);\n});\n\nit('Test Case #2', function () {\n  const blocks = [\n    {\n      gym: false,\n      office: true,\n      school: true,\n      store: false,\n    },\n    {\n      gym: true,\n      office: false,\n      school: false,\n      store: false,\n    },\n    {\n      gym: true,\n      office: false,\n      school: true,\n      store: false,\n    },\n    {\n      gym: false,\n      office: false,\n      school: true,\n      store: false,\n    },\n    {\n      gym: false,\n      office: false,\n      school: true,\n      store: true,\n    },\n  ];\n  const reqs = ['gym', 'office', 'school', 'store'];\n  chai.expect(program.apartmentHunting(blocks, reqs)).to.deep.equal(2);\n});\n\nit('Test Case #3', function () {\n  const blocks = [\n    {\n      gym: false,\n      office: true,\n      school: true,\n      store: false,\n    },\n    {\n      gym: true,\n      office: false,\n      school: false,\n      store: false,\n    },\n    {\n      gym: true,\n      office: false,\n      school: true,\n      store: false,\n    },\n    {\n      gym: false,\n      office: false,\n      school: true,\n      store: false,\n    },\n    {\n      gym: false,\n      office: false,\n      school: true,\n      store: false,\n    },\n    {\n      gym: false,\n      office: false,\n      school: true,\n      store: true,\n    },\n  ];\n  const reqs = ['gym', 'office', 'school', 'store'];\n  chai.expect([2, 3].includes(program.apartmentHunting(blocks, reqs))).to.deep.equal(true);\n});\n\nit('Test Case #4', function () {\n  const blocks = [\n    {\n      foo: true,\n      gym: false,\n      kappa: false,\n      office: true,\n      school: true,\n      store: false,\n    },\n    {\n      foo: true,\n      gym: true,\n      kappa: false,\n      office: false,\n      school: false,\n      store: false,\n    },\n    {\n      foo: true,\n      gym: true,\n      kappa: false,\n      office: false,\n      school: true,\n      store: false,\n    },\n    {\n      foo: true,\n      gym: false,\n      kappa: false,\n      office: false,\n      school: true,\n      store: false,\n    },\n    {\n      foo: true,\n      gym: true,\n      kappa: false,\n      office: false,\n      school: true,\n      store: false,\n    },\n    {\n      foo: true,\n      gym: false,\n      kappa: false,\n      office: false,\n      school: true,\n      store: true,\n    },\n  ];\n  const reqs = ['gym', 'school', 'store'];\n  chai.expect([4, 5].includes(program.apartmentHunting(blocks, reqs))).to.deep.equal(true);\n});\n\nit('Test Case #5', function () {\n  const blocks = [\n    {\n      gym: true,\n      school: true,\n      store: false,\n    },\n    {\n      gym: false,\n      school: false,\n      store: false,\n    },\n    {\n      gym: false,\n      school: true,\n      store: false,\n    },\n    {\n      gym: false,\n      school: false,\n      store: false,\n    },\n    {\n      gym: false,\n      school: false,\n      store: true,\n    },\n    {\n      gym: true,\n      school: false,\n      store: false,\n    },\n    {\n      gym: false,\n      school: false,\n      store: false,\n    },\n    {\n      gym: false,\n      school: false,\n      store: false,\n    },\n    {\n      gym: false,\n      school: false,\n      store: false,\n    },\n    {\n      gym: false,\n      school: true,\n      store: false,\n    },\n  ];\n  const reqs = ['gym', 'school', 'store'];\n  chai.expect([2, 3, 4].includes(program.apartmentHunting(blocks, reqs))).to.deep.equal(true);\n});\n\nit('Test Case #6', function () {\n  const blocks = [\n    {\n      gym: true,\n      pool: false,\n      school: true,\n      store: false,\n    },\n    {\n      gym: false,\n      pool: false,\n      school: false,\n      store: false,\n    },\n    {\n      gym: false,\n      pool: false,\n      school: true,\n      store: false,\n    },\n    {\n      gym: false,\n      pool: false,\n      school: false,\n      store: false,\n    },\n    {\n      gym: false,\n      pool: false,\n      school: false,\n      store: true,\n    },\n    {\n      gym: true,\n      pool: false,\n      school: false,\n      store: false,\n    },\n    {\n      gym: false,\n      pool: false,\n      school: false,\n      store: false,\n    },\n    {\n      gym: false,\n      pool: false,\n      school: false,\n      store: false,\n    },\n    {\n      gym: false,\n      pool: false,\n      school: false,\n      store: false,\n    },\n    {\n      gym: false,\n      pool: false,\n      school: true,\n      store: false,\n    },\n    {\n      gym: false,\n      pool: true,\n      school: false,\n      store: false,\n    },\n  ];\n  const reqs = ['gym', 'pool', 'school', 'store'];\n  chai.expect(program.apartmentHunting(blocks, reqs)).to.deep.equal(7);\n});\n\nit('Test Case #7', function () {\n  const blocks = [\n    {\n      gym: true,\n      office: false,\n      pool: false,\n      school: true,\n      store: false,\n    },\n    {\n      gym: false,\n      office: false,\n      pool: false,\n      school: false,\n      store: false,\n    },\n    {\n      gym: false,\n      office: true,\n      pool: false,\n      school: true,\n      store: false,\n    },\n    {\n      gym: false,\n      office: true,\n      pool: false,\n      school: false,\n      store: false,\n    },\n    {\n      gym: false,\n      office: false,\n      pool: false,\n      school: false,\n      store: true,\n    },\n    {\n      gym: true,\n      office: true,\n      pool: false,\n      school: false,\n      store: false,\n    },\n    {\n      gym: false,\n      office: false,\n      pool: true,\n      school: false,\n      store: false,\n    },\n    {\n      gym: false,\n      office: false,\n      pool: false,\n      school: false,\n      store: false,\n    },\n    {\n      gym: false,\n      office: false,\n      pool: false,\n      school: false,\n      store: false,\n    },\n    {\n      gym: false,\n      office: false,\n      pool: false,\n      school: true,\n      store: false,\n    },\n    {\n      gym: false,\n      office: false,\n      pool: true,\n      school: false,\n      store: false,\n    },\n  ];\n  const reqs = ['gym', 'pool', 'school', 'store'];\n  chai.expect(program.apartmentHunting(blocks, reqs)).to.deep.equal(4);\n});\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const blocks = [\n    {\n      gym: false,\n      school: true,\n      store: false,\n    },\n    {\n      gym: true,\n      school: false,\n      store: false,\n    },\n    {\n      gym: true,\n      school: true,\n      store: false,\n    },\n    {\n      gym: false,\n      school: true,\n      store: false,\n    },\n    {\n      gym: false,\n      school: true,\n      store: true,\n    },\n  ];\n  const reqs = ['gym', 'school', 'store'];\n  chai.expect(program.apartmentHunting(blocks, reqs)).to.deep.equal(3);\n});\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\n// O(b^2*r) time | O(b) space - where b is the number of blocks and r is the number of requirements\nfunction apartmentHunting(blocks, reqs) {\n  const maxDistancesAtBlocks = new Array(blocks.length).fill(-Infinity);\n  for (let i = 0; i < blocks.length; i++) {\n    for (const req of reqs) {\n      let closestReqDistance = Infinity;\n      for (let j = 0; j < blocks.length; j++) {\n        if (blocks[j][req]) {\n          closestReqDistance = Math.min(closestReqDistance, distanceBetween(i, j));\n        }\n      }\n      maxDistancesAtBlocks[i] = Math.max(maxDistancesAtBlocks[i], closestReqDistance);\n    }\n  }\n  return getIdxAtMinValue(maxDistancesAtBlocks);\n}\n\nfunction getIdxAtMinValue(array) {\n  let idxAtMinValue = 0;\n  let minValue = Infinity;\n  for (let i = 0; i < array.length; i++) {\n    const currentValue = array[i];\n    if (currentValue < minValue) {\n      minValue = currentValue;\n      idxAtMinValue = i;\n    }\n  }\n  return idxAtMinValue;\n}\n\nfunction distanceBetween(a, b) {\n  return Math.abs(a - b);\n}\n\nexports.apartmentHunting = apartmentHunting;\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\n// O(br) time | O(br) space - where b is the number of blocks and r is the number of requirements\nfunction apartmentHunting(blocks, reqs) {\n  const minDistancesFromBlocks = reqs.map(req => getMinDistances(blocks, req));\n  const maxDistancesAtBlocks = getMaxDistancesAtBlocks(blocks, minDistancesFromBlocks);\n  return getIdxAtMinValue(maxDistancesAtBlocks);\n}\n\nfunction getMinDistances(blocks, req) {\n  const minDistances = new Array(blocks.length);\n  let closestReqIdx = Infinity;\n  for (let i = 0; i < blocks.length; i++) {\n    if (blocks[i][req]) closestReqIdx = i;\n    minDistances[i] = distanceBetween(i, closestReqIdx);\n  }\n  for (let i = blocks.length - 1; i >= 0; i--) {\n    if (blocks[i][req]) closestReqIdx = i;\n    minDistances[i] = Math.min(minDistances[i], distanceBetween(i, closestReqIdx));\n  }\n  return minDistances;\n}\n\nfunction getMaxDistancesAtBlocks(blocks, minDistancesFromBlocks) {\n  const maxDistancesAtBlocks = new Array(blocks.length);\n  for (let i = 0; i < blocks.length; i++) {\n    const minDistancesAtBlock = minDistancesFromBlocks.map(distances => distances[i]);\n    maxDistancesAtBlocks[i] = Math.max(...minDistancesAtBlock);\n  }\n  return maxDistancesAtBlocks;\n}\n\nfunction getIdxAtMinValue(array) {\n  let idxAtMinValue = 0;\n  let minValue = Infinity;\n  for (let i = 0; i < array.length; i++) {\n    const currentValue = array[i];\n    if (currentValue < minValue) {\n      minValue = currentValue;\n      idxAtMinValue = i;\n    }\n  }\n  return idxAtMinValue;\n}\n\nfunction distanceBetween(a, b) {\n  return Math.abs(a - b);\n}\n\nexports.apartmentHunting = apartmentHunting;\n"
      ]
    },
    "python": {
      "Language": "python",
      "StartingCode": "def apartmentHunting(blocks, reqs):\n    # Write your code here.\n    pass\n",
      "StartingTest": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        blocks = [\n            {\"gym\": False, \"school\": True, \"store\": False},\n            {\"gym\": True, \"school\": False, \"store\": False},\n            {\"gym\": True, \"school\": True, \"store\": False},\n            {\"gym\": False, \"school\": True, \"store\": False},\n            {\"gym\": False, \"school\": True, \"store\": True},\n        ]\n        reqs = [\"gym\", \"school\", \"store\"]\n        self.assertEqual(program.apartmentHunting(blocks, reqs), 3)\n\n    def test_case_2(self):\n        blocks = [\n            {\"gym\": False, \"office\": True, \"school\": True, \"store\": False},\n            {\"gym\": True, \"office\": False, \"school\": False, \"store\": False},\n            {\"gym\": True, \"office\": False, \"school\": True, \"store\": False},\n            {\"gym\": False, \"office\": False, \"school\": True, \"store\": False},\n            {\"gym\": False, \"office\": False, \"school\": True, \"store\": True},\n        ]\n        reqs = [\"gym\", \"office\", \"school\", \"store\"]\n        self.assertEqual(program.apartmentHunting(blocks, reqs), 2)\n\n    def test_case_3(self):\n        blocks = [\n            {\"gym\": False, \"office\": True, \"school\": True, \"store\": False},\n            {\"gym\": True, \"office\": False, \"school\": False, \"store\": False},\n            {\"gym\": True, \"office\": False, \"school\": True, \"store\": False},\n            {\"gym\": False, \"office\": False, \"school\": True, \"store\": False},\n            {\"gym\": False, \"office\": False, \"school\": True, \"store\": False},\n            {\"gym\": False, \"office\": False, \"school\": True, \"store\": True},\n        ]\n        reqs = [\"gym\", \"office\", \"school\", \"store\"]\n        self.assertEqual(program.apartmentHunting(blocks, reqs) in [2, 3], True)\n\n    def test_case_4(self):\n        blocks = [\n            {\"foo\": True, \"gym\": False, \"kappa\": False, \"office\": True, \"school\": True, \"store\": False,},\n            {\"foo\": True, \"gym\": True, \"kappa\": False, \"office\": False, \"school\": False, \"store\": False,},\n            {\"foo\": True, \"gym\": True, \"kappa\": False, \"office\": False, \"school\": True, \"store\": False,},\n            {\"foo\": True, \"gym\": False, \"kappa\": False, \"office\": False, \"school\": True, \"store\": False,},\n            {\"foo\": True, \"gym\": True, \"kappa\": False, \"office\": False, \"school\": True, \"store\": False,},\n            {\"foo\": True, \"gym\": False, \"kappa\": False, \"office\": False, \"school\": True, \"store\": True,},\n        ]\n        reqs = [\"gym\", \"school\", \"store\"]\n        self.assertEqual(program.apartmentHunting(blocks, reqs) in [4, 5], True)\n\n    def test_case_5(self):\n        blocks = [\n            {\"gym\": True, \"school\": True, \"store\": False},\n            {\"gym\": False, \"school\": False, \"store\": False},\n            {\"gym\": False, \"school\": True, \"store\": False},\n            {\"gym\": False, \"school\": False, \"store\": False},\n            {\"gym\": False, \"school\": False, \"store\": True},\n            {\"gym\": True, \"school\": False, \"store\": False},\n            {\"gym\": False, \"school\": False, \"store\": False},\n            {\"gym\": False, \"school\": False, \"store\": False},\n            {\"gym\": False, \"school\": False, \"store\": False},\n            {\"gym\": False, \"school\": True, \"store\": False},\n        ]\n        reqs = [\"gym\", \"school\", \"store\"]\n        self.assertEqual(program.apartmentHunting(blocks, reqs) in [2, 3, 4], True)\n\n    def test_case_6(self):\n        blocks = [\n            {\"gym\": True, \"pool\": False, \"school\": True, \"store\": False},\n            {\"gym\": False, \"pool\": False, \"school\": False, \"store\": False},\n            {\"gym\": False, \"pool\": False, \"school\": True, \"store\": False},\n            {\"gym\": False, \"pool\": False, \"school\": False, \"store\": False},\n            {\"gym\": False, \"pool\": False, \"school\": False, \"store\": True},\n            {\"gym\": True, \"pool\": False, \"school\": False, \"store\": False},\n            {\"gym\": False, \"pool\": False, \"school\": False, \"store\": False},\n            {\"gym\": False, \"pool\": False, \"school\": False, \"store\": False},\n            {\"gym\": False, \"pool\": False, \"school\": False, \"store\": False},\n            {\"gym\": False, \"pool\": False, \"school\": True, \"store\": False},\n            {\"gym\": False, \"pool\": True, \"school\": False, \"store\": False},\n        ]\n        reqs = [\"gym\", \"pool\", \"school\", \"store\"]\n        self.assertEqual(program.apartmentHunting(blocks, reqs), 7)\n\n    def test_case_7(self):\n        blocks = [\n            {\"gym\": True, \"office\": False, \"pool\": False, \"school\": True, \"store\": False,},\n            {\"gym\": False, \"office\": False, \"pool\": False, \"school\": False, \"store\": False,},\n            {\"gym\": False, \"office\": True, \"pool\": False, \"school\": True, \"store\": False,},\n            {\"gym\": False, \"office\": True, \"pool\": False, \"school\": False, \"store\": False,},\n            {\"gym\": False, \"office\": False, \"pool\": False, \"school\": False, \"store\": True,},\n            {\"gym\": True, \"office\": True, \"pool\": False, \"school\": False, \"store\": False,},\n            {\"gym\": False, \"office\": False, \"pool\": True, \"school\": False, \"store\": False,},\n            {\"gym\": False, \"office\": False, \"pool\": False, \"school\": False, \"store\": False,},\n            {\"gym\": False, \"office\": False, \"pool\": False, \"school\": False, \"store\": False,},\n            {\"gym\": False, \"office\": False, \"pool\": False, \"school\": True, \"store\": False,},\n            {\"gym\": False, \"office\": False, \"pool\": True, \"school\": False, \"store\": False,},\n        ]\n        reqs = [\"gym\", \"pool\", \"school\", \"store\"]\n        self.assertEqual(program.apartmentHunting(blocks, reqs), 4)\n",
      "SandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        blocks = [\n            {\"gym\": False, \"school\": True, \"store\": False},\n            {\"gym\": True, \"school\": False, \"store\": False},\n            {\"gym\": True, \"school\": True, \"store\": False},\n            {\"gym\": False, \"school\": True, \"store\": False},\n            {\"gym\": False, \"school\": True, \"store\": True},\n        ]\n        reqs = [\"gym\", \"school\", \"store\"]\n        self.assertEqual(program.apartmentHunting(blocks, reqs), 3)\n",
      "Solutions": [
        "# Copyright © 2020 Code Complete. All rights reserved.\n\n# O(b^2*r) time | O(b) space - where b is the number of blocks and r is the number of requirements\ndef apartmentHunting(blocks, reqs):\n    maxDistancesAtBlocks = [float(\"-inf\") for block in blocks]\n    for i in range(len(blocks)):\n        for req in reqs:\n            closestReqDistance = float(\"inf\")\n            for j in range(len(blocks)):\n                if blocks[j][req]:\n                    closestReqDistance = min(closestReqDistance, distanceBetween(i, j))\n            maxDistancesAtBlocks[i] = max(maxDistancesAtBlocks[i], closestReqDistance)\n    return getIdxAtMinValue(maxDistancesAtBlocks)\n\n\ndef getIdxAtMinValue(array):\n    idxAtMinValue = 0\n    minValue = float(\"inf\")\n    for i in range(len(array)):\n        currentValue = array[i]\n        if currentValue < minValue:\n            minValue = currentValue\n            idxAtMinValue = i\n    return idxAtMinValue\n\n\ndef distanceBetween(a, b):\n    return abs(a - b)\n",
        "# Copyright © 2020 Code Complete. All rights reserved.\n\n# O(br) time | O(br) space - where b is the number of blocks and r is the number of requirements\ndef apartmentHunting(blocks, reqs):\n    minDistancesFromBlocks = list(map(lambda req: getMinDistances(blocks, req), reqs))\n    maxDistancesAtBlocks = getMaxDistancesAtBlocks(blocks, minDistancesFromBlocks)\n    return getIdxAtMinValue(maxDistancesAtBlocks)\n\n\ndef getMinDistances(blocks, req):\n    minDistances = [0 for block in blocks]\n    closestReqIdx = float(\"inf\")\n    for i in range(len(blocks)):\n        if blocks[i][req]:\n            closestReqIdx = i\n        minDistances[i] = distanceBetween(i, closestReqIdx)\n    for i in reversed(range(len(blocks))):\n        if blocks[i][req]:\n            closestReqIdx = i\n        minDistances[i] = min(minDistances[i], distanceBetween(i, closestReqIdx))\n    return minDistances\n\n\ndef getMaxDistancesAtBlocks(blocks, minDistancesFromBlocks):\n    maxDistancesAtBlocks = [0 for block in blocks]\n    for i in range(len(blocks)):\n        minDistancesAtBlock = list(map(lambda distances: distances[i], minDistancesFromBlocks))\n        maxDistancesAtBlocks[i] = max(minDistancesAtBlock)\n    return maxDistancesAtBlocks\n\n\ndef getIdxAtMinValue(array):\n    idxAtMinValue = 0\n    minValue = float(\"inf\")\n    for i in range(len(array)):\n        currentValue = array[i]\n        if currentValue < minValue:\n            minValue = currentValue\n            idxAtMinValue = i\n    return idxAtMinValue\n\n\ndef distanceBetween(a, b):\n    return abs(a - b)\n"
      ]
    },
    "swift": {
      "Language": "swift",
      "StartingCode": "class Program {\n  func apartmentHunting(_ blocks: [[String: Bool]], _ requirements: [String]) -> Int {\n    // Write your code here.\n    return -1\n  }\n}\n",
      "StartingTest": "class ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      let requirements = [\"gym\", \"school\", \"store\"]\n      let blocks = [\n        [\n          \"gym\": false,\n          \"school\": true,\n          \"store\": false,\n        ],\n        [\n          \"gym\": true,\n          \"school\": false,\n          \"store\": false,\n        ],\n        [\n          \"gym\": true,\n          \"school\": true,\n          \"store\": false,\n        ],\n        [\n          \"gym\": false,\n          \"school\": true,\n          \"store\": false,\n        ],\n        [\n          \"gym\": false,\n          \"school\": true,\n          \"store\": true,\n        ],\n      ]\n\n      try assertEqual(3, program.apartmentHunting(blocks, requirements))\n    }\n    runTest(\"Test Case 2\") { () throws -> Void in\n      let requirements = [\"gym\", \"office\", \"school\", \"store\"]\n      let blocks = [\n        [\n          \"gym\": false,\n          \"office\": true,\n          \"school\": true,\n          \"store\": false,\n        ],\n        [\n          \"gym\": true,\n          \"office\": false,\n          \"school\": false,\n          \"store\": false,\n        ],\n        [\n          \"gym\": true,\n          \"office\": false,\n          \"school\": true,\n          \"store\": false,\n        ],\n        [\n          \"gym\": false,\n          \"office\": false,\n          \"school\": true,\n          \"store\": false,\n        ],\n        [\n          \"gym\": false,\n          \"office\": false,\n          \"school\": true,\n          \"store\": true,\n        ],\n      ]\n\n      try assertEqual(2, program.apartmentHunting(blocks, requirements))\n    }\n    runTest(\"Test Case 3\") { () throws -> Void in\n      let requirements = [\"gym\", \"office\", \"school\", \"store\"]\n      let blocks = [\n        [\n          \"gym\": false,\n          \"office\": true,\n          \"school\": true,\n          \"store\": false,\n        ],\n        [\n          \"gym\": true,\n          \"office\": false,\n          \"school\": false,\n          \"store\": false,\n        ],\n        [\n          \"gym\": true,\n          \"office\": false,\n          \"school\": true,\n          \"store\": false,\n        ],\n        [\n          \"gym\": false,\n          \"office\": false,\n          \"school\": true,\n          \"store\": false,\n        ],\n        [\n          \"gym\": false,\n          \"office\": false,\n          \"school\": true,\n          \"store\": false,\n        ],\n        [\n          \"gym\": false,\n          \"office\": false,\n          \"school\": true,\n          \"store\": true,\n        ],\n      ]\n\n      try assert([2, 3].contains(program.apartmentHunting(blocks, requirements)))\n    }\n    runTest(\"Test Case 4\") { () throws -> Void in\n      let requirements = [\"gym\", \"school\", \"store\"]\n      let blocks = [\n        [\n          \"foo\": true,\n          \"gym\": false,\n          \"kappa\": false,\n          \"office\": true,\n          \"school\": true,\n          \"store\": false,\n        ],\n        [\n          \"foo\": true,\n          \"gym\": true,\n          \"kappa\": false,\n          \"office\": false,\n          \"school\": false,\n          \"store\": false,\n        ],\n        [\n          \"foo\": true,\n          \"gym\": true,\n          \"kappa\": false,\n          \"office\": false,\n          \"school\": true,\n          \"store\": false,\n        ],\n        [\n          \"foo\": true,\n          \"gym\": false,\n          \"kappa\": false,\n          \"office\": false,\n          \"school\": true,\n          \"store\": false,\n        ],\n        [\n          \"foo\": true,\n          \"gym\": true,\n          \"kappa\": false,\n          \"office\": false,\n          \"school\": true,\n          \"store\": false,\n        ],\n        [\n          \"foo\": true,\n          \"gym\": false,\n          \"kappa\": false,\n          \"office\": false,\n          \"school\": true,\n          \"store\": true,\n        ],\n      ]\n\n      try assert([4, 3].contains(program.apartmentHunting(blocks, requirements)))\n    }\n    runTest(\"Test Case 5\") { () throws -> Void in\n      let requirements = [\"gym\", \"school\", \"store\"]\n      let blocks = [\n        [\n          \"gym\": true,\n          \"school\": true,\n          \"store\": false,\n        ],\n        [\n          \"gym\": false,\n          \"school\": false,\n          \"store\": false,\n        ],\n        [\n          \"gym\": false,\n          \"school\": true,\n          \"store\": false,\n        ],\n        [\n          \"gym\": false,\n          \"school\": false,\n          \"store\": false,\n        ],\n        [\n          \"gym\": false,\n          \"school\": false,\n          \"store\": true,\n        ],\n        [\n          \"gym\": true,\n          \"school\": false,\n          \"store\": false,\n        ],\n        [\n          \"gym\": false,\n          \"school\": false,\n          \"store\": false,\n        ],\n        [\n          \"gym\": false,\n          \"school\": false,\n          \"store\": false,\n        ],\n        [\n          \"gym\": false,\n          \"school\": false,\n          \"store\": false,\n        ],\n        [\n          \"gym\": false,\n          \"school\": true,\n          \"store\": false,\n        ],\n      ]\n\n      try assert([2, 3, 4].contains(program.apartmentHunting(blocks, requirements)))\n    }\n    runTest(\"Test Case 6\") { () throws -> Void in\n      let requirements = [\"gym\", \"pool\", \"school\", \"store\"]\n      let blocks = [\n        [\n          \"gym\": true,\n          \"pool\": false,\n          \"school\": true,\n          \"store\": false,\n        ],\n        [\n          \"gym\": false,\n          \"pool\": false,\n          \"school\": false,\n          \"store\": false,\n        ],\n        [\n          \"gym\": false,\n          \"pool\": false,\n          \"school\": true,\n          \"store\": false,\n        ],\n        [\n          \"gym\": false,\n          \"pool\": false,\n          \"school\": false,\n          \"store\": false,\n        ],\n        [\n          \"gym\": false,\n          \"pool\": false,\n          \"school\": false,\n          \"store\": true,\n        ],\n        [\n          \"gym\": true,\n          \"pool\": false,\n          \"school\": false,\n          \"store\": false,\n        ],\n        [\n          \"gym\": false,\n          \"pool\": false,\n          \"school\": false,\n          \"store\": false,\n        ],\n        [\n          \"gym\": false,\n          \"pool\": false,\n          \"school\": false,\n          \"store\": false,\n        ],\n        [\n          \"gym\": false,\n          \"pool\": false,\n          \"school\": false,\n          \"store\": false,\n        ],\n        [\n          \"gym\": false,\n          \"pool\": false,\n          \"school\": true,\n          \"store\": false,\n        ],\n        [\n          \"gym\": false,\n          \"pool\": true,\n          \"school\": false,\n          \"store\": false,\n        ],\n      ]\n\n      try assertEqual(7, program.apartmentHunting(blocks, requirements))\n    }\n    runTest(\"Test Case 7\") { () throws -> Void in\n      let requirements = [\"gym\", \"pool\", \"school\", \"store\"]\n      let blocks = [\n        [\n          \"gym\": true,\n          \"office\": false,\n          \"pool\": false,\n          \"school\": true,\n          \"store\": false,\n        ],\n        [\n          \"gym\": false,\n          \"office\": false,\n          \"pool\": false,\n          \"school\": false,\n          \"store\": false,\n        ],\n        [\n          \"gym\": false,\n          \"office\": true,\n          \"pool\": false,\n          \"school\": true,\n          \"store\": false,\n        ],\n        [\n          \"gym\": false,\n          \"office\": true,\n          \"pool\": false,\n          \"school\": false,\n          \"store\": false,\n        ],\n        [\n          \"gym\": false,\n          \"office\": false,\n          \"pool\": false,\n          \"school\": false,\n          \"store\": true,\n        ],\n        [\n          \"gym\": true,\n          \"office\": true,\n          \"pool\": false,\n          \"school\": false,\n          \"store\": false,\n        ],\n        [\n          \"gym\": false,\n          \"office\": false,\n          \"pool\": true,\n          \"school\": false,\n          \"store\": false,\n        ],\n        [\n          \"gym\": false,\n          \"office\": false,\n          \"pool\": false,\n          \"school\": false,\n          \"store\": false,\n        ],\n        [\n          \"gym\": false,\n          \"office\": false,\n          \"pool\": false,\n          \"school\": false,\n          \"store\": false,\n        ],\n        [\n          \"gym\": false,\n          \"office\": false,\n          \"pool\": false,\n          \"school\": true,\n          \"store\": false,\n        ],\n        [\n          \"gym\": false,\n          \"office\": false,\n          \"pool\": true,\n          \"school\": false,\n          \"store\": false,\n        ],\n      ]\n\n      try assertEqual(4, program.apartmentHunting(blocks, requirements))\n    }\n  }\n}\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      let requirements = [\"gym\", \"school\", \"store\"]\n      let blocks = [\n        [\n          \"gym\": false,\n          \"school\": true,\n          \"store\": false,\n        ],\n        [\n          \"gym\": true,\n          \"school\": false,\n          \"store\": false,\n        ],\n        [\n          \"gym\": true,\n          \"school\": true,\n          \"store\": false,\n        ],\n        [\n          \"gym\": false,\n          \"school\": true,\n          \"store\": false,\n        ],\n        [\n          \"gym\": false,\n          \"school\": true,\n          \"store\": true,\n        ],\n      ]\n\n      try assertEqual(3, program.apartmentHunting(blocks, requirements))\n    }\n  }\n}\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nclass Program {\n  // O(b^2 * r) time | O(b) space\n  func apartmentHunting(_ blocks: [[String: Bool]], _ requirements: [String]) -> Int {\n    var maxDistancesAtBlocks = Array(repeating: -Int.max, count: blocks.count)\n    for i in 0 ..< blocks.count {\n      for requirement in requirements {\n        var closestReqDistance = Int.max\n\n        for j in 0 ..< blocks.count {\n          if let requirementAvailable = blocks[j][requirement], requirementAvailable {\n            closestReqDistance = min(closestReqDistance, distanceBetween(i, j))\n          }\n        }\n\n        maxDistancesAtBlocks[i] = max(maxDistancesAtBlocks[i], closestReqDistance)\n      }\n    }\n\n    return getIndexAtMinValue(maxDistancesAtBlocks)\n  }\n\n  func getIndexAtMinValue(_ array: [Int]) -> Int {\n    var indexAtMinValue = 0\n    var minValue = Int.max\n\n    for i in 0 ..< array.count {\n      let currentValue = array[i]\n\n      if currentValue < minValue {\n        minValue = currentValue\n        indexAtMinValue = i\n      }\n    }\n\n    return indexAtMinValue\n  }\n\n  func distanceBetween(_ a: Int, _ b: Int) -> Int {\n    return abs(a - b)\n  }\n}\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nclass Program {\n  // O(br) time | O(br) space - where b is the number of blocks and r is the number of requirements\n  func apartmentHunting(_ blocks: [[String: Bool]], _ requirements: [String]) -> Int {\n    let minDistancesFromBlocks = requirements.map { getMinDistances(blocks, $0) }\n    let maxDistancesAtBlocks = getMaxDistancesAtBlocks(blocks, minDistancesFromBlocks)\n\n    return getIndexAtMinValue(maxDistancesAtBlocks)\n  }\n\n  func getMinDistances(_ blocks: [[String: Bool]], _ requirement: String) -> [Int] {\n    var minDistances = Array(repeating: -1, count: blocks.count)\n    var closestRequirementIndex = Int.max\n\n    for i in 0 ..< blocks.count {\n      if let requirementAvailable = blocks[i][requirement], requirementAvailable {\n        closestRequirementIndex = i\n      }\n\n      minDistances[i] = distanceBetween(i, closestRequirementIndex)\n    }\n\n    for i in (0 ..< blocks.count).reversed() {\n      if let requirementAvailable = blocks[i][requirement], requirementAvailable {\n        closestRequirementIndex = i\n      }\n\n      minDistances[i] = min(minDistances[i], distanceBetween(i, closestRequirementIndex))\n    }\n\n    return minDistances\n  }\n\n  func getMaxDistancesAtBlocks(_ blocks: [[String: Bool]], _ minDistancesFromBlocks: [[Int]]) -> [Int] {\n    var maxDistancesAtBlocks = Array(repeating: -1, count: blocks.count)\n\n    for i in 0 ..< blocks.count {\n      let minDistancesAtBlock = minDistancesFromBlocks.map { $0[i] }\n\n      if let max = minDistancesAtBlock.max() {\n        maxDistancesAtBlocks[i] = max\n      }\n    }\n\n    return maxDistancesAtBlocks\n  }\n\n  func getIndexAtMinValue(_ array: [Int]) -> Int {\n    var indexAtMinValue = 0\n    var minValue = Int.max\n\n    for i in 0 ..< array.count {\n      let currentValue = array[i]\n\n      if currentValue < minValue {\n        minValue = currentValue\n        indexAtMinValue = i\n      }\n    }\n\n    return indexAtMinValue\n  }\n\n  func distanceBetween(_ a: Int, _ b: Int) -> Int {\n    return abs(a - b)\n  }\n}\n"
      ]
    },
    "typescript": {
      "Language": "typescript",
      "StartingCode": "interface Block {\n  [key: string]: boolean;\n}\n\nexport function apartmentHunting(blocks: Block[], reqs: string[]) {\n  // Write your code here.\n  return -1;\n}\n",
      "StartingTest": "",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const blocks = [\n    {\n      gym: false,\n      school: true,\n      store: false,\n    },\n    {\n      gym: true,\n      school: false,\n      store: false,\n    },\n    {\n      gym: true,\n      school: true,\n      store: false,\n    },\n    {\n      gym: false,\n      school: true,\n      store: false,\n    },\n    {\n      gym: false,\n      school: true,\n      store: true,\n    },\n  ];\n  const reqs = ['gym', 'school', 'store'];\n  chai.expect(program.apartmentHunting(blocks, reqs)).to.deep.equal(3);\n});\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\ninterface Block {\n  [key: string]: boolean;\n}\n\n// O(b^2*r) time | O(b) space - where b is the number of blocks and r is the number of requirements\nexport function apartmentHunting(blocks: Block[], reqs: string[]) {\n  const maxDistancesAtBlocks = new Array(blocks.length).fill(-Infinity);\n  for (let i = 0; i < blocks.length; i++) {\n    for (const req of reqs) {\n      let closestReqDistance = Infinity;\n      for (let j = 0; j < blocks.length; j++) {\n        if (blocks[j][req]) {\n          closestReqDistance = Math.min(closestReqDistance, distanceBetween(i, j));\n        }\n      }\n      maxDistancesAtBlocks[i] = Math.max(maxDistancesAtBlocks[i], closestReqDistance);\n    }\n  }\n  return getIdxAtMinValue(maxDistancesAtBlocks);\n}\n\nfunction getIdxAtMinValue(array: number[]) {\n  let idxAtMinValue = 0;\n  let minValue = Infinity;\n  for (let i = 0; i < array.length; i++) {\n    const currentValue = array[i];\n    if (currentValue < minValue) {\n      minValue = currentValue;\n      idxAtMinValue = i;\n    }\n  }\n  return idxAtMinValue;\n}\n\nfunction distanceBetween(a: number, b: number) {\n  return Math.abs(a - b);\n}\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\ninterface Block {\n  [key: string]: boolean;\n}\n\n// O(br) time | O(br) space - where b is the number of blocks and r is the number of requirements\nexport function apartmentHunting(blocks: Block[], reqs: string[]) {\n  const minDistancesFromBlocks = reqs.map(req => getMinDistances(blocks, req));\n  const maxDistancesAtBlocks = getMaxDistancesAtBlocks(blocks, minDistancesFromBlocks);\n  return getIdxAtMinValue(maxDistancesAtBlocks);\n}\n\nfunction getMinDistances(blocks: Block[], req: string) {\n  const minDistances: number[] = new Array(blocks.length);\n  let closestReqIdx = Infinity;\n  for (let i = 0; i < blocks.length; i++) {\n    if (blocks[i][req]) closestReqIdx = i;\n    minDistances[i] = distanceBetween(i, closestReqIdx);\n  }\n  for (let i = blocks.length - 1; i >= 0; i--) {\n    if (blocks[i][req]) closestReqIdx = i;\n    minDistances[i] = Math.min(minDistances[i], distanceBetween(i, closestReqIdx));\n  }\n  return minDistances;\n}\n\nfunction getMaxDistancesAtBlocks(blocks: Block[], minDistancesFromBlocks: number[][]) {\n  const maxDistancesAtBlocks: number[] = new Array(blocks.length);\n  for (let i = 0; i < blocks.length; i++) {\n    const minDistancesAtBlock = minDistancesFromBlocks.map(distances => distances[i]);\n    maxDistancesAtBlocks[i] = Math.max(...minDistancesAtBlock);\n  }\n  return maxDistancesAtBlocks;\n}\n\nfunction getIdxAtMinValue(array: number[]) {\n  let idxAtMinValue = 0;\n  let minValue = Infinity;\n  for (let i = 0; i < array.length; i++) {\n    const currentValue = array[i];\n    if (currentValue < minValue) {\n      minValue = currentValue;\n      idxAtMinValue = i;\n    }\n  }\n  return idxAtMinValue;\n}\n\nfunction distanceBetween(a: number, b: number) {\n  return Math.abs(a - b);\n}\n"
      ]
    }
  },
  "JSONTestLanguages": [
    "javascript",
    "cpp",
    "python",
    "java",
    "csharp",
    "go",
    "swift",
    "typescript"
  ],
  "JSONTests": [
    {
      "blocks": [
        {
          "gym": false,
          "school": true,
          "store": false
        },
        {
          "gym": true,
          "school": false,
          "store": false
        },
        {
          "gym": true,
          "school": true,
          "store": false
        },
        {
          "gym": false,
          "school": true,
          "store": false
        },
        {
          "gym": false,
          "school": true,
          "store": true
        }
      ],
      "reqs": [
        "gym",
        "school",
        "store"
      ]
    },
    {
      "blocks": [
        {
          "gym": false,
          "office": true,
          "school": true,
          "store": false
        },
        {
          "gym": true,
          "office": false,
          "school": false,
          "store": false
        },
        {
          "gym": true,
          "office": false,
          "school": true,
          "store": false
        },
        {
          "gym": false,
          "office": false,
          "school": true,
          "store": false
        },
        {
          "gym": false,
          "office": false,
          "school": true,
          "store": true
        }
      ],
      "reqs": [
        "gym",
        "office",
        "school",
        "store"
      ]
    },
    {
      "blocks": [
        {
          "gym": false,
          "office": true,
          "school": true,
          "store": false
        },
        {
          "gym": true,
          "office": false,
          "school": false,
          "store": false
        },
        {
          "gym": true,
          "office": false,
          "school": true,
          "store": false
        },
        {
          "gym": false,
          "office": false,
          "school": true,
          "store": false
        },
        {
          "gym": false,
          "office": false,
          "school": true,
          "store": false
        },
        {
          "gym": false,
          "office": false,
          "school": true,
          "store": true
        }
      ],
      "reqs": [
        "gym",
        "office",
        "school",
        "store"
      ]
    },
    {
      "blocks": [
        {
          "foo": true,
          "gym": false,
          "kappa": false,
          "office": true,
          "school": true,
          "store": false
        },
        {
          "foo": true,
          "gym": true,
          "kappa": false,
          "office": false,
          "school": false,
          "store": false
        },
        {
          "foo": true,
          "gym": true,
          "kappa": false,
          "office": false,
          "school": true,
          "store": false
        },
        {
          "foo": true,
          "gym": false,
          "kappa": false,
          "office": false,
          "school": true,
          "store": false
        },
        {
          "foo": true,
          "gym": true,
          "kappa": false,
          "office": false,
          "school": true,
          "store": false
        },
        {
          "foo": true,
          "gym": false,
          "kappa": false,
          "office": false,
          "school": true,
          "store": true
        }
      ],
      "reqs": [
        "gym",
        "school",
        "store"
      ]
    },
    {
      "blocks": [
        {
          "gym": true,
          "school": true,
          "store": false
        },
        {
          "gym": false,
          "school": false,
          "store": false
        },
        {
          "gym": false,
          "school": true,
          "store": false
        },
        {
          "gym": false,
          "school": false,
          "store": false
        },
        {
          "gym": false,
          "school": false,
          "store": true
        },
        {
          "gym": true,
          "school": false,
          "store": false
        },
        {
          "gym": false,
          "school": false,
          "store": false
        },
        {
          "gym": false,
          "school": false,
          "store": false
        },
        {
          "gym": false,
          "school": false,
          "store": false
        },
        {
          "gym": false,
          "school": true,
          "store": false
        }
      ],
      "reqs": [
        "gym",
        "school",
        "store"
      ]
    },
    {
      "blocks": [
        {
          "gym": true,
          "pool": false,
          "school": true,
          "store": false
        },
        {
          "gym": false,
          "pool": false,
          "school": false,
          "store": false
        },
        {
          "gym": false,
          "pool": false,
          "school": true,
          "store": false
        },
        {
          "gym": false,
          "pool": false,
          "school": false,
          "store": false
        },
        {
          "gym": false,
          "pool": false,
          "school": false,
          "store": true
        },
        {
          "gym": true,
          "pool": false,
          "school": false,
          "store": false
        },
        {
          "gym": false,
          "pool": false,
          "school": false,
          "store": false
        },
        {
          "gym": false,
          "pool": false,
          "school": false,
          "store": false
        },
        {
          "gym": false,
          "pool": false,
          "school": false,
          "store": false
        },
        {
          "gym": false,
          "pool": false,
          "school": true,
          "store": false
        },
        {
          "gym": false,
          "pool": true,
          "school": false,
          "store": false
        }
      ],
      "reqs": [
        "gym",
        "pool",
        "school",
        "store"
      ]
    },
    {
      "blocks": [
        {
          "gym": true,
          "office": false,
          "pool": false,
          "school": true,
          "store": false
        },
        {
          "gym": false,
          "office": false,
          "pool": false,
          "school": false,
          "store": false
        },
        {
          "gym": false,
          "office": true,
          "pool": false,
          "school": true,
          "store": false
        },
        {
          "gym": false,
          "office": true,
          "pool": false,
          "school": false,
          "store": false
        },
        {
          "gym": false,
          "office": false,
          "pool": false,
          "school": false,
          "store": true
        },
        {
          "gym": true,
          "office": true,
          "pool": false,
          "school": false,
          "store": false
        },
        {
          "gym": false,
          "office": false,
          "pool": true,
          "school": false,
          "store": false
        },
        {
          "gym": false,
          "office": false,
          "pool": false,
          "school": false,
          "store": false
        },
        {
          "gym": false,
          "office": false,
          "pool": false,
          "school": false,
          "store": false
        },
        {
          "gym": false,
          "office": false,
          "pool": false,
          "school": true,
          "store": false
        },
        {
          "gym": false,
          "office": false,
          "pool": true,
          "school": false,
          "store": false
        }
      ],
      "reqs": [
        "gym",
        "pool",
        "school",
        "store"
      ]
    }
  ],
  "JSONAnswers": [
    [
      3,
      2,
      2,
      4,
      2,
      7,
      4
    ]
  ]
}