{
  "Summary": {
    "Name": "Longest Increasing Subsequence",
    "Category": "Dynamic Programming",
    "Difficulty": 5,
    "Available": true,
    "Metadata": {
      "number": 663,
      "timeOne": 0,
      "timeTwo": 3247,
      "url": "https://player.vimeo.com/video/224892487"
    }
  },
  "Prompt": "",
  "Hints": "Try building an array of the same length as the input array. At each index in this new array, store the length of the longest increasing subsequence ending with the number found at that index in the input array.\nCan you efficiently keep track of potential sequences in another array? Instead of storing entire sequences, try storing the indices of previous numbers. For example, at index 3 in this other array, store the index of the before-last number in the longest increasing subsequence ending with the number at index 3.\nYou can optimize your algorithm by taking a slightly different approach. Instead of building the array mentioned in Hint #1, try building an array whose indices represent lengths of subsequences and whose values represent the smallest numbers in the input array that can end a subsequence of a given length. Traverse the input array, and for each number determine what the length L of the longest increasing subsequence ending with that number is; store the position of that number at index L in the new array that you're building. Find a way to use binary search to build this array.\n",
  "SpaceTime": "O(nlogn) time | O(n) space - where n is the length of the input array\n",
  "PromptHTML": "<p>\n  Given a non-empty array of integers, write a function that returns the longest\n  strictly-increasing subsequence in the array.\n</p>\n<p>\n  A subsequence of an array is a set of numbers that aren't necessarily adjacent\n  in the array but that are in the same order as they appear in the array. For\n  instance, the numbers <span>[1, 3, 4]</span> form a subsequence of the array\n  <span>[1, 2, 3, 4]</span>, and so do the numbers <span>[2, 4]</span>. Note\n  that a single number in an array and the array itself are both valid\n  subsequences of the array.\n</p>\n<p>\n  You can assume that there will only be one longest increasing subsequence.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">array</span> = [5, 7, -24, 12, 10, 2, 3, 12, 5, 6, 35]\n</pre>\n<h3>Sample Output</h3>\n<pre>\n[-24, 2, 3, 5, 6, 35]\n</pre>\n",
  "Notes": "",
  "IsLongOutput": false,
  "Visualization": {
    "inputType": null,
    "outputType": null
  },
  "CustomInputLanguages": [
    "javascript",
    "cpp",
    "python",
    "java",
    "csharp",
    "go",
    "swift",
    "typescript"
  ],
  "CustomInputVars": [
    {
      "Name": "array",
      "Example": [
        5,
        7,
        -24,
        12,
        10,
        2,
        3,
        12,
        5,
        6,
        35
      ],
      "Schema": {
        "items": {
          "type": "integer"
        },
        "minItems": 1,
        "type": "array"
      }
    }
  ],
  "Resources": {
    "cpp": {
      "Language": "cpp",
      "StartingCode": "#include <vector>\nusing namespace std;\n\nvector<int> longestIncreasingSubsequence(vector<int> array) {\n  // Write your code here.\n  return {};\n}\n",
      "StartingTest": "vector<int> vector1S{-1};\nvector<int> vector2S{-1, 2};\nvector<int> vector3S{-1, 1, 2};\nvector<int> vector4S{1, 5, 10};\nvector<int> vector5S{-1, 0, 2, 4};\nvector<int> vector6S{3, 4};\nvector<int> vector7S{2, 12, 30, 31};\nvector<int> vector8S{-24, 2, 3, 5, 6, 35};\nvector<int> vector9S{10, 22, 33, 41, 60, 80};\nvector<int> vector10S{1, 2, 3, 4, 101};\n\nclass ProgramTest : public TestSuite {\npublic:\n  void Run() {\n\n    RunTest(\"Test Case 1\", []() {\n      vector<int> vector1{-1};\n      assert(longestIncreasingSubsequence(vector1) == vector1S);\n    });\n\n    RunTest(\"Test Case 2\", []() {\n      vector<int> vector2{-1, 2};\n      assert(longestIncreasingSubsequence(vector2) == vector2S);\n    });\n\n    RunTest(\"Test Case 3\", []() {\n      vector<int> vector3{-1, 2, 1, 2};\n      assert(longestIncreasingSubsequence(vector3) == vector3S);\n    });\n\n    RunTest(\"Test Case 4\", []() {\n      vector<int> vector4{1, 5, -1, 10};\n      assert(longestIncreasingSubsequence(vector4) == vector4S);\n    });\n\n    RunTest(\"Test Case 5\", []() {\n      vector<int> vector5{1, 5, -1, 0, 6, 2, 4};\n      assert(longestIncreasingSubsequence(vector5) == vector5S);\n    });\n\n    RunTest(\"Test Case 6\", []() {\n      vector<int> vector6{3, 4, -1};\n      assert(longestIncreasingSubsequence(vector6) == vector6S);\n    });\n\n    RunTest(\"Test Case 7\", []() {\n      vector<int> vector7{29, 2, 32, 12, 30, 31};\n      assert(longestIncreasingSubsequence(vector7) == vector7S);\n    });\n\n    RunTest(\"Test Case 8\", []() {\n      vector<int> vector8{5, 7, -24, 12, 10, 2, 3, 12, 5, 6, 35};\n      assert(longestIncreasingSubsequence(vector8) == vector8S);\n    });\n\n    RunTest(\"Test Case 9\", []() {\n      vector<int> vector9{10, 22, 9, 33, 21, 61, 41, 60, 80};\n      assert(longestIncreasingSubsequence(vector9) == vector9S);\n    });\n\n    RunTest(\"Test Case 10\", []() {\n      vector<int> vector10{100, 1, 2, 3, 4, 101};\n      assert(longestIncreasingSubsequence(vector10) == vector10S);\n    });\n  }\n};\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\npublic:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<int> expected{-24, 2, 3, 5, 6, 35};\n      vector<int> input{5, 7, -24, 12, 10, 2, 3, 12, 5, 6, 35};\n      assert(longestIncreasingSubsequence(input) == expected);\n    });\n  }\n};\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\n#include <vector>\n#include <climits>\nusing namespace std;\n\nvector<int> buildSequence(vector<int> array, vector<int> sequences,\n                          int currentIdx);\n\n// O(n^2) time | O(n) space\nvector<int> longestIncreasingSubsequence(vector<int> array) {\n  vector<int> sequences(array.size(), INT_MIN);\n  vector<int> lengths(array.size(), 1);\n  int maxLengthIdx = 0;\n  for (int i = 0; i < array.size(); i++) {\n    int currentNum = array[i];\n    for (int j = 0; j < i; j++) {\n      int otherNum = array[j];\n      if (otherNum < currentNum && lengths[j] + 1 >= lengths[i]) {\n        lengths[i] = lengths[j] + 1;\n        sequences[i] = j;\n      }\n    }\n    if (lengths[i] >= lengths[maxLengthIdx]) {\n      maxLengthIdx = i;\n    }\n  }\n  return buildSequence(array, sequences, maxLengthIdx);\n}\n\nvector<int> buildSequence(vector<int> array, vector<int> sequences,\n                          int currentIdx) {\n  vector<int> sequence;\n  while (currentIdx != INT_MIN) {\n    sequence.insert(sequence.begin(), array[currentIdx]);\n    currentIdx = sequences[currentIdx];\n  }\n  return sequence;\n}\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\n#include <vector>\n#include <climits>\nusing namespace std;\n\nint binarySearch(int startIdx, int endIdx, vector<int> indices,\n                 vector<int> array, int num);\nvector<int> buildSequence(vector<int> array, vector<int> sequences,\n                          int currentIdx);\n\n// O(nlogn) time | O(n) space\nvector<int> longestIncreasingSubsequence(vector<int> array) {\n  vector<int> sequences(array.size(), 0);\n  vector<int> indices(array.size() + 1, INT_MIN);\n  int length = 0;\n  for (int i = 0; i < array.size(); i++) {\n    int num = array[i];\n    int newLength = binarySearch(1, length, indices, array, num);\n    sequences[i] = indices[newLength - 1];\n    indices[newLength] = i;\n    length = max(length, newLength);\n  }\n  return buildSequence(array, sequences, indices[length]);\n}\n\nint binarySearch(int startIdx, int endIdx, vector<int> indices,\n                 vector<int> array, int num) {\n  if (startIdx > endIdx) {\n    return startIdx;\n  }\n  int middleIdx = (startIdx + endIdx) / 2;\n  if (array[indices[middleIdx]] < num) {\n    startIdx = middleIdx + 1;\n  } else {\n    endIdx = middleIdx - 1;\n  }\n  return binarySearch(startIdx, endIdx, indices, array, num);\n}\n\nvector<int> buildSequence(vector<int> array, vector<int> sequences,\n                          int currentIdx) {\n  vector<int> sequence;\n  while (currentIdx != INT_MIN) {\n    sequence.insert(sequence.begin(), array[currentIdx]);\n    currentIdx = sequences[currentIdx];\n  }\n  return sequence;\n}\n"
      ]
    },
    "csharp": {
      "Language": "csharp",
      "StartingCode": "using System.Collections.Generic;\n\npublic class Program {\n\tpublic static List<int> LongestIncreasingSubsequence(int[] array) {\n\t\t// Write your code here.\n\t\treturn null;\n\t}\n}\n",
      "StartingTest": "using System.Collections.Generic;\n\npublic class ProgramTest {\n\t[Test]\n\tpublic void TestCase1() {\n\t\tint[] expected = {-1};\n\t\tUtils.AssertTrue(compare(Program.LongestIncreasingSubsequence(new int[] {-1}),\n\t\t  expected));\n\t}\n\n\t[Test]\n\tpublic void TestCase2() {\n\t\tint[] expected = {-1, 2};\n\t\tUtils.AssertTrue(compare(Program.LongestIncreasingSubsequence(new int[] {-1, 2}),\n\t\t  expected));\n\t}\n\n\t[Test]\n\tpublic void TestCase3() {\n\t\tint[] expected = {-1, 1, 2};\n\t\tUtils.AssertTrue(compare(Program.LongestIncreasingSubsequence(new int[] {-1, 2, 1,\n\t\t                                                                         2}),\n\t\t  expected));\n\t}\n\n\t[Test]\n\tpublic void TestCase4() {\n\t\tint[] expected = {1, 5, 10};\n\t\tUtils.AssertTrue(compare(Program.LongestIncreasingSubsequence(new int[] {1, 5, -1,\n\t\t                                                                         10}),\n\t\t  expected));\n\t}\n\n\t[Test]\n\tpublic void TestCase5() {\n\t\tint[] expected = {-1, 0, 2, 4};\n\t\tUtils.AssertTrue(compare(Program.LongestIncreasingSubsequence(new int[] {1, 5, -1,\n\t\t                                                                         0, 6, 2,\n\t\t                                                                         4}),\n\t\t  expected));\n\t}\n\n\t[Test]\n\tpublic void TestCase6() {\n\t\tint[] expected = {3, 4};\n\t\tUtils.AssertTrue(compare(Program.LongestIncreasingSubsequence(new int[] {3, 4, -1}),\n\t\t  expected));\n\t}\n\n\t[Test]\n\tpublic void TestCase7() {\n\t\tint[] expected = {2, 12, 30, 31};\n\t\tUtils.AssertTrue(compare(Program.LongestIncreasingSubsequence(new int[] {29, 2, 32,\n\t\t                                                                         12, 30,\n\t\t                                                                         31}),\n\t\t  expected));\n\t}\n\n\t[Test]\n\tpublic void TestCase8() {\n\t\tint[] expected = {-24, 2, 3, 5, 6, 35};\n\t\tUtils.AssertTrue(compare(Program.LongestIncreasingSubsequence(new int[] {5, 7, -24,\n\t\t                                                                         12, 10, 2,\n\t\t                                                                         3, 12, 5,\n\t\t                                                                         6, 35}),\n\t\t  expected));\n\t}\n\n\t[Test]\n\tpublic void TestCase9() {\n\t\tint[] expected = {10, 22, 33, 41, 60, 80};\n\t\tUtils.AssertTrue(compare(Program.LongestIncreasingSubsequence(new int[] {10, 22, 9,\n\t\t                                                                         33, 21, 61,\n\t\t                                                                         41, 60,\n\t\t                                                                         80}),\n\t\t  expected));\n\t}\n\n\t[Test]\n\tpublic void TestCase10() {\n\t\tint[] expected = {1, 2, 3, 4, 101};\n\t\tUtils.AssertTrue(compare(Program.LongestIncreasingSubsequence(new int[] {100, 1, 2,\n\t\t                                                                         3, 4,\n\t\t                                                                         101}),\n\t\t  expected));\n\t}\n\n\tpublic static bool compare(List<int> arr1, int[] arr2) {\n\t\tif (arr1.Count != arr2.Length) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (int i = 0; i < arr1.Count; i++) {\n\t\t\tif (arr1[i] != arr2[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nusing System.Collections.Generic;\n\npublic class ProgramTest {\n\t[Test]\n\tpublic void TestCase1() {\n\t\tint[] expected = {-24, 2, 3, 5, 6, 35};\n\t\tUtils.AssertTrue(compare(Program.LongestIncreasingSubsequence(new int[] {5, 7, -24,\n\t\t                                                                         12, 10, 2,\n\t\t                                                                         3, 12, 5,\n\t\t                                                                         6, 35}),\n\t\t  expected));\n\t}\n\n\tpublic static bool compare(List<int> arr1, int[] arr2) {\n\t\tif (arr1.Count != arr2.Length) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (int i = 0; i < arr1.Count; i++) {\n\t\t\tif (arr1[i] != arr2[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nusing System;\nusing System.Collections.Generic;\n\npublic class Program {\n\t// O(n^2) time | O(n) space\n\tpublic static List<int> LongestIncreasingSubsequence(int[] array) {\n\t\tint[] sequences = new int[array.Length];\n\t\tArray.Fill(sequences, Int32.MinValue);\n\t\tint[] lengths = new int[array.Length];\n\t\tArray.Fill(lengths, 1);\n\t\tint maxLengthIdx = 0;\n\t\tfor (int i = 0; i < array.Length; i++) {\n\t\t\tint currentNum = array[i];\n\t\t\tfor (int j = 0; j < i; j++) {\n\t\t\t\tint otherNum = array[j];\n\t\t\t\tif (otherNum < currentNum && lengths[j] + 1 >= lengths[i]) {\n\t\t\t\t\tlengths[i] = lengths[j] + 1;\n\t\t\t\t\tsequences[i] = j;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (lengths[i] >= lengths[maxLengthIdx]) {\n\t\t\t\tmaxLengthIdx = i;\n\t\t\t}\n\t\t}\n\t\treturn buildSequence(array, sequences, maxLengthIdx);\n\t}\n\n\tpublic static List<int> buildSequence(int[] array, int[] sequences, int currentIdx) {\n\t\tList<int> sequence = new List<int>();\n\t\twhile (currentIdx != Int32.MinValue) {\n\t\t\tsequence.Insert(0, array[currentIdx]);\n\t\t\tcurrentIdx = sequences[currentIdx];\n\t\t}\n\t\treturn sequence;\n\t}\n}\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nusing System;\nusing System.Collections.Generic;\n\npublic class Program {\n\t// O(nlogn) time | O(n) space\n\tpublic static List<int> LongestIncreasingSubsequence(int[] array) {\n\t\tint[] sequences = new int[array.Length];\n\t\tint[] indices = new int[array.Length + 1];\n\t\tArray.Fill(indices, Int32.MinValue);\n\t\tint length = 0;\n\t\tfor (int i = 0; i < array.Length; i++) {\n\t\t\tint num = array[i];\n\t\t\tint newLength = BinarySearch(1, length, indices, array, num);\n\t\t\tsequences[i] = indices[newLength - 1];\n\t\t\tindices[newLength] = i;\n\t\t\tlength = Math.Max(length, newLength);\n\t\t}\n\t\treturn buildSequence(array, sequences, indices[length]);\n\t}\n\n\tpublic static int BinarySearch(int startIdx, int endIdx, int[] indices, int[] array,\n\t  int num) {\n\t\tif (startIdx > endIdx) {\n\t\t\treturn startIdx;\n\t\t}\n\t\tint middleIdx = (startIdx + endIdx) / 2;\n\t\tif (array[indices[middleIdx]] < num) {\n\t\t\tstartIdx = middleIdx + 1;\n\t\t} else {\n\t\t\tendIdx = middleIdx - 1;\n\t\t}\n\t\treturn BinarySearch(startIdx, endIdx, indices, array, num);\n\t}\n\n\tpublic static List<int> buildSequence(int[] array, int[] sequences, int currentIdx) {\n\t\tList<int> sequence = new List<int>();\n\t\twhile (currentIdx != Int32.MinValue) {\n\t\t\tsequence.Insert(0, array[currentIdx]);\n\t\t\tcurrentIdx = sequences[currentIdx];\n\t\t}\n\t\treturn sequence;\n\t}\n}\n"
      ]
    },
    "go": {
      "Language": "go",
      "StartingCode": "package main\n\nfunc LongestIncreasingSubsequence(input []int) []int {\n\t// Write your code here.\n\treturn nil\n}\n",
      "StartingTest": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\texpected := []int{-1}\n\tinput := []int{-1}\n\toutput := LongestIncreasingSubsequence(input)\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase2(t *TestCase) {\n\texpected := []int{-1, 2}\n\tinput := []int{-1, 2}\n\toutput := LongestIncreasingSubsequence(input)\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase3(t *TestCase) {\n\texpected := []int{-1, 1, 2}\n\tinput := []int{-1, 2, 1, 2}\n\toutput := LongestIncreasingSubsequence(input)\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase4(t *TestCase) {\n\texpected := []int{1, 5, 10}\n\tinput := []int{1, 5, -1, 10}\n\toutput := LongestIncreasingSubsequence(input)\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase5(t *TestCase) {\n\texpected := []int{-1, 0, 2, 4}\n\tinput := []int{1, 5, -1, 0, 6, 2, 4}\n\toutput := LongestIncreasingSubsequence(input)\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase6(t *TestCase) {\n\texpected := []int{3, 4}\n\tinput := []int{3, 4, -1}\n\toutput := LongestIncreasingSubsequence(input)\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase7(t *TestCase) {\n\texpected := []int{2, 12, 30, 31}\n\tinput := []int{29, 2, 32, 12, 30, 31}\n\toutput := LongestIncreasingSubsequence(input)\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase8(t *TestCase) {\n\texpected := []int{-24, 2, 3, 5, 6, 35}\n\tinput := []int{5, 7, -24, 12, 10, 2, 3, 12, 5, 6, 35}\n\toutput := LongestIncreasingSubsequence(input)\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase9(t *TestCase) {\n\texpected := []int{10, 22, 33, 41, 60, 80}\n\tinput := []int{10, 22, 9, 33, 21, 61, 41, 60, 80}\n\toutput := LongestIncreasingSubsequence(input)\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase10(t *TestCase) {\n\texpected := []int{1, 2, 3, 4, 101}\n\tinput := []int{100, 1, 2, 3, 4, 101}\n\toutput := LongestIncreasingSubsequence(input)\n\trequire.Equal(t, expected, output)\n}\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\texpected := []int{-24, 2, 3, 5, 6, 35}\n\tinput := []int{5, 7, -24, 12, 10, 2, 3, 12, 5, 6, 35}\n\toutput := LongestIncreasingSubsequence(input)\n\trequire.Equal(t, expected, output)\n}",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\npackage main\n\n// O(n^2) time | O(n) space\nfunc LongestIncreasingSubsequence(array []int) []int {\n\tsequences := make([]int, len(array))\n\tlengths := make([]int, len(array))\n\tfor i := range array {\n\t\tsequences[i] = -1\n\t\tlengths[i] = 1\n\t}\n\tfor i := range array {\n\t\tcurrentNum := array[i]\n\t\tfor j := 0; j < i; j++ {\n\t\t\totherNum := array[j]\n\t\t\tif otherNum < currentNum && lengths[j]+1 >= lengths[i] {\n\t\t\t\tlengths[i] = lengths[j] + 1\n\t\t\t\tsequences[i] = j\n\t\t\t}\n\t\t}\n\t}\n\tmaxLengthIndex := 0\n\tfor i := range array {\n\t\tif lengths[i] > lengths[maxLengthIndex] {\n\t\t\tmaxLengthIndex = i\n\t\t}\n\t}\n\treturn buildSequence(array, sequences, maxLengthIndex)\n}\n\nfunc buildSequence(array, sequences []int, index int) []int {\n\tout := []int{}\n\tfor index != -1 {\n\t\tout = append(out, array[index])\n\t\tindex = sequences[index]\n\t}\n\treverse(out)\n\treturn out\n}\n\nfunc reverse(numbers []int) {\n\tfor i, j := 0, len(numbers)-1; i < j; i, j = i+1, j-1 {\n\t\tnumbers[i], numbers[j] = numbers[j], numbers[i]\n\t}\n}\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\npackage main\n\n// O(nlogn) time | O(n) space\nfunc LongestIncreasingSubsequence(array []int) []int {\n\tsequences := make([]int, len(array))\n\tindices := make([]int, len(array)+1)\n\tfor i := range array {\n\t\tsequences[i] = -1\n\t\tindices[i] = -1\n\t}\n\tlength := 0\n\tfor i, num := range array {\n\t\tnewLength := binarySearch(1, length, indices, array, num)\n\t\tsequences[i] = indices[newLength-1]\n\t\tindices[newLength] = i\n\t\tlength = max(length, newLength)\n\t}\n\treturn buildSequence(array, sequences, indices[length])\n}\n\nfunc binarySearch(startIndex, endIndex int, indices, array []int, num int) int {\n\tif startIndex > endIndex {\n\t\treturn startIndex\n\t}\n\tmiddleIndex := (startIndex + endIndex) / 2\n\tif array[indices[middleIndex]] < num {\n\t\tstartIndex = middleIndex + 1\n\t} else {\n\t\tendIndex = middleIndex - 1\n\t}\n\treturn binarySearch(startIndex, endIndex, indices, array, num)\n}\n\nfunc buildSequence(array, sequences []int, index int) []int {\n\tout := []int{}\n\tfor index != -1 {\n\t\tout = append(out, array[index])\n\t\tindex = sequences[index]\n\t}\n\treverse(out)\n\treturn out\n}\n\nfunc max(arg int, rest ...int) int {\n\tfor _, num := range rest {\n\t\tif num > arg {\n\t\t\targ = num\n\t\t}\n\t}\n\treturn arg\n}\n\nfunc reverse(numbers []int) {\n\tfor i, j := 0, len(numbers)-1; i < j; i, j = i+1, j-1 {\n\t\tnumbers[i], numbers[j] = numbers[j], numbers[i]\n\t}\n}\n"
      ]
    },
    "java": {
      "Language": "java",
      "StartingCode": "import java.util.*;\n\nclass Program {\n  public static List<Integer> longestIncreasingSubsequence(int[] array) {\n    // Write your code here.\n    return null;\n  }\n}\n",
      "StartingTest": "import java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    int[] expected = {-1};\n    Utils.assertTrue(compare(Program.longestIncreasingSubsequence(new int[] {-1}), expected));\n  }\n\n  @Test\n  public void TestCase2() {\n    int[] expected = {-1, 2};\n    Utils.assertTrue(compare(Program.longestIncreasingSubsequence(new int[] {-1, 2}), expected));\n  }\n\n  @Test\n  public void TestCase3() {\n    int[] expected = {-1, 1, 2};\n    Utils.assertTrue(\n        compare(Program.longestIncreasingSubsequence(new int[] {-1, 2, 1, 2}), expected));\n  }\n\n  @Test\n  public void TestCase4() {\n    int[] expected = {1, 5, 10};\n    Utils.assertTrue(\n        compare(Program.longestIncreasingSubsequence(new int[] {1, 5, -1, 10}), expected));\n  }\n\n  @Test\n  public void TestCase5() {\n    int[] expected = {-1, 0, 2, 4};\n    Utils.assertTrue(\n        compare(Program.longestIncreasingSubsequence(new int[] {1, 5, -1, 0, 6, 2, 4}), expected));\n  }\n\n  @Test\n  public void TestCase6() {\n    int[] expected = {3, 4};\n    Utils.assertTrue(compare(Program.longestIncreasingSubsequence(new int[] {3, 4, -1}), expected));\n  }\n\n  @Test\n  public void TestCase7() {\n    int[] expected = {2, 12, 30, 31};\n    Utils.assertTrue(\n        compare(Program.longestIncreasingSubsequence(new int[] {29, 2, 32, 12, 30, 31}), expected));\n  }\n\n  @Test\n  public void TestCase8() {\n    int[] expected = {-24, 2, 3, 5, 6, 35};\n    Utils.assertTrue(\n        compare(\n            Program.longestIncreasingSubsequence(new int[] {5, 7, -24, 12, 10, 2, 3, 12, 5, 6, 35}),\n            expected));\n  }\n\n  @Test\n  public void TestCase9() {\n    int[] expected = {10, 22, 33, 41, 60, 80};\n    Utils.assertTrue(\n        compare(\n            Program.longestIncreasingSubsequence(new int[] {10, 22, 9, 33, 21, 61, 41, 60, 80}),\n            expected));\n  }\n\n  @Test\n  public void TestCase10() {\n    int[] expected = {1, 2, 3, 4, 101};\n    Utils.assertTrue(\n        compare(Program.longestIncreasingSubsequence(new int[] {100, 1, 2, 3, 4, 101}), expected));\n  }\n\n  public static boolean compare(List<Integer> arr1, int[] arr2) {\n    if (arr1.size() != arr2.length) {\n      return false;\n    }\n    for (int i = 0; i < arr1.size(); i++) {\n      if (arr1.get(i) != arr2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    int[] expected = {-24, 2, 3, 5, 6, 35};\n    Utils.assertTrue(\n        compare(\n            Program.longestIncreasingSubsequence(new int[] {5, 7, -24, 12, 10, 2, 3, 12, 5, 6, 35}),\n            expected));\n  }\n\n  public static boolean compare(List<Integer> arr1, int[] arr2) {\n    if (arr1.size() != arr2.length) {\n      return false;\n    }\n    for (int i = 0; i < arr1.size(); i++) {\n      if (arr1.get(i) != arr2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(n^2) time | O(n) space\n  public static List<Integer> longestIncreasingSubsequence(int[] array) {\n    int[] sequences = new int[array.length];\n    Arrays.fill(sequences, Integer.MIN_VALUE);\n    int[] lengths = new int[array.length];\n    Arrays.fill(lengths, 1);\n    int maxLengthIdx = 0;\n    for (int i = 0; i < array.length; i++) {\n      int currentNum = array[i];\n      for (int j = 0; j < i; j++) {\n        int otherNum = array[j];\n        if (otherNum < currentNum && lengths[j] + 1 >= lengths[i]) {\n          lengths[i] = lengths[j] + 1;\n          sequences[i] = j;\n        }\n      }\n      if (lengths[i] >= lengths[maxLengthIdx]) {\n        maxLengthIdx = i;\n      }\n    }\n    return buildSequence(array, sequences, maxLengthIdx);\n  }\n\n  public static List<Integer> buildSequence(int[] array, int[] sequences, int currentIdx) {\n    List<Integer> sequence = new ArrayList<Integer>();\n    while (currentIdx != Integer.MIN_VALUE) {\n      sequence.add(0, array[currentIdx]);\n      currentIdx = sequences[currentIdx];\n    }\n    return sequence;\n  }\n}\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(nlogn) time | O(n) space\n  public static List<Integer> longestIncreasingSubsequence(int[] array) {\n    int[] sequences = new int[array.length];\n    int[] indices = new int[array.length + 1];\n    Arrays.fill(indices, Integer.MIN_VALUE);\n    int length = 0;\n    for (int i = 0; i < array.length; i++) {\n      int num = array[i];\n      int newLength = binarySearch(1, length, indices, array, num);\n      sequences[i] = indices[newLength - 1];\n      indices[newLength] = i;\n      length = Math.max(length, newLength);\n    }\n    return buildSequence(array, sequences, indices[length]);\n  }\n\n  public static int binarySearch(int startIdx, int endIdx, int[] indices, int[] array, int num) {\n    if (startIdx > endIdx) {\n      return startIdx;\n    }\n    int middleIdx = (startIdx + endIdx) / 2;\n    if (array[indices[middleIdx]] < num) {\n      startIdx = middleIdx + 1;\n    } else {\n      endIdx = middleIdx - 1;\n    }\n    return binarySearch(startIdx, endIdx, indices, array, num);\n  }\n\n  public static List<Integer> buildSequence(int[] array, int[] sequences, int currentIdx) {\n    List<Integer> sequence = new ArrayList<Integer>();\n    while (currentIdx != Integer.MIN_VALUE) {\n      sequence.add(0, array[currentIdx]);\n      currentIdx = sequences[currentIdx];\n    }\n    return sequence;\n  }\n}\n"
      ]
    },
    "javascript": {
      "Language": "javascript",
      "StartingCode": "function longestIncreasingSubsequence(array) {\n  // Write your code here.\n}\n\n// Do not edit the line below.\nexports.longestIncreasingSubsequence = longestIncreasingSubsequence;\n",
      "StartingTest": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai.expect(program.longestIncreasingSubsequence([-1])).to.deep.equal([-1]);\n});\n\nit('Test Case #2', function () {\n  chai.expect(program.longestIncreasingSubsequence([-1, 2])).to.deep.equal([-1, 2]);\n});\n\nit('Test Case #3', function () {\n  chai.expect(program.longestIncreasingSubsequence([-1, 2, 1, 2])).to.deep.equal([-1, 1, 2]);\n});\n\nit('Test Case #4', function () {\n  chai.expect(program.longestIncreasingSubsequence([1, 5, -1, 10])).to.deep.equal([1, 5, 10]);\n});\n\nit('Test Case #5', function () {\n  chai.expect(program.longestIncreasingSubsequence([1, 5, -1, 0, 6, 2, 4])).to.deep.equal([-1, 0, 2, 4]);\n});\n\nit('Test Case #6', function () {\n  chai.expect(program.longestIncreasingSubsequence([3, 4, -1])).to.deep.equal([3, 4]);\n});\n\nit('Test Case #7', function () {\n  chai.expect(program.longestIncreasingSubsequence([29, 2, 32, 12, 30, 31])).to.deep.equal([2, 12, 30, 31]);\n});\n\nit('Test Case #8', function () {\n  chai\n    .expect(program.longestIncreasingSubsequence([5, 7, -24, 12, 10, 2, 3, 12, 5, 6, 35]))\n    .to.deep.equal([-24, 2, 3, 5, 6, 35]);\n});\n\nit('Test Case #9', function () {\n  chai\n    .expect(program.longestIncreasingSubsequence([10, 22, 9, 33, 21, 61, 41, 60, 80]))\n    .to.deep.equal([10, 22, 33, 41, 60, 80]);\n});\n\nit('Test Case #10', function () {\n  chai.expect(program.longestIncreasingSubsequence([100, 1, 2, 3, 4, 101])).to.deep.equal([1, 2, 3, 4, 101]);\n});\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai\n    .expect(program.longestIncreasingSubsequence([5, 7, -24, 12, 10, 2, 3, 12, 5, 6, 35]))\n    .to.deep.equal([-24, 2, 3, 5, 6, 35]);\n});\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\n// O(n^2) time | O(n) space\nfunction longestIncreasingSubsequence(array) {\n  const sequences = new Array(array.length);\n  const lengths = array.map(num => 1);\n  let maxLengthIdx = 0;\n  for (let i = 0; i < array.length; i++) {\n    const currentNum = array[i];\n    for (let j = 0; j < i; j++) {\n      const otherNum = array[j];\n      if (otherNum < currentNum && lengths[j] + 1 >= lengths[i]) {\n        lengths[i] = lengths[j] + 1;\n        sequences[i] = j;\n      }\n    }\n    if (lengths[i] >= lengths[maxLengthIdx]) maxLengthIdx = i;\n  }\n  return buildSequence(array, sequences, maxLengthIdx);\n}\n\nfunction buildSequence(array, sequences, currentIdx) {\n  const sequence = [];\n  while (currentIdx !== undefined) {\n    sequence.unshift(array[currentIdx]);\n    currentIdx = sequences[currentIdx];\n  }\n  return sequence;\n}\n\nexports.longestIncreasingSubsequence = longestIncreasingSubsequence;\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\n// O(nlogn) time | O(n) space\nfunction longestIncreasingSubsequence(array) {\n  const sequences = new Array(array.length);\n  const indices = new Array(array.length + 1);\n  let length = 0;\n  for (let i = 0; i < array.length; i++) {\n    const num = array[i];\n    const newLength = binarySearch(1, length, indices, array, num);\n    sequences[i] = indices[newLength - 1];\n    indices[newLength] = i;\n    length = Math.max(length, newLength);\n  }\n  return buildSequence(array, sequences, indices[length]);\n}\n\nfunction binarySearch(startIdx, endIdx, indices, array, num) {\n  if (startIdx > endIdx) return startIdx;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  if (array[indices[middleIdx]] < num) {\n    startIdx = middleIdx + 1;\n  } else {\n    endIdx = middleIdx - 1;\n  }\n  return binarySearch(startIdx, endIdx, indices, array, num);\n}\n\nfunction buildSequence(array, sequences, currentIdx) {\n  const sequence = [];\n  while (currentIdx !== undefined) {\n    sequence.unshift(array[currentIdx]);\n    currentIdx = sequences[currentIdx];\n  }\n  return sequence;\n}\n\nexports.longestIncreasingSubsequence = longestIncreasingSubsequence;\n"
      ]
    },
    "python": {
      "Language": "python",
      "StartingCode": "def longestIncreasingSubsequence(array):\n    # Write your code here.\n    pass\n",
      "StartingTest": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(program.longestIncreasingSubsequence([-1]), [-1])\n\n    def test_case_2(self):\n        self.assertEqual(program.longestIncreasingSubsequence([-1, 2]), [-1, 2])\n\n    def test_case_3(self):\n        self.assertEqual(program.longestIncreasingSubsequence([-1, 2, 1, 2]), [-1, 1, 2])\n\n    def test_case_4(self):\n        self.assertEqual(program.longestIncreasingSubsequence([1, 5, -1, 10]), [1, 5, 10])\n\n    def test_case_5(self):\n        self.assertEqual(program.longestIncreasingSubsequence([1, 5, -1, 0, 6, 2, 4]), [-1, 0, 2, 4])\n\n    def test_case_6(self):\n        self.assertEqual(program.longestIncreasingSubsequence([3, 4, -1]), [3, 4])\n\n    def test_case_7(self):\n        self.assertEqual(program.longestIncreasingSubsequence([29, 2, 32, 12, 30, 31]), [2, 12, 30, 31])\n\n    def test_case_8(self):\n        self.assertEqual(\n            program.longestIncreasingSubsequence([5, 7, -24, 12, 10, 2, 3, 12, 5, 6, 35]), [-24, 2, 3, 5, 6, 35]\n        )\n\n    def test_case_9(self):\n        self.assertEqual(\n            program.longestIncreasingSubsequence([10, 22, 9, 33, 21, 61, 41, 60, 80]), [10, 22, 33, 41, 60, 80]\n        )\n\n    def test_case_10(self):\n        self.assertEqual(program.longestIncreasingSubsequence([100, 1, 2, 3, 4, 101]), [1, 2, 3, 4, 101])\n",
      "SandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(\n            program.longestIncreasingSubsequence([5, 7, -24, 12, 10, 2, 3, 12, 5, 6, 35]), [-24, 2, 3, 5, 6, 35]\n        )\n",
      "Solutions": [
        "# Copyright © 2020 Code Complete. All rights reserved.\n\n# O(n^2) time | O(n) space\ndef longestIncreasingSubsequence(array):\n    sequences = [None for x in array]\n    lengths = [1 for x in array]\n    maxLengthIdx = 0\n    for i in range(len(array)):\n        currentNum = array[i]\n        for j in range(0, i):\n            otherNum = array[j]\n            if otherNum < currentNum and lengths[j] + 1 >= lengths[i]:\n                lengths[i] = lengths[j] + 1\n                sequences[i] = j\n        if lengths[i] >= lengths[maxLengthIdx]:\n            maxLengthIdx = i\n    return buildSequence(array, sequences, maxLengthIdx)\n\n\ndef buildSequence(array, sequences, currentIdx):\n    sequence = []\n    while currentIdx is not None:\n        sequence.append(array[currentIdx])\n        currentIdx = sequences[currentIdx]\n    return list(reversed(sequence))\n",
        "# Copyright © 2020 Code Complete. All rights reserved.\n\n# O(nlogn) time | O(n) space\ndef longestIncreasingSubsequence(array):\n    sequences = [None for x in array]\n    indices = [None for x in range(len(array) + 1)]\n    length = 0\n    for i, num in enumerate(array):\n        newLength = binarySearch(1, length, indices, array, num)\n        sequences[i] = indices[newLength - 1]\n        indices[newLength] = i\n        length = max(length, newLength)\n    return buildSequence(array, sequences, indices[length])\n\n\ndef binarySearch(startIdx, endIdx, indices, array, num):\n    if startIdx > endIdx:\n        return startIdx\n    middleIdx = (startIdx + endIdx) // 2\n    if array[indices[middleIdx]] < num:\n        startIdx = middleIdx + 1\n    else:\n        endIdx = middleIdx - 1\n    return binarySearch(startIdx, endIdx, indices, array, num)\n\n\ndef buildSequence(array, sequences, currentIdx):\n    sequence = []\n    while currentIdx is not None:\n        sequence.append(array[currentIdx])\n        currentIdx = sequences[currentIdx]\n    return list(reversed(sequence))\n"
      ]
    },
    "swift": {
      "Language": "swift",
      "StartingCode": "class Program {\n  func longestIncreasingSubsequence(_ array: [Int]) -> [Int] {\n    // Write your code here.\n    return []\n  }\n}\n",
      "StartingTest": "class ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      try assertEqual([-1], program.longestIncreasingSubsequence([-1]))\n    }\n    runTest(\"Test Case 2\") { () throws -> Void in\n      try assertEqual([-1, 2], program.longestIncreasingSubsequence([-1, 2]))\n    }\n    runTest(\"Test Case 3\") { () throws -> Void in\n      try assertEqual([-1, 1, 2], program.longestIncreasingSubsequence([-1, 2, 1, 2]))\n    }\n    runTest(\"Test Case 4\") { () throws -> Void in\n      try assertEqual([1, 5, 10], program.longestIncreasingSubsequence([1, 5, -1, 10]))\n    }\n    runTest(\"Test Case 5\") { () throws -> Void in\n      try assertEqual([-1, 0, 2, 4], program.longestIncreasingSubsequence([1, 5, -1, 0, 6, 2, 4]))\n    }\n    runTest(\"Test Case 6\") { () throws -> Void in\n      try assertEqual([3, 4], program.longestIncreasingSubsequence([3, 4, -1]))\n    }\n    runTest(\"Test Case 7\") { () throws -> Void in\n      try assertEqual([2, 12, 30, 31], program.longestIncreasingSubsequence([29, 2, 32, 12, 30, 31]))\n    }\n    runTest(\"Test Case 8\") { () throws -> Void in\n      try assertEqual([-24, 2, 3, 5, 6, 35], program.longestIncreasingSubsequence([5, 7, -24, 12, 10, 2, 3, 12, 5, 6, 35]))\n    }\n    runTest(\"Test Case 9\") { () throws -> Void in\n      try assertEqual([10, 22, 33, 41, 60, 80], program.longestIncreasingSubsequence([10, 22, 9, 33, 21, 61, 41, 60, 80]))\n    }\n    runTest(\"Test Case 10\") { () throws -> Void in\n      try assertEqual([1, 2, 3, 4, 101], program.longestIncreasingSubsequence([100, 1, 2, 3, 4, 101]))\n    }\n  }\n}\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      try assertEqual([-24, 2, 3, 5, 6, 35], program.longestIncreasingSubsequence([5, 7, -24, 12, 10, 2, 3, 12, 5, 6, 35]))\n    }\n  }\n}\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nclass Program {\n  // O(n^2) time | O(n) space\n  func longestIncreasingSubsequence(_ array: [Int]) -> [Int] {\n    var indexOfMaxLength: Int? = 0\n    var lengths = Array(repeating: 1, count: array.count)\n    var sequences: [Int?] = Array(repeating: nil, count: array.count)\n\n    for i in 0 ..< array.count {\n      let currentNumber = array[i]\n\n      for j in 0 ..< i {\n        let otherNumber = array[j]\n\n        if otherNumber < currentNumber, lengths[i] <= lengths[j] + 1 {\n          lengths[i] = lengths[j] + 1\n          sequences[i] = j\n        }\n      }\n\n      if lengths[i] > lengths[indexOfMaxLength!] {\n        indexOfMaxLength = i\n      }\n    }\n\n    return buildSequence(array, sequences, &indexOfMaxLength)\n  }\n\n  func buildSequence(_ array: [Int], _ sequences: [Int?], _ currentIndex: inout Int?) -> [Int] {\n    var sequence = [Int]()\n\n    while currentIndex != nil {\n      sequence.insert(array[currentIndex!], at: 0)\n      currentIndex = sequences[currentIndex!]\n    }\n\n    return sequence\n  }\n}\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nclass Program {\n  // O(nlogn) time | O(n) space\n  func longestIncreasingSubsequence(_ array: [Int]) -> [Int] {\n    var length = 0\n    var indices: [Int?] = Array(repeating: nil, count: array.count + 1)\n    var sequences: [Int?] = Array(repeating: nil, count: array.count)\n\n    for i in 0 ..< array.count {\n      var startIndex = 1\n      var endIndex = length\n      let number = array[i]\n      let newLength = binarySearch(&startIndex, &endIndex, indices, array, number)\n\n      indices[newLength] = i\n      sequences[i] = indices[newLength - 1]\n      length = max(length, newLength)\n    }\n\n    return buildSequence(array, sequences, &indices[length])\n  }\n\n  func binarySearch(_ startIndex: inout Int, _ endIndex: inout Int, _ indices: [Int?], _ array: [Int], _ number: Int) -> Int {\n    if startIndex > endIndex {\n      return startIndex\n    }\n\n    var middleIndex = Double(startIndex + endIndex) / 2\n    middleIndex = middleIndex.rounded(.down)\n    let intMiddle = Int(middleIndex)\n\n    if let index = indices[intMiddle] {\n      let numberToCompare = array[index]\n\n      if numberToCompare < number {\n        startIndex = intMiddle + 1\n      } else {\n        endIndex = intMiddle - 1\n      }\n    }\n\n    return binarySearch(&startIndex, &endIndex, indices, array, number)\n  }\n\n  func buildSequence(_ array: [Int], _ sequences: [Int?], _ currentIndex: inout Int?) -> [Int] {\n    var sequence = [Int]()\n\n    while currentIndex != nil {\n      sequence.insert(array[currentIndex!], at: 0)\n      currentIndex = sequences[currentIndex!]\n    }\n\n    return sequence\n  }\n}\n"
      ]
    },
    "typescript": {
      "Language": "typescript",
      "StartingCode": "export function longestIncreasingSubsequence(array: number[]) {\n  // Write your code here.\n  return [-1];\n}\n",
      "StartingTest": "",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  chai\n    .expect(program.longestIncreasingSubsequence([5, 7, -24, 12, 10, 2, 3, 12, 5, 6, 35]))\n    .to.deep.equal([-24, 2, 3, 5, 6, 35]);\n});\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\n// O(n^2) time | O(n) space\nexport function longestIncreasingSubsequence(array: number[]) {\n  const sequences: number[] = new Array(array.length);\n  const lengths = array.map(num => 1);\n  let maxLengthIdx = 0;\n  for (let i = 0; i < array.length; i++) {\n    const currentNum = array[i];\n    for (let j = 0; j < i; j++) {\n      const otherNum = array[j];\n      if (otherNum < currentNum && lengths[j] + 1 >= lengths[i]) {\n        lengths[i] = lengths[j] + 1;\n        sequences[i] = j;\n      }\n    }\n    if (lengths[i] >= lengths[maxLengthIdx]) maxLengthIdx = i;\n  }\n  return buildSequence(array, sequences, maxLengthIdx);\n}\n\nfunction buildSequence(array: number[], sequences: number[], currentIdx: number) {\n  const sequence: number[] = [];\n  while (currentIdx !== undefined) {\n    sequence.unshift(array[currentIdx]);\n    currentIdx = sequences[currentIdx];\n  }\n  return sequence;\n}\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\n// O(nlogn) time | O(n) space\nexport function longestIncreasingSubsequence(array: number[]) {\n  const sequences: number[] = new Array(array.length);\n  const indices: number[] = new Array(array.length + 1);\n  let length = 0;\n  for (let i = 0; i < array.length; i++) {\n    const num = array[i];\n    const newLength = binarySearch(1, length, indices, array, num);\n    sequences[i] = indices[newLength - 1];\n    indices[newLength] = i;\n    length = Math.max(length, newLength);\n  }\n  return buildSequence(array, sequences, indices[length]);\n}\n\nfunction binarySearch(startIdx: number, endIdx: number, indices: number[], array: number[], num: number): number {\n  if (startIdx > endIdx) return startIdx;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  if (array[indices[middleIdx]] < num) {\n    startIdx = middleIdx + 1;\n  } else {\n    endIdx = middleIdx - 1;\n  }\n  return binarySearch(startIdx, endIdx, indices, array, num);\n}\n\nfunction buildSequence(array: number[], sequences: number[], currentIdx: number) {\n  const sequence = [];\n  while (currentIdx !== undefined) {\n    sequence.unshift(array[currentIdx]);\n    currentIdx = sequences[currentIdx];\n  }\n  return sequence;\n}\n"
      ]
    }
  },
  "JSONTestLanguages": [
    "javascript",
    "cpp",
    "python",
    "java",
    "csharp",
    "go",
    "swift",
    "typescript"
  ],
  "JSONTests": [
    {
      "array": [
        5,
        7,
        -24,
        12,
        10,
        2,
        3,
        12,
        5,
        6,
        35
      ]
    },
    {
      "array": [
        -1
      ]
    },
    {
      "array": [
        -1,
        2
      ]
    },
    {
      "array": [
        -1,
        2,
        1,
        2
      ]
    },
    {
      "array": [
        1,
        5,
        -1,
        10
      ]
    },
    {
      "array": [
        1,
        5,
        -1,
        0,
        6,
        2,
        4
      ]
    },
    {
      "array": [
        3,
        4,
        -1
      ]
    },
    {
      "array": [
        29,
        2,
        32,
        12,
        30,
        31
      ]
    },
    {
      "array": [
        10,
        22,
        9,
        33,
        21,
        61,
        41,
        60,
        80
      ]
    },
    {
      "array": [
        100,
        1,
        2,
        3,
        4,
        101
      ]
    }
  ],
  "JSONAnswers": [
    [
      [
        -24,
        2,
        3,
        5,
        6,
        35
      ],
      [
        -1
      ],
      [
        -1,
        2
      ],
      [
        -1,
        1,
        2
      ],
      [
        1,
        5,
        10
      ],
      [
        -1,
        0,
        2,
        4
      ],
      [
        3,
        4
      ],
      [
        2,
        12,
        30,
        31
      ],
      [
        10,
        22,
        33,
        41,
        60,
        80
      ],
      [
        1,
        2,
        3,
        4,
        101
      ]
    ]
  ]
}