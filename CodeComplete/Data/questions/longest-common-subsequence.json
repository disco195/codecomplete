{
  "Summary": {
    "Name": "Longest Common Subsequence",
    "Category": "Dynamic Programming",
    "Difficulty": 3,
    "Available": true,
    "Metadata": {
      "number": 656,
      "timeOne": 0,
      "timeTwo": 1894,
      "url": "https://player.vimeo.com/video/224893526"
    }
  },
  "Prompt": "",
  "Hints": "Try building a two-dimensional array of the longest common subsequences of substring pairs of the input strings. Let the rows of the array represent substrings of the second input string str2. Let the first row represent the empty string. Let each row i thereafter represent the substrings of str2 from 0 to i, with i excluded. Let the columns similarly represent the first input string str1.\nBuild up the array mentioned in Hint #1 one row at a time. In other words, find the longest common subsequences for all the substrings of str1 represented by the columns and the empty string represented by the first row, then for all the substrings of str1 represented by the columns and the first letter of str2 represented by the second row, etc., until you compare both full strings. Find a formula that relates the longest common subsequence at any given point to previous subsequences.\nDo you really need to build and store subsequences at each point in the two-dimensional array mentioned in Hint #1? Try storing booleans to determine whether or not a letter at a given point in the two-dimensional array is part of the longest common subsequence as well as pointers to determine what should come before this letter in the final subsequence. Use these pointers to backtrack your way through the array and to build up the longest common subsequence at the end of your algorithm.\n",
  "SpaceTime": "O(nm) time | O(nm) space - where n and m are the lengths of the two input strings\n",
  "PromptHTML": "<p>\n  Write a function that takes in two strings and returns their longest common\n  subsequence.\n</p>\n<p>\n  A subsequence of a string is a set of characters that aren't necessarily\n  adjacent in the string but that are in the same order as they appear in the\n  string. For instance, the characters <span>[\"a\", \"c\", \"d\"]</span> form a\n  subsequence of the string <span>\"abcd\"</span>, and so do the characters\n  <span>[\"b\", \"d\"]</span>. Note that a single character in a string and the\n  string itself are both valid subsequences of the string.\n</p>\n<p>\n  You can assume that there will only be one longest common subsequence.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">str1</span> = \"ZXVVYZW\"\n<span class=\"CodeEditor-promptParameter\">str2</span> = \"XKYKZPW\"\n</pre>\n<h3>Sample Output</h3>\n<pre>\n[\"X\", \"Y\", \"Z\", \"W\"]\n</pre>\n",
  "Notes": "",
  "IsLongOutput": false,
  "Visualization": {
    "inputType": null,
    "outputType": null
  },
  "CustomInputLanguages": [
    "javascript",
    "cpp",
    "python",
    "java",
    "csharp",
    "go",
    "swift",
    "typescript"
  ],
  "CustomInputVars": [
    {
      "Name": "str1",
      "Example": "ZXVVYZW",
      "Schema": {
        "type": "string"
      }
    },
    {
      "Name": "str2",
      "Example": "XKYKZPW",
      "Schema": {
        "type": "string"
      }
    }
  ],
  "Resources": {
    "cpp": {
      "Language": "cpp",
      "StartingCode": "#include <vector>\nusing namespace std;\n\nvector<char> longestCommonSubsequence(string str1, string str2) {\n  // Write your code here.\n  return {};\n}\n",
      "StartingTest": "class ProgramTest : public TestSuite {\npublic:\n  void Run() {\n\n    RunTest(\"Test Case 1\", []() {\n      vector<char> vector1S;\n      assert(longestCommonSubsequence(\"\", \"\") == vector1S);\n    });\n\n    RunTest(\"Test Case 2\", []() {\n      vector<char> vector2S;\n      assert(longestCommonSubsequence(\"\", \"ABCDEFG\") == vector2S);\n    });\n\n    RunTest(\"Test Case 3\", []() {\n      vector<char> vector3S;\n      assert(longestCommonSubsequence(\"ABCDEFG\", \"\") == vector3S);\n    });\n\n    RunTest(\"Test Case 4\", []() {\n      vector<char> vector4S{'A', 'B', 'C', 'D', 'E', 'F', 'G'};\n      assert(longestCommonSubsequence(\"ABCDEFG\", \"ABCDEFG\") == vector4S);\n    });\n\n    RunTest(\"Test Case 5\", []() {\n      vector<char> vector5S{'A', 'E'};\n      assert(longestCommonSubsequence(\"ABCDEFG\", \"APPLES\") == vector5S);\n    });\n\n    RunTest(\"Test Case 6\", []() {\n      vector<char> vector6S{'n', 't'};\n      assert(longestCommonSubsequence(\"clement\", \"antoine\") == vector6S);\n    });\n\n    RunTest(\"Test Case 7\", []() {\n      vector<char> vector7S{'X', 'Y', 'Z', 'W'};\n      assert(longestCommonSubsequence(\"ZXVVYZW\", \"XKYKZPW\") == vector7S);\n    });\n\n    RunTest(\"Test Case 8\", []() {\n      vector<char> vector8S{'8', '4', '2'};\n      assert(longestCommonSubsequence(\n                 \"8111111111111111142\",\n                 \"222222222822222222222222222222433333333332\") == vector8S);\n    });\n\n    RunTest(\"Test Case 9\", []() {\n      vector<char> vector9S{'C', 'D', 'E', 'G', 'H', 'J', 'K', 'L', 'W'};\n      assert(longestCommonSubsequence(\n                 \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n                 \"CCCDDEGDHAGKGLWAJWKJAWGKGWJAKLGGWAFWLFFWAGJWKAG\") ==\n             vector9S);\n    });\n\n    RunTest(\"Test Case 10\", []() {\n      vector<char> vector10S{'C', 'D', 'E', 'G', 'H', 'J',\n                             'K', 'L', 'T', 'U', 'V'};\n      assert(longestCommonSubsequence(\n                 \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n                 \"CCCDDEGDHAGKGLWAJWKJAWGKGWJAKLGGWAFWLFFWAGJWKAGTUV\") ==\n             vector10S);\n    });\n  }\n};\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\npublic:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<char> expected{'X', 'Y', 'Z', 'W'};\n      assert(longestCommonSubsequence(\"ZXVVYZW\", \"XKYKZPW\") == expected);\n    });\n  }\n};\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\n#include <vector>\nusing namespace std;\n\n// O(nm*min(n, m)) time | O(nm*min(n, m)) space\nvector<char> longestCommonSubsequence(string str1, string str2) {\n  vector<vector<vector<char>>> lcs;\n  for (int i = 0; i < str2.length() + 1; i++) {\n    lcs.push_back(vector<vector<char>>());\n    for (int j = 0; j < str1.length() + 1; j++) {\n      lcs[i].push_back(vector<char>());\n    }\n  }\n  for (int i = 1; i < str2.length() + 1; i++) {\n    for (int j = 1; j < str1.length() + 1; j++) {\n      if (str2[i - 1] == str1[j - 1]) {\n        vector<char> copy = lcs[i - 1][j - 1];\n        copy.push_back(str2[i - 1]);\n        lcs[i][j] = copy;\n      } else {\n        lcs[i][j] = lcs[i - 1][j].size() > lcs[i][j - 1].size() ? lcs[i - 1][j]\n                                                                : lcs[i][j - 1];\n      }\n    }\n  }\n  return lcs[str2.length()][str1.length()];\n}\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\n#include <vector>\nusing namespace std;\n\n// O(nm*min(n, m)) time | O((min(n, m))^2) space\nvector<char> longestCommonSubsequence(string str1, string str2) {\n  string small = str1.length() < str2.length() ? str1 : str2;\n  string big = str1.length() >= str2.length() ? str1 : str2;\n  vector<vector<char>> evenLcs;\n  vector<vector<char>> oddLcs;\n  for (int i = 0; i < small.length() + 1; i++) {\n    evenLcs.push_back(vector<char>());\n  }\n  for (int i = 0; i < small.length() + 1; i++) {\n    oddLcs.push_back(vector<char>());\n  }\n  for (int i = 1; i < big.length() + 1; i++) {\n    vector<vector<char>> *currentLcs;\n    vector<vector<char>> *previousLcs;\n    if (i % 2 == 1) {\n      currentLcs = &oddLcs;\n      previousLcs = &evenLcs;\n    } else {\n      currentLcs = &evenLcs;\n      previousLcs = &oddLcs;\n    }\n    for (int j = 1; j < small.length() + 1; j++) {\n      if (big[i - 1] == small[j - 1]) {\n        vector<char> copy = previousLcs->at(j - 1);\n        copy.push_back(big[i - 1]);\n        currentLcs->at(j) = copy;\n      } else {\n        currentLcs->at(j) =\n            previousLcs->at(j).size() > currentLcs->at(j - 1).size()\n                ? previousLcs->at(j)\n                : currentLcs->at(j - 1);\n      }\n    }\n  }\n  return big.length() % 2 == 0 ? evenLcs[small.length()]\n                               : oddLcs[small.length()];\n}\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\n#include <vector>\nusing namespace std;\n\nvector<char> buildSequence(vector<vector<vector<int>>> lcs);\n\n// O(nm) time | O(nm) space\nvector<char> longestCommonSubsequence(string str1, string str2) {\n  vector<vector<vector<int>>> lcs(\n      str2.length() + 1,\n      vector<vector<int>>(str1.length() + 1, vector<int>(4, 0)));\n  for (int i = 1; i < str2.length() + 1; i++) {\n    for (int j = 1; j < str1.length() + 1; j++) {\n      if (str2[i - 1] == str1[j - 1]) {\n        lcs[i][j] = {str2[i - 1], lcs[i - 1][j - 1][1] + 1, i - 1, j - 1};\n      } else {\n        if (lcs[i - 1][j][1] > lcs[i][j - 1][1]) {\n          lcs[i][j] = {-1, lcs[i - 1][j][1], i - 1, j};\n        } else {\n          lcs[i][j] = {-1, lcs[i][j - 1][1], i, j - 1};\n        }\n      }\n    }\n  }\n  return buildSequence(lcs);\n}\n\nvector<char> buildSequence(vector<vector<vector<int>>> lcs) {\n  vector<char> sequence;\n  int i = lcs.size() - 1;\n  int j = lcs[0].size() - 1;\n  while (i != 0 && j != 0) {\n    vector<int> currentEntry = lcs[i][j];\n    if (currentEntry[0] != -1) {\n      sequence.insert(sequence.begin(), currentEntry[0]);\n    }\n    i = currentEntry[2];\n    j = currentEntry[3];\n  }\n  return sequence;\n}\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\n#include <vector>\nusing namespace std;\n\nvector<char> buildSequence(vector<vector<int>> lengths, string str);\n\n// O(nm) time | O(nm) space\nvector<char> longestCommonSubsequence(string str1, string str2) {\n  vector<vector<int>> lengths(str2.length() + 1,\n                              vector<int>(str1.length() + 1, 0));\n  for (int i = 1; i < str2.length() + 1; i++) {\n    for (int j = 1; j < str1.length() + 1; j++) {\n      if (str2[i - 1] == str1[j - 1]) {\n        lengths[i][j] = lengths[i - 1][j - 1] + 1;\n      } else {\n        lengths[i][j] = max(lengths[i - 1][j], lengths[i][j - 1]);\n      }\n    }\n  }\n  return buildSequence(lengths, str1);\n}\n\nvector<char> buildSequence(vector<vector<int>> lengths, string str) {\n  vector<char> sequence;\n  int i = lengths.size() - 1;\n  int j = lengths[0].size() - 1;\n  while (i != 0 && j != 0) {\n    if (lengths[i][j] == lengths[i - 1][j]) {\n      i--;\n    } else if (lengths[i][j] == lengths[i][j - 1]) {\n      j--;\n    } else {\n      sequence.insert(sequence.begin(), str[j - 1]);\n      i--;\n      j--;\n    }\n  }\n  return sequence;\n}\n"
      ]
    },
    "csharp": {
      "Language": "csharp",
      "StartingCode": "using System.Collections.Generic;\n\npublic class Program {\n\tpublic static List<char> LongestCommonSubsequence(string str1, string str2) {\n\t\t// Write your code here.\n\t\treturn null;\n\t}\n}\n",
      "StartingTest": "using System.Collections.Generic;\n\npublic class ProgramTest {\n\t[Test]\n\tpublic void TestCase1() {\n\t\tchar[] expected = {};\n\t\tUtils.AssertTrue(compare(Program.LongestCommonSubsequence(\"\", \"\"), expected));\n\t}\n\n\t[Test]\n\tpublic void TestCase2() {\n\t\tchar[] expected = {};\n\t\tUtils.AssertTrue(compare(Program.LongestCommonSubsequence(\"\", \"ABCDEFG\"),\n\t\t  expected));\n\t}\n\n\t[Test]\n\tpublic void TestCase3() {\n\t\tchar[] expected = {};\n\t\tUtils.AssertTrue(compare(Program.LongestCommonSubsequence(\"ABCDEFG\", \"\"),\n\t\t  expected));\n\t}\n\n\t[Test]\n\tpublic void TestCase4() {\n\t\tchar[] expected = {'A', 'B', 'C', 'D', 'E', 'F', 'G'};\n\t\tUtils.AssertTrue(compare(Program.LongestCommonSubsequence(\"ABCDEFG\", \"ABCDEFG\"),\n\t\t  expected));\n\t}\n\n\t[Test]\n\tpublic void TestCase5() {\n\t\tchar[] expected = {'A', 'E'};\n\t\tUtils.AssertTrue(compare(Program.LongestCommonSubsequence(\"ABCDEFG\", \"APPLES\"),\n\t\t  expected));\n\t}\n\n\t[Test]\n\tpublic void TestCase6() {\n\t\tchar[] expected = {'n', 't'};\n\t\tUtils.AssertTrue(compare(Program.LongestCommonSubsequence(\"clement\", \"antoine\"),\n\t\t  expected));\n\t}\n\n\t[Test]\n\tpublic void TestCase7() {\n\t\tchar[] expected = {'X', 'Y', 'Z', 'W'};\n\t\tUtils.AssertTrue(compare(Program.LongestCommonSubsequence(\"ZXVVYZW\", \"XKYKZPW\"),\n\t\t  expected));\n\t}\n\n\t[Test]\n\tpublic void TestCase8() {\n\t\tchar[] expected = {'8', '4', '2'};\n\t\tUtils.AssertTrue(compare(Program.LongestCommonSubsequence(\"8111111111111111142\",\n\t\t  \"222222222822222222222222222222433333333332\"),\n\t\t  expected));\n\t}\n\n\t[Test]\n\tpublic void TestCase9() {\n\t\tchar[] expected = {'C', 'D', 'E', 'G', 'H', 'J', 'K', 'L', 'W'};\n\t\tUtils.AssertTrue(compare(Program.LongestCommonSubsequence(\n\t\t\t  \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n\t\t\t  \"CCCDDEGDHAGKGLWAJWKJAWGKGWJAKLGGWAFWLFFWAGJWKAG\"),\n\t\t  expected));\n\t}\n\n\t[Test]\n\tpublic void TestCase10() {\n\t\tchar[] expected = {'C', 'D', 'E', 'G', 'H', 'J', 'K', 'L', 'T', 'U', 'V'};\n\t\tUtils.AssertTrue(compare(Program.LongestCommonSubsequence(\n\t\t\t  \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n\t\t\t  \"CCCDDEGDHAGKGLWAJWKJAWGKGWJAKLGGWAFWLFFWAGJWKAGTUV\"),\n\t\t  expected));\n\t}\n\n\tprivate static bool compare(List<char> arr1, char[] arr2) {\n\t\tif (arr1.Count != arr2.Length) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (int i = 0; i < arr1.Count; i++) {\n\t\t\tif (arr1[i] != arr2[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nusing System.Collections.Generic;\n\npublic class ProgramTest {\n\t[Test]\n\tpublic void TestCase1() {\n\t\tchar[] expected = {'X', 'Y', 'Z', 'W'};\n\t\tUtils.AssertTrue(compare(Program.LongestCommonSubsequence(\"ZXVVYZW\", \"XKYKZPW\"),\n\t\t  expected));\n\t}\n\n\tprivate static bool compare(List<char> arr1, char[] arr2) {\n\t\tif (arr1.Count != arr2.Length) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (int i = 0; i < arr1.Count; i++) {\n\t\t\tif (arr1[i] != arr2[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nusing System.Collections.Generic;\n\npublic class Program {\n\t// O(nm*min(n, m)) time | O(nm*min(n, m)) space\n\tpublic static List<char> LongestCommonSubsequence(string str1, string str2) {\n\t\tList<List<List<char> > > lcs = new List<List<List<char> > >();\n\t\tfor (int i = 0; i < str2.Length + 1; i++) {\n\t\t\tlcs.Add(new List<List<char> >());\n\t\t\tfor (int j = 0; j < str1.Length + 1; j++) {\n\t\t\t\tlcs[i].Add(new List<char>());\n\t\t\t}\n\t\t}\n\t\tfor (int i = 1; i < str2.Length + 1; i++) {\n\t\t\tfor (int j = 1; j < str1.Length + 1; j++) {\n\t\t\t\tif (str2[i - 1] == str1[j - 1]) {\n\t\t\t\t\tList<char> copy = new List<char>(lcs[i - 1][j - 1]);\n\t\t\t\t\tlcs[i][j] =  copy;\n\t\t\t\t\tlcs[i][j].Add(str2[i - 1]);\n\t\t\t\t} else {\n\t\t\t\t\tif (lcs[i - 1][j].Count > lcs[i][j - 1].Count) {\n\t\t\t\t\t\tlcs[i][j] =  lcs[i - 1][j];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlcs[i][j] =  lcs[i][j - 1];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn lcs[str2.Length][str1.Length];\n\t}\n}\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nusing System.Collections.Generic;\n\npublic class Program {\n\t// O(nm*min(n, m)) time | O((min(n, m))^2) space\n\tpublic static List<char> LongestCommonSubsequence(string str1, string str2) {\n\t\tstring small = str1.Length < str2.Length ? str1 : str2;\n\t\tstring big = str1.Length >= str2.Length ? str1 : str2;\n\t\tList<List<char> > evenLcs = new List<List<char> >();\n\t\tList<List<char> > oddLcs = new List<List<char> >();\n\t\tfor (int i = 0; i < small.Length + 1; i++) {\n\t\t\tevenLcs.Add(new List<char>());\n\t\t}\n\t\tfor (int i = 0; i < small.Length + 1; i++) {\n\t\t\toddLcs.Add(new List<char>());\n\t\t}\n\t\tfor (int i = 1; i < big.Length + 1; i++) {\n\t\t\tList<List<char> > currentLcs;\n\t\t\tList<List<char> > previousLcs;\n\t\t\tif (i % 2 == 1) {\n\t\t\t\tcurrentLcs = oddLcs;\n\t\t\t\tpreviousLcs = evenLcs;\n\t\t\t} else {\n\t\t\t\tcurrentLcs = evenLcs;\n\t\t\t\tpreviousLcs = oddLcs;\n\t\t\t}\n\t\t\tfor (int j = 1; j < small.Length + 1; j++) {\n\t\t\t\tif (big[i - 1] == small[j - 1]) {\n\t\t\t\t\tList<char> copy = new List<char>(previousLcs[j - 1]);\n\t\t\t\t\tcurrentLcs[j] =  copy;\n\t\t\t\t\tcurrentLcs[j].Add(big[i - 1]);\n\t\t\t\t} else {\n\t\t\t\t\tif (previousLcs[j].Count > currentLcs[j - 1].Count) {\n\t\t\t\t\t\tcurrentLcs[j] =  previousLcs[j];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcurrentLcs[j] =  currentLcs[j - 1];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn big.Length % 2 == 0 ? evenLcs[small.Length] : oddLcs[small.Length];\n\t}\n}\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nusing System.Collections.Generic;\n\npublic class Program {\n\t// O(nm) time | O(nm) space\n\tpublic static List<char> LongestCommonSubsequence(string str1, string str2) {\n\t\tint[,][] lcs = new int[str2.Length + 1,str1.Length + 1][];\n\t\tfor (int i = 0; i < str2.Length + 1; i++) {\n\t\t\tfor (int j = 0; j < str1.Length + 1; j++) {\n\t\t\t\tlcs[i,j] = new int[] {0, 0, 0, 0};\n\t\t\t}\n\t\t}\n\t\tfor (int i = 1; i < str2.Length + 1; i++) {\n\t\t\tfor (int j = 1; j < str1.Length + 1; j++) {\n\t\t\t\tif (str2[i - 1] == str1[j - 1]) {\n\t\t\t\t\tint[] newEntry =\n\t\t\t\t\t{(int)str2[i - 1], lcs[i - 1,j - 1][1] + 1, i - 1, j - 1};\n\t\t\t\t\tlcs[i,j] = newEntry;\n\t\t\t\t} else {\n\t\t\t\t\tif (lcs[i - 1,j][1] > lcs[i,j - 1][1]) {\n\t\t\t\t\t\tint[] newEntry = {-1, lcs[i - 1,j][1], i - 1, j};\n\t\t\t\t\t\tlcs[i,j] = newEntry;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tint[] newEntry = {-1, lcs[i,j - 1][1], i, j - 1};\n\t\t\t\t\t\tlcs[i,j] = newEntry;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn buildSequence(lcs);\n\t}\n\n\tpublic static List<char> buildSequence(int[,][] lcs) {\n\t\tList<char> sequence = new List<char>();\n\t\tint i = lcs.GetLength(0) - 1;\n\t\tint j = lcs.GetLength(1) - 1;\n\t\twhile (i != 0 && j != 0) {\n\t\t\tint[] currentEntry = lcs[i,j];\n\t\t\tif (currentEntry[0] != -1) {\n\t\t\t\tsequence.Insert(0, (char)currentEntry[0]);\n\t\t\t}\n\t\t\ti = currentEntry[2];\n\t\t\tj = currentEntry[3];\n\t\t}\n\t\treturn sequence;\n\t}\n}\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nusing System;\nusing System.Collections.Generic;\n\npublic class Program {\n\t// O(nm) time | O(nm) space\n\tpublic static List<char> LongestCommonSubsequence(string str1, string str2) {\n\t\tint[,] lengths = new int[str2.Length + 1,str1.Length + 1];\n\t\tfor (int i = 1; i < str2.Length + 1; i++) {\n\t\t\tfor (int j = 1; j < str1.Length + 1; j++) {\n\t\t\t\tif (str2[i - 1] == str1[j - 1]) {\n\t\t\t\t\tlengths[i,j] = lengths[i - 1,j - 1] + 1;\n\t\t\t\t} else {\n\t\t\t\t\tlengths[i,j] = Math.Max(lengths[i - 1,j], lengths[i,j - 1]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn buildSequence(lengths, str1);\n\t}\n\n\tpublic static List<char> buildSequence(int[,] lengths, string str) {\n\t\tList<char> sequence = new List<char>();\n\t\tint i = lengths.GetLength(0) - 1;\n\t\tint j = lengths.GetLength(1) - 1;\n\t\twhile (i != 0 && j != 0) {\n\t\t\tif (lengths[i,j] == lengths[i - 1,j]) {\n\t\t\t\ti--;\n\t\t\t} else if (lengths[i,j] == lengths[i,j - 1]) {\n\t\t\t\tj--;\n\t\t\t} else {\n\t\t\t\tsequence.Insert(0, str[j - 1]);\n\t\t\t\ti--;\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t\treturn sequence;\n\t}\n}\n"
      ]
    },
    "go": {
      "Language": "go",
      "StartingCode": "package main\n\n// O(nm*min(n, m)) time | O(nm*min(n, m)) space\nfunc LongestCommonSubsequence(s1 string, s2 string) string {\n\t// Write your code here.\n\treturn \"\"\n}\n",
      "StartingTest": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\texpected := \"\"\n\toutput := LongestCommonSubsequence(\"\", \"\")\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase2(t *TestCase) {\n\texpected := \"\"\n\toutput := LongestCommonSubsequence(\"\", \"ABCDEFG\")\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase3(t *TestCase) {\n\texpected := \"\"\n\toutput := LongestCommonSubsequence(\"ABCDEFG\", \"\")\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase4(t *TestCase) {\n\texpected := \"ABCDEFG\"\n\toutput := LongestCommonSubsequence(\"ABCDEFG\", \"ABCDEFG\")\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase5(t *TestCase) {\n\texpected := \"AE\"\n\toutput := LongestCommonSubsequence(\"ABCDEFG\", \"APPLES\")\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase6(t *TestCase) {\n\texpected := \"nt\"\n\toutput := LongestCommonSubsequence(\"clement\", \"antoine\")\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase7(t *TestCase) {\n\texpected := \"XYZW\"\n\toutput := LongestCommonSubsequence(\"ZXVVYZW\", \"XKYKZPW\")\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase8(t *TestCase) {\n\texpected := \"842\"\n\toutput := LongestCommonSubsequence(\"8111111111111111142\", \"222222222822222222222222222222433333333332\")\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase9(t *TestCase) {\n\texpected := \"CDEGHJKLW\"\n\toutput := LongestCommonSubsequence(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", \"CCCDDEGDHAGKGLWAJWKJAWGKGWJAKLGGWAFWLFFWAGJWKAG\")\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase10(t *TestCase) {\n\texpected := \"CDEGHJKLTUV\"\n\toutput := LongestCommonSubsequence(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", \"CCCDDEGDHAGKGLWAJWKJAWGKGWJAKLGGWAFWLFFWAGJWKAGTUV\")\n\trequire.Equal(t, expected, output)\n}\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\texpected := \"XYZW\"\n\toutput := LongestCommonSubsequence(\"ZXVVYZW\", \"XKYKZPW\")\n\trequire.Equal(t, expected, output)\n}\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\npackage main\n\n// O(nm*min(n, m)) time | O(nm*min(n, m)) space\nfunc LongestCommonSubsequence(s1 string, s2 string) string {\n\tlcs := make([][]string, len(s2)+1)\n\tfor i := range lcs {\n\t\tlcs[i] = make([]string, len(s1)+1)\n\t}\n\tfor i := 1; i < len(lcs); i++ {\n\t\tfor j := 1; j < len(lcs[i]); j++ {\n\t\t\tif s2[i-1] == s1[j-1] {\n\t\t\t\tlcs[i][j] = lcs[i-1][j-1] + string(s2[i-1])\n\t\t\t} else {\n\t\t\t\tif len(lcs[i-1][j]) < len(lcs[i][j-1]) {\n\t\t\t\t\tlcs[i][j] = lcs[i][j-1]\n\t\t\t\t} else {\n\t\t\t\t\tlcs[i][j] = lcs[i-1][j]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn lcs[len(s2)][len(s1)]\n}\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\npackage main\n\n// O(nm*min(n, m)) time | O((min(n, m))^2) space\nfunc LongestCommonSubsequence(s1 string, s2 string) string {\n\tsmall, big := s1, s2\n\tif len(s1) > len(s2) {\n\t\tsmall, big = big, small\n\t}\n\tevenlcs := make([]string, len(small)+1)\n\toddlcs := make([]string, len(small)+1)\n\tcurrentlcs, previouslcs := evenlcs, oddlcs\n\tfor i := 1; i < len(big)+1; i++ {\n\t\tif i%2 == 1 {\n\t\t\tcurrentlcs, previouslcs = oddlcs, evenlcs\n\t\t} else {\n\t\t\tcurrentlcs, previouslcs = evenlcs, oddlcs\n\t\t}\n\t\tfor j := 1; j < len(small)+1; j++ {\n\t\t\tif big[i-1] == small[j-1] {\n\t\t\t\tcurrentlcs[j] = string(append([]byte(previouslcs[j-1]), big[i-1]))\n\t\t\t} else {\n\t\t\t\tif len(previouslcs[j]) > len(currentlcs[j-1]) {\n\t\t\t\t\tcurrentlcs[j] = previouslcs[j]\n\t\t\t\t} else {\n\t\t\t\t\tcurrentlcs[j] = currentlcs[j-1]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif len(big)%2 == 0 {\n\t\treturn evenlcs[len(small)]\n\t} else {\n\t\treturn oddlcs[len(small)]\n\t}\n}\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\npackage main\n\ntype entry struct {\n\tletter byte\n\tlength int\n\tprevi  int\n\tprevj  int\n}\n\n// O(nm) time | O(nm) space\nfunc LongestCommonSubsequence(str1 string, str2 string) string {\n\tlcs := make([][]entry, len(str2)+1)\n\tfor i := range lcs {\n\t\tlcs[i] = make([]entry, len(str1)+1)\n\t\tfor j := range lcs[i] {\n\t\t\tlcs[i][j].letter = 0\n\t\t\tlcs[i][j].length = 0\n\t\t\tlcs[i][j].previ = -1\n\t\t\tlcs[i][j].prevj = -1\n\t\t}\n\t}\n\n\tfor i := 1; i < len(str2)+1; i++ {\n\t\tfor j := 1; j < len(str1)+1; j++ {\n\t\t\tif str2[i-1] == str1[j-1] {\n\t\t\t\tlcs[i][j] = entry{str2[i-1], lcs[i-1][j-1].length + 1, i - 1, j - 1}\n\t\t\t} else {\n\t\t\t\tif lcs[i-1][j].length > lcs[i][j-1].length {\n\t\t\t\t\tlcs[i][j] = entry{0, lcs[i-1][j].length, i - 1, j}\n\t\t\t\t} else {\n\t\t\t\t\tlcs[i][j] = entry{0, lcs[i][j-1].length, i, j - 1}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn buildSequence(lcs)\n}\n\nfunc buildSequence(lcs [][]entry) string {\n\tsequence := make([]byte, 0)\n\ti := len(lcs) - 1\n\tj := len(lcs[0]) - 1\n\tfor i != 0 && j != 0 {\n\t\tcurrent := lcs[i][j]\n\t\tif current.letter != 0 {\n\t\t\tsequence = append(sequence, current.letter)\n\t\t}\n\t\ti = current.previ\n\t\tj = current.prevj\n\t}\n\treturn string(reverse(sequence))\n}\n\nfunc reverse(arr []byte) []byte {\n\tfor i, j := 0, len(arr)-1; i < j; i, j = i+1, j-1 {\n\t\tarr[i], arr[j] = arr[j], arr[i]\n\t}\n\treturn arr\n}\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\npackage main\n\n// O(nm) time | O(nm) space\nfunc LongestCommonSubsequence(str1 string, str2 string) string {\n\tlengths := make([][]int, len(str2)+1)\n\tfor i := range lengths {\n\t\tlengths[i] = make([]int, len(str1)+1)\n\t}\n\tfor i := 1; i < len(str2)+1; i++ {\n\t\tfor j := 1; j < len(str1)+1; j++ {\n\t\t\tif str2[i-1] == str1[j-1] {\n\t\t\t\tlengths[i][j] = lengths[i-1][j-1] + 1\n\t\t\t} else {\n\t\t\t\tlengths[i][j] = max(lengths[i-1][j], lengths[i][j-1])\n\t\t\t}\n\t\t}\n\t}\n\n\treturn buildSequence(lengths, str1)\n}\n\nfunc buildSequence(lengths [][]int, str1 string) string {\n\tsequence := make([]byte, 0)\n\ti := len(lengths) - 1\n\tj := len(lengths[0]) - 1\n\tfor i != 0 && j != 0 {\n\t\tif lengths[i][j] == lengths[i-1][j] {\n\t\t\ti -= 1\n\t\t} else if lengths[i][j] == lengths[i][j-1] {\n\t\t\tj -= 1\n\t\t} else {\n\t\t\tsequence = append(sequence, str1[j-1])\n\t\t\ti -= 1\n\t\t\tj -= 1\n\t\t}\n\t}\n\treturn string(reverse(sequence))\n}\n\nfunc reverse(arr []byte) []byte {\n\tfor i, j := 0, len(arr)-1; i < j; i, j = i+1, j-1 {\n\t\tarr[i], arr[j] = arr[j], arr[i]\n\t}\n\treturn arr\n}\n\nfunc max(i, j int) int {\n\tif i > j {\n\t\treturn i\n\t}\n\treturn j\n}\n"
      ]
    },
    "java": {
      "Language": "java",
      "StartingCode": "import java.util.*;\n\nclass Program {\n  public static List<Character> longestCommonSubsequence(String str1, String str2) {\n    // Write your code here.\n    return null;\n  }\n}\n",
      "StartingTest": "import java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    char[] expected = {};\n    Utils.assertTrue(compare(Program.longestCommonSubsequence(\"\", \"\"), expected));\n  }\n\n  @Test\n  public void TestCase2() {\n    char[] expected = {};\n    Utils.assertTrue(compare(Program.longestCommonSubsequence(\"\", \"ABCDEFG\"), expected));\n  }\n\n  @Test\n  public void TestCase3() {\n    char[] expected = {};\n    Utils.assertTrue(compare(Program.longestCommonSubsequence(\"ABCDEFG\", \"\"), expected));\n  }\n\n  @Test\n  public void TestCase4() {\n    char[] expected = {'A', 'B', 'C', 'D', 'E', 'F', 'G'};\n    Utils.assertTrue(compare(Program.longestCommonSubsequence(\"ABCDEFG\", \"ABCDEFG\"), expected));\n  }\n\n  @Test\n  public void TestCase5() {\n    char[] expected = {'A', 'E'};\n    Utils.assertTrue(compare(Program.longestCommonSubsequence(\"ABCDEFG\", \"APPLES\"), expected));\n  }\n\n  @Test\n  public void TestCase6() {\n    char[] expected = {'n', 't'};\n    Utils.assertTrue(compare(Program.longestCommonSubsequence(\"clement\", \"antoine\"), expected));\n  }\n\n  @Test\n  public void TestCase7() {\n    char[] expected = {'X', 'Y', 'Z', 'W'};\n    Utils.assertTrue(compare(Program.longestCommonSubsequence(\"ZXVVYZW\", \"XKYKZPW\"), expected));\n  }\n\n  @Test\n  public void TestCase8() {\n    char[] expected = {'8', '4', '2'};\n    Utils.assertTrue(\n        compare(\n            Program.longestCommonSubsequence(\n                \"8111111111111111142\", \"222222222822222222222222222222433333333332\"),\n            expected));\n  }\n\n  @Test\n  public void TestCase9() {\n    char[] expected = {'C', 'D', 'E', 'G', 'H', 'J', 'K', 'L', 'W'};\n    Utils.assertTrue(\n        compare(\n            Program.longestCommonSubsequence(\n                \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", \"CCCDDEGDHAGKGLWAJWKJAWGKGWJAKLGGWAFWLFFWAGJWKAG\"),\n            expected));\n  }\n\n  @Test\n  public void TestCase10() {\n    char[] expected = {'C', 'D', 'E', 'G', 'H', 'J', 'K', 'L', 'T', 'U', 'V'};\n    Utils.assertTrue(\n        compare(\n            Program.longestCommonSubsequence(\n                \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", \"CCCDDEGDHAGKGLWAJWKJAWGKGWJAKLGGWAFWLFFWAGJWKAGTUV\"),\n            expected));\n  }\n\n  private static boolean compare(List<Character> arr1, char[] arr2) {\n    if (arr1.size() != arr2.length) {\n      return false;\n    }\n    for (int i = 0; i < arr1.size(); i++) {\n      if (arr1.get(i) != arr2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    char[] expected = {'X', 'Y', 'Z', 'W'};\n    Utils.assertTrue(compare(Program.longestCommonSubsequence(\"ZXVVYZW\", \"XKYKZPW\"), expected));\n  }\n\n  private static boolean compare(List<Character> arr1, char[] arr2) {\n    if (arr1.size() != arr2.length) {\n      return false;\n    }\n    for (int i = 0; i < arr1.size(); i++) {\n      if (arr1.get(i) != arr2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(nm*min(n, m)) time | O(nm*min(n, m)) space\n  public static List<Character> longestCommonSubsequence(String str1, String str2) {\n    List<List<List<Character>>> lcs = new ArrayList<List<List<Character>>>();\n    for (int i = 0; i < str2.length() + 1; i++) {\n      lcs.add(new ArrayList<List<Character>>());\n      for (int j = 0; j < str1.length() + 1; j++) {\n        lcs.get(i).add(new ArrayList<Character>());\n      }\n    }\n    for (int i = 1; i < str2.length() + 1; i++) {\n      for (int j = 1; j < str1.length() + 1; j++) {\n        if (str2.charAt(i - 1) == str1.charAt(j - 1)) {\n          List<Character> copy = new ArrayList<Character>(lcs.get(i - 1).get(j - 1));\n          lcs.get(i).set(j, copy);\n          lcs.get(i).get(j).add(str2.charAt(i - 1));\n        } else {\n          if (lcs.get(i - 1).get(j).size() > lcs.get(i).get(j - 1).size()) {\n            lcs.get(i).set(j, lcs.get(i - 1).get(j));\n          } else {\n            lcs.get(i).set(j, lcs.get(i).get(j - 1));\n          }\n        }\n      }\n    }\n    return lcs.get(str2.length()).get(str1.length());\n  }\n}\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(nm*min(n, m)) time | O((min(n, m))^2) space\n  public static List<Character> longestCommonSubsequence(String str1, String str2) {\n    String small = str1.length() < str2.length() ? str1 : str2;\n    String big = str1.length() >= str2.length() ? str1 : str2;\n    List<List<Character>> evenLcs = new ArrayList<List<Character>>();\n    List<List<Character>> oddLcs = new ArrayList<List<Character>>();\n    for (int i = 0; i < small.length() + 1; i++) {\n      evenLcs.add(new ArrayList<Character>());\n    }\n    for (int i = 0; i < small.length() + 1; i++) {\n      oddLcs.add(new ArrayList<Character>());\n    }\n    for (int i = 1; i < big.length() + 1; i++) {\n      List<List<Character>> currentLcs;\n      List<List<Character>> previousLcs;\n      if (i % 2 == 1) {\n        currentLcs = oddLcs;\n        previousLcs = evenLcs;\n      } else {\n        currentLcs = evenLcs;\n        previousLcs = oddLcs;\n      }\n      for (int j = 1; j < small.length() + 1; j++) {\n        if (big.charAt(i - 1) == small.charAt(j - 1)) {\n          List<Character> copy = new ArrayList<Character>(previousLcs.get(j - 1));\n          currentLcs.set(j, copy);\n          currentLcs.get(j).add(big.charAt(i - 1));\n        } else {\n          if (previousLcs.get(j).size() > currentLcs.get(j - 1).size()) {\n            currentLcs.set(j, previousLcs.get(j));\n          } else {\n            currentLcs.set(j, currentLcs.get(j - 1));\n          }\n        }\n      }\n    }\n    return big.length() % 2 == 0 ? evenLcs.get(small.length()) : oddLcs.get(small.length());\n  }\n}\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(nm) time | O(nm) space\n  public static List<Character> longestCommonSubsequence(String str1, String str2) {\n    int[][][] lcs = new int[str2.length() + 1][str1.length() + 1][];\n    for (int i = 0; i < str2.length() + 1; i++) {\n      for (int j = 0; j < str1.length() + 1; j++) {\n        lcs[i][j] = new int[] {0, 0, 0, 0};\n      }\n    }\n    for (int i = 1; i < str2.length() + 1; i++) {\n      for (int j = 1; j < str1.length() + 1; j++) {\n        if (str2.charAt(i - 1) == str1.charAt(j - 1)) {\n          int[] newEntry = {(int) str2.charAt(i - 1), lcs[i - 1][j - 1][1] + 1, i - 1, j - 1};\n          lcs[i][j] = newEntry;\n        } else {\n          if (lcs[i - 1][j][1] > lcs[i][j - 1][1]) {\n            int[] newEntry = {-1, lcs[i - 1][j][1], i - 1, j};\n            lcs[i][j] = newEntry;\n          } else {\n            int[] newEntry = {-1, lcs[i][j - 1][1], i, j - 1};\n            lcs[i][j] = newEntry;\n          }\n        }\n      }\n    }\n    return buildSequence(lcs);\n  }\n\n  public static List<Character> buildSequence(int[][][] lcs) {\n    List<Character> sequence = new ArrayList<Character>();\n    int i = lcs.length - 1;\n    int j = lcs[0].length - 1;\n    while (i != 0 && j != 0) {\n      int[] currentEntry = lcs[i][j];\n      if (currentEntry[0] != -1) {\n        sequence.add(0, (char) currentEntry[0]);\n      }\n      i = currentEntry[2];\n      j = currentEntry[3];\n    }\n    return sequence;\n  }\n}\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(nm) time | O(nm) space\n  public static List<Character> longestCommonSubsequence(String str1, String str2) {\n    int[][] lengths = new int[str2.length() + 1][str1.length() + 1];\n    for (int i = 1; i < str2.length() + 1; i++) {\n      for (int j = 1; j < str1.length() + 1; j++) {\n        if (str2.charAt(i - 1) == str1.charAt(j - 1)) {\n          lengths[i][j] = lengths[i - 1][j - 1] + 1;\n        } else {\n          lengths[i][j] = Math.max(lengths[i - 1][j], lengths[i][j - 1]);\n        }\n      }\n    }\n    return buildSequence(lengths, str1);\n  }\n\n  public static List<Character> buildSequence(int[][] lengths, String str) {\n    List<Character> sequence = new ArrayList<Character>();\n    int i = lengths.length - 1;\n    int j = lengths[0].length - 1;\n    while (i != 0 && j != 0) {\n      if (lengths[i][j] == lengths[i - 1][j]) {\n        i--;\n      } else if (lengths[i][j] == lengths[i][j - 1]) {\n        j--;\n      } else {\n        sequence.add(0, str.charAt(j - 1));\n        i--;\n        j--;\n      }\n    }\n    return sequence;\n  }\n}\n"
      ]
    },
    "javascript": {
      "Language": "javascript",
      "StartingCode": "function longestCommonSubsequence(str1, str2) {\n  // Write your code here.\n}\n\n// Do not edit the line below.\nexports.longestCommonSubsequence = longestCommonSubsequence;\n",
      "StartingTest": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai.expect(program.longestCommonSubsequence('', '')).to.deep.equal([]);\n});\n\nit('Test Case #2', function () {\n  chai.expect(program.longestCommonSubsequence('', 'ABCDEFG')).to.deep.equal([]);\n});\n\nit('Test Case #3', function () {\n  chai.expect(program.longestCommonSubsequence('ABCDEFG', '')).to.deep.equal([]);\n});\n\nit('Test Case #4', function () {\n  chai\n    .expect(program.longestCommonSubsequence('ABCDEFG', 'ABCDEFG'))\n    .to.deep.equal(['A', 'B', 'C', 'D', 'E', 'F', 'G']);\n});\n\nit('Test Case #5', function () {\n  chai.expect(program.longestCommonSubsequence('ABCDEFG', 'APPLES')).to.deep.equal(['A', 'E']);\n});\n\nit('Test Case #6', function () {\n  chai.expect(program.longestCommonSubsequence('clement', 'antoine')).to.deep.equal(['n', 't']);\n});\n\nit('Test Case #7', function () {\n  chai.expect(program.longestCommonSubsequence('ZXVVYZW', 'XKYKZPW')).to.deep.equal(['X', 'Y', 'Z', 'W']);\n});\n\nit('Test Case #8', function () {\n  chai\n    .expect(program.longestCommonSubsequence('8111111111111111142', '222222222822222222222222222222433333333332'))\n    .to.deep.equal(['8', '4', '2']);\n});\n\nit('Test Case #9', function () {\n  chai\n    .expect(\n      program.longestCommonSubsequence('ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'CCCDDEGDHAGKGLWAJWKJAWGKGWJAKLGGWAFWLFFWAGJWKAG'),\n    )\n    .to.deep.equal(['C', 'D', 'E', 'G', 'H', 'J', 'K', 'L', 'W']);\n});\n\nit('Test Case #10', function () {\n  chai\n    .expect(\n      program.longestCommonSubsequence(\n        'ABCDEFGHIJKLMNOPQRSTUVWXYZ',\n        'CCCDDEGDHAGKGLWAJWKJAWGKGWJAKLGGWAFWLFFWAGJWKAGTUV',\n      ),\n    )\n    .to.deep.equal(['C', 'D', 'E', 'G', 'H', 'J', 'K', 'L', 'T', 'U', 'V']);\n});\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai.expect(program.longestCommonSubsequence('ZXVVYZW', 'XKYKZPW')).to.deep.equal(['X', 'Y', 'Z', 'W']);\n});\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\n// O(nm*min(n, m)) time | O(nm*min(n, m)) space\nfunction longestCommonSubsequence(str1, str2) {\n  const lcs = [];\n  for (let i = 0; i < str2.length + 1; i++) {\n    const row = new Array(str1.length + 1).fill([]);\n    lcs.push(row);\n  }\n  for (let i = 1; i < str2.length + 1; i++) {\n    for (let j = 1; j < str1.length + 1; j++) {\n      if (str2[i - 1] === str1[j - 1]) {\n        lcs[i][j] = lcs[i - 1][j - 1].concat(str2[i - 1]);\n      } else {\n        lcs[i][j] = lcs[i - 1][j].length > lcs[i][j - 1].length ? lcs[i - 1][j] : lcs[i][j - 1];\n      }\n    }\n  }\n  return lcs[str2.length][str1.length];\n}\n\nexports.longestCommonSubsequence = longestCommonSubsequence;\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\n// O(nm*min(n, m)) time | O((min(n, m))^2) space\nfunction longestCommonSubsequence(str1, str2) {\n  const small = str1.length < str2.length ? str1 : str2;\n  const big = str1.length >= str2.length ? str1 : str2;\n  const evenLcs = new Array(small.length + 1).fill([]);\n  const oddLcs = new Array(small.length + 1).fill([]);\n  for (let i = 1; i < big.length + 1; i++) {\n    let currentLcs, previousLcs;\n    if (i % 2 === 1) {\n      currentLcs = oddLcs;\n      previousLcs = evenLcs;\n    } else {\n      currentLcs = evenLcs;\n      previousLcs = oddLcs;\n    }\n    for (let j = 1; j < small.length + 1; j++) {\n      if (big[i - 1] === small[j - 1]) {\n        currentLcs[j] = previousLcs[j - 1].concat(big[i - 1]);\n      } else {\n        currentLcs[j] = previousLcs[j].length > currentLcs[j - 1].length ? previousLcs[j] : currentLcs[j - 1];\n      }\n    }\n  }\n  return big.length % 2 === 0 ? evenLcs[small.length] : oddLcs[small.length];\n}\n\nexports.longestCommonSubsequence = longestCommonSubsequence;\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\n// O(nm) time | O(nm) space\nfunction longestCommonSubsequence(str1, str2) {\n  const lcs = [];\n  for (let i = 0; i < str2.length + 1; i++) {\n    const row = [];\n    for (let j = 0; j < str1.length + 1; j++) {\n      const entry = new Array(4);\n      entry[1] = 0;\n      row.push(entry);\n    }\n    lcs.push(row);\n  }\n  for (let i = 1; i < str2.length + 1; i++) {\n    for (let j = 1; j < str1.length + 1; j++) {\n      if (str2[i - 1] === str1[j - 1]) {\n        lcs[i][j] = [str2[i - 1], lcs[i - 1][j - 1][1] + 1, i - 1, j - 1];\n      } else {\n        if (lcs[i - 1][j][1] > lcs[i][j - 1][1]) {\n          lcs[i][j] = [null, lcs[i - 1][j][1], i - 1, j];\n        } else {\n          lcs[i][j] = [null, lcs[i][j - 1][1], i, j - 1];\n        }\n      }\n    }\n  }\n  return buildSequence(lcs);\n}\n\nfunction buildSequence(lcs) {\n  const sequence = [];\n  let i = lcs.length - 1;\n  let j = lcs[0].length - 1;\n  while (i !== 0 && j !== 0) {\n    let currentEntry = lcs[i][j];\n    if (currentEntry[0]) {\n      sequence.unshift(currentEntry[0]);\n    }\n    i = currentEntry[2];\n    j = currentEntry[3];\n  }\n  return sequence;\n}\n\nexports.longestCommonSubsequence = longestCommonSubsequence;\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\n// O(nm) time | O(nm) space\nfunction longestCommonSubsequence(str1, str2) {\n  const lengths = [];\n  for (let i = 0; i < str2.length + 1; i++) {\n    lengths.push(new Array(str1.length + 1).fill(0));\n  }\n  for (let i = 1; i < str2.length + 1; i++) {\n    for (let j = 1; j < str1.length + 1; j++) {\n      if (str2[i - 1] === str1[j - 1]) {\n        lengths[i][j] = lengths[i - 1][j - 1] + 1;\n      } else {\n        lengths[i][j] = Math.max(lengths[i - 1][j], lengths[i][j - 1]);\n      }\n    }\n  }\n  return buildSequence(lengths, str1);\n}\n\nfunction buildSequence(lengths, string) {\n  const sequence = [];\n  let i = lengths.length - 1;\n  let j = lengths[0].length - 1;\n  while (i !== 0 && j !== 0) {\n    if (lengths[i][j] === lengths[i - 1][j]) {\n      i--;\n    } else if (lengths[i][j] === lengths[i][j - 1]) {\n      j--;\n    } else {\n      sequence.unshift(string[j - 1]);\n      i--;\n      j--;\n    }\n  }\n  return sequence;\n}\n\nexports.longestCommonSubsequence = longestCommonSubsequence;\n"
      ]
    },
    "python": {
      "Language": "python",
      "StartingCode": "def longestCommonSubsequence(str1, str2):\n    # Write your code here.\n    pass\n",
      "StartingTest": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(program.longestCommonSubsequence(\"\", \"\"), [])\n\n    def test_case_2(self):\n        self.assertEqual(program.longestCommonSubsequence(\"\", \"ABCDEFG\"), [])\n\n    def test_case_3(self):\n        self.assertEqual(program.longestCommonSubsequence(\"ABCDEFG\", \"\"), [])\n\n    def test_case_4(self):\n        self.assertEqual(program.longestCommonSubsequence(\"ABCDEFG\", \"ABCDEFG\"), [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\"])\n\n    def test_case_5(self):\n        self.assertEqual(program.longestCommonSubsequence(\"ABCDEFG\", \"APPLES\"), [\"A\", \"E\"])\n\n    def test_case_6(self):\n        self.assertEqual(program.longestCommonSubsequence(\"clement\", \"antoine\"), [\"n\", \"t\"])\n\n    def test_case_7(self):\n        self.assertEqual(program.longestCommonSubsequence(\"ZXVVYZW\", \"XKYKZPW\"), [\"X\", \"Y\", \"Z\", \"W\"])\n\n    def test_case_8(self):\n        self.assertEqual(\n            program.longestCommonSubsequence(\"8111111111111111142\", \"222222222822222222222222222222433333333332\"),\n            [\"8\", \"4\", \"2\"],\n        )\n\n    def test_case_9(self):\n        self.assertEqual(\n            program.longestCommonSubsequence(\n                \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", \"CCCDDEGDHAGKGLWAJWKJAWGKGWJAKLGGWAFWLFFWAGJWKAG\"\n            ),\n            [\"C\", \"D\", \"E\", \"G\", \"H\", \"J\", \"K\", \"L\", \"W\"],\n        )\n\n    def test_case_10(self):\n        self.assertEqual(\n            program.longestCommonSubsequence(\n                \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", \"CCCDDEGDHAGKGLWAJWKJAWGKGWJAKLGGWAFWLFFWAGJWKAGTUV\"\n            ),\n            [\"C\", \"D\", \"E\", \"G\", \"H\", \"J\", \"K\", \"L\", \"T\", \"U\", \"V\"],\n        )\n",
      "SandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        output = program.longestCommonSubsequence(\"ZXVVYZW\", \"XKYKZPW\")\n        self.assertEqual(output, [\"X\", \"Y\", \"Z\", \"W\"])\n",
      "Solutions": [
        "# Copyright © 2020 Code Complete. All rights reserved.\n\n# O(nm*min(n, m)) time | O(nm*min(n, m)) space\ndef longestCommonSubsequence(str1, str2):\n    lcs = [[[] for x in range(len(str1) + 1)] for y in range(len(str2) + 1)]\n    for i in range(1, len(str2) + 1):\n        for j in range(1, len(str1) + 1):\n            if str2[i - 1] == str1[j - 1]:\n                lcs[i][j] = lcs[i - 1][j - 1] + [str2[i - 1]]\n            else:\n                lcs[i][j] = max(lcs[i - 1][j], lcs[i][j - 1], key=len)\n    return lcs[-1][-1]\n",
        "# Copyright © 2020 Code Complete. All rights reserved.\n\n# O(nm*min(n, m)) time | O((min(n, m))^2) space\ndef longestCommonSubsequence(str1, str2):\n    small = str1 if len(str1) < len(str2) else str2\n    big = str1 if len(str1) >= len(str2) else str2\n    evenLcs = [[] for x in range(len(small) + 1)]\n    oddLcs = [[] for x in range(len(small) + 1)]\n    for i in range(1, len(big) + 1):\n        if i % 2 == 1:\n            currentLcs = oddLcs\n            previousLcs = evenLcs\n        else:\n            currentLcs = evenLcs\n            previousLcs = oddLcs\n        for j in range(1, len(small) + 1):\n            if big[i - 1] == small[j - 1]:\n                currentLcs[j] = previousLcs[j - 1] + [big[i - 1]]\n            else:\n                currentLcs[j] = max(previousLcs[j], currentLcs[j - 1], key=len)\n    return evenLcs[-1] if len(big) % 2 == 0 else oddLcs[-1]\n",
        "# Copyright © 2020 Code Complete. All rights reserved.\n\n# O(nm) time | O(nm) space\ndef longestCommonSubsequence(str1, str2):\n    lcs = [[[None, 0, None, None] for x in range(len(str1) + 1)] for y in range(len(str2) + 1)]\n    for i in range(1, len(str2) + 1):\n        for j in range(1, len(str1) + 1):\n            if str2[i - 1] == str1[j - 1]:\n                lcs[i][j] = [str2[i - 1], lcs[i - 1][j - 1][1] + 1, i - 1, j - 1]\n            else:\n                if lcs[i - 1][j][1] > lcs[i][j - 1][1]:\n                    lcs[i][j] = [None, lcs[i - 1][j][1], i - 1, j]\n                else:\n                    lcs[i][j] = [None, lcs[i][j - 1][1], i, j - 1]\n    return buildSequence(lcs)\n\n\ndef buildSequence(lcs):\n    sequence = []\n    i = len(lcs) - 1\n    j = len(lcs[0]) - 1\n    while i != 0 and j != 0:\n        currentEntry = lcs[i][j]\n        if currentEntry[0] is not None:\n            sequence.append(currentEntry[0])\n        i = currentEntry[2]\n        j = currentEntry[3]\n    return list(reversed(sequence))\n",
        "# Copyright © 2020 Code Complete. All rights reserved.\n\n# O(nm) time | O(nm) space\ndef longestCommonSubsequence(str1, str2):\n    lengths = [[0 for x in range(len(str1) + 1)] for y in range(len(str2) + 1)]\n    for i in range(1, len(str2) + 1):\n        for j in range(1, len(str1) + 1):\n            if str2[i - 1] == str1[j - 1]:\n                lengths[i][j] = lengths[i - 1][j - 1] + 1\n            else:\n                lengths[i][j] = max(lengths[i - 1][j], lengths[i][j - 1])\n    return buildSequence(lengths, str1)\n\n\ndef buildSequence(lengths, string):\n    sequence = []\n    i = len(lengths) - 1\n    j = len(lengths[0]) - 1\n    while i != 0 and j != 0:\n        if lengths[i][j] == lengths[i - 1][j]:\n            i -= 1\n        elif lengths[i][j] == lengths[i][j - 1]:\n            j -= 1\n        else:\n            sequence.append(string[j - 1])\n            i -= 1\n            j -= 1\n    return list(reversed(sequence))\n"
      ]
    },
    "swift": {
      "Language": "swift",
      "StartingCode": "class Program {\n  func longestCommonSubsequence(firstString: String, secondString: String) -> [String] {\n    // Write your code here.\n    return []\n  }\n}\n",
      "StartingTest": "class ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      try assertEqual([], program.longestCommonSubsequence(firstString: \"\", secondString: \"\"))\n    }\n    runTest(\"Test Case 2\") { () throws -> Void in\n      try assertEqual([], program.longestCommonSubsequence(firstString: \"\", secondString: \"ABCDEFG\"))\n    }\n    runTest(\"Test Case 3\") { () throws -> Void in\n      try assertEqual([], program.longestCommonSubsequence(firstString: \"ABCDEFG\", secondString: \"\"))\n    }\n    runTest(\"Test Case 4\") { () throws -> Void in\n      try assertEqual([\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\"], program.longestCommonSubsequence(firstString: \"ABCDEFG\", secondString: \"ABCDEFG\"))\n    }\n    runTest(\"Test Case 5\") { () throws -> Void in\n      try assertEqual([\"A\", \"E\"], program.longestCommonSubsequence(firstString: \"ABCDEFG\", secondString: \"APPLES\"))\n    }\n    runTest(\"Test Case 6\") { () throws -> Void in\n      try assertEqual([\"n\", \"t\"], program.longestCommonSubsequence(firstString: \"clement\", secondString: \"antoine\"))\n    }\n    runTest(\"Test Case 7\") { () throws -> Void in\n      try assertEqual([\"X\", \"Y\", \"Z\", \"W\"], program.longestCommonSubsequence(firstString: \"ZXVVYZW\", secondString: \"XKYKZPW\"))\n    }\n    runTest(\"Test Case 8\") { () throws -> Void in\n      try assertEqual([\"8\", \"4\", \"2\"], program.longestCommonSubsequence(firstString: \"8111111111111111142\", secondString: \"222222222822222222222222222222433333333332\"))\n    }\n    runTest(\"Test Case 9\") { () throws -> Void in\n      try assertEqual([\"C\", \"D\", \"E\", \"G\", \"H\", \"J\", \"K\", \"L\", \"W\"], program.longestCommonSubsequence(firstString: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", secondString: \"CCCDDEGDHAGKGLWAJWKJAWGKGWJAKLGGWAFWLFFWAGJWKAG\"))\n    }\n    runTest(\"Test Case 10\") { () throws -> Void in\n      try assertEqual([\"C\", \"D\", \"E\", \"G\", \"H\", \"J\", \"K\", \"L\", \"T\", \"U\", \"V\"], program.longestCommonSubsequence(firstString: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", secondString: \"CCCDDEGDHAGKGLWAJWKJAWGKGWJAKLGGWAFWLFFWAGJWKAGTUV\"))\n    }\n  }\n}\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      let output = program.longestCommonSubsequence(firstString: \"ZXVVYZW\", secondString: \"XKYKZPW\")\n      try assertEqual([\"X\", \"Y\", \"Z\", \"W\"], output)\n    }\n  }\n}\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nclass Program {\n  // O(nm * min(n, m)) time | O(nm * min(n, m)) space\n  func longestCommonSubsequence(firstString: String, secondString: String) -> [String] {\n    var lcs = [[[String]]]()\n\n    for _ in 0 ..< firstString.count + 1 {\n      let row = Array(repeating: [String](), count: secondString.count + 1)\n      lcs.append(row)\n    }\n\n    for i in stride(from: 1, to: firstString.count + 1, by: 1) {\n      for j in stride(from: 1, to: secondString.count + 1, by: 1) {\n        let firstIndex = firstString.index(firstString.startIndex, offsetBy: i - 1)\n        let secondIndex = secondString.index(secondString.startIndex, offsetBy: j - 1)\n\n        if firstString[firstIndex] == secondString[secondIndex] {\n          var diagonal = lcs[i - 1][j - 1]\n          let char = String(firstString[firstIndex])\n          diagonal.append(char)\n\n          lcs[i][j] = diagonal\n        } else {\n          let left = lcs[i][j - 1]\n          let top = lcs[i - 1][j]\n\n          lcs[i][j] = left.count > top.count ? left : top\n        }\n      }\n    }\n\n    return lcs[firstString.count][secondString.count]\n  }\n}\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nclass Program {\n  // O(nm * min(n, m)) time | O(min(n, m)^2) space\n  func longestCommonSubsequence(firstString: String, secondString: String) -> [String] {\n    let smallestString = firstString.count < secondString.count ? firstString : secondString\n    let biggestString = firstString.count >= secondString.count ? firstString : secondString\n\n    var evenLCS = Array(repeating: [String](), count: smallestString.count + 1)\n    var oddLCS = Array(repeating: [String](), count: smallestString.count + 1)\n\n    for i in stride(from: 1, to: biggestString.count + 1, by: 1) {\n      if i % 2 == 0 {\n        secondSolutionHelper(i, biggestString, smallestString, currentLCS: &evenLCS, previousLCS: &oddLCS)\n      } else {\n        secondSolutionHelper(i, biggestString, smallestString, currentLCS: &oddLCS, previousLCS: &evenLCS)\n      }\n    }\n\n    return biggestString.count % 2 == 0 ? evenLCS[smallestString.count] : oddLCS[smallestString.count]\n  }\n\n  func secondSolutionHelper(_ i: Int, _ biggestString: String, _ smallestString: String, currentLCS: inout [[String]], previousLCS: inout [[String]]) {\n    for j in stride(from: 1, to: smallestString.count + 1, by: 1) {\n      let firstIndex = biggestString.index(biggestString.startIndex, offsetBy: i - 1)\n      let secondIndex = smallestString.index(smallestString.startIndex, offsetBy: j - 1)\n\n      if biggestString[firstIndex] == smallestString[secondIndex] {\n        var diagonal = previousLCS[j - 1]\n        let char = String(smallestString[secondIndex])\n        diagonal.append(char)\n\n        currentLCS[j] = diagonal\n      } else {\n        let top = previousLCS[j]\n        let left = currentLCS[j - 1]\n\n        if top.count > left.count {\n          currentLCS[j] = top\n        } else {\n          currentLCS[j] = left\n        }\n      }\n    }\n  }\n}\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nclass Program {\n  // O(nm) time | O(nm) space\n  func longestCommonSubsequence(firstString: String, secondString: String) -> [String] {\n    var lcs = [[(String, Int, Int, Int)]]()\n\n    for _ in stride(from: 0, to: firstString.count + 1, by: 1) {\n      var row = [(String, Int, Int, Int)]()\n\n      for _ in stride(from: 0, to: secondString.count + 1, by: 1) {\n        let tuple = (\"\", 0, 0, 0)\n        row.append(tuple)\n      }\n\n      lcs.append(row)\n    }\n\n    for i in stride(from: 1, to: firstString.count + 1, by: 1) {\n      for j in stride(from: 1, to: secondString.count + 1, by: 1) {\n        let firstIndex = firstString.index(firstString.startIndex, offsetBy: i - 1)\n        let secondIndex = secondString.index(secondString.startIndex, offsetBy: j - 1)\n\n        if firstString[firstIndex] == secondString[secondIndex] {\n          let char = String(firstString[firstIndex])\n          lcs[i][j] = (char, lcs[i - 1][j - 1].1 + 1, i - 1, j - 1)\n        } else {\n          if lcs[i - 1][j].1 > lcs[i][j - 1].1 {\n            lcs[i][j] = (\"\", lcs[i - 1][j].1, i - 1, j)\n          } else {\n            lcs[i][j] = (\"\", lcs[i][j - 1].1, i, j - 1)\n          }\n        }\n      }\n    }\n\n    return buildSequence(lcs: lcs)\n  }\n\n  func buildSequence(lcs: [[(String, Int, Int, Int)]]) -> [String] {\n    var sequence = [String]()\n\n    var i = lcs.count - 1\n    var j = lcs[0].count - 1\n\n    while i != 0, j != 0 {\n      let currentEntry = lcs[i][j]\n\n      if currentEntry.0 != \"\" {\n        sequence.insert(currentEntry.0, at: 0)\n      }\n\n      i = currentEntry.2\n      j = currentEntry.3\n    }\n\n    return sequence\n  }\n}\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nclass Program {\n  // O(nm) time | O(nm) space\n  func longestCommonSubsequence(firstString: String, secondString: String) -> [String] {\n    var lengths = [[Int]]()\n\n    for _ in stride(from: 0, to: firstString.count + 1, by: 1) {\n      let row = Array(repeating: 0, count: secondString.count + 1)\n      lengths.append(row)\n    }\n\n    for i in stride(from: 1, to: firstString.count + 1, by: 1) {\n      for j in stride(from: 1, to: secondString.count + 1, by: 1) {\n        let firstIndex = firstString.index(firstString.startIndex, offsetBy: i - 1)\n        let secondIndex = secondString.index(secondString.startIndex, offsetBy: j - 1)\n\n        if firstString[firstIndex] == secondString[secondIndex] {\n          lengths[i][j] = lengths[i - 1][j - 1] + 1\n        } else {\n          lengths[i][j] = max(lengths[i - 1][j], lengths[i][j - 1])\n        }\n      }\n    }\n\n    return buildSequence(lengths: lengths, string: secondString)\n  }\n\n  // Build lcs from lengths array and initial string\n  func buildSequence(lengths: [[Int]], string: String) -> [String] {\n    var sequence = [String]()\n\n    var i = lengths.count - 1\n    var j = lengths[0].count - 1\n\n    while i != 0, j != 0 {\n      if lengths[i][j] == lengths[i - 1][j] {\n        i -= 1\n      } else if lengths[i][j] == lengths[i][j - 1] {\n        j -= 1\n      } else {\n        let index = string.index(string.startIndex, offsetBy: j - 1)\n        let char = String(string[index])\n\n        sequence.insert(char, at: 0)\n        i -= 1\n        j -= 1\n      }\n    }\n\n    return sequence\n  }\n}\n"
      ]
    },
    "typescript": {
      "Language": "typescript",
      "StartingCode": "export function longestCommonSubsequence(str1: string, str2: string) {\n  // Write your code here.\n  return [''];\n}\n",
      "StartingTest": "",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  chai.expect(program.longestCommonSubsequence('ZXVVYZW', 'XKYKZPW')).to.deep.equal(['X', 'Y', 'Z', 'W']);\n});\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\n// O(nm*min(n, m)) time | O(nm*min(n, m)) space\nexport function longestCommonSubsequence(str1: string, str2: string) {\n  const lcs: string[][][] = [];\n  for (let i = 0; i < str2.length + 1; i++) {\n    const row = new Array(str1.length + 1).fill([]);\n    lcs.push(row);\n  }\n  for (let i = 1; i < str2.length + 1; i++) {\n    for (let j = 1; j < str1.length + 1; j++) {\n      if (str2[i - 1] === str1[j - 1]) {\n        lcs[i][j] = lcs[i - 1][j - 1].concat(str2[i - 1]);\n      } else {\n        lcs[i][j] = lcs[i - 1][j].length > lcs[i][j - 1].length ? lcs[i - 1][j] : lcs[i][j - 1];\n      }\n    }\n  }\n  return lcs[str2.length][str1.length];\n}\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\n// O(nm*min(n, m)) time | O((min(n, m))^2) space\nexport function longestCommonSubsequence(str1: string, str2: string) {\n  const small = str1.length < str2.length ? str1 : str2;\n  const big = str1.length >= str2.length ? str1 : str2;\n  const evenLcs: string[][] = new Array(small.length + 1).fill([]);\n  const oddLcs: string[][] = new Array(small.length + 1).fill([]);\n  for (let i = 1; i < big.length + 1; i++) {\n    let currentLcs, previousLcs;\n    if (i % 2 === 1) {\n      currentLcs = oddLcs;\n      previousLcs = evenLcs;\n    } else {\n      currentLcs = evenLcs;\n      previousLcs = oddLcs;\n    }\n    for (let j = 1; j < small.length + 1; j++) {\n      if (big[i - 1] === small[j - 1]) {\n        currentLcs[j] = previousLcs[j - 1].concat(big[i - 1]);\n      } else {\n        currentLcs[j] = previousLcs[j].length > currentLcs[j - 1].length ? previousLcs[j] : currentLcs[j - 1];\n      }\n    }\n  }\n  return big.length % 2 === 0 ? evenLcs[small.length] : oddLcs[small.length];\n}\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\n// O(nm) time | O(nm) space\nexport function longestCommonSubsequence(str1: string, str2: string) {\n  const lcs: any[][][] = [];\n  for (let i = 0; i < str2.length + 1; i++) {\n    const row = [];\n    for (let j = 0; j < str1.length + 1; j++) {\n      const entry = new Array(4);\n      entry[1] = 0;\n      row.push(entry);\n    }\n    lcs.push(row);\n  }\n  for (let i = 1; i < str2.length + 1; i++) {\n    for (let j = 1; j < str1.length + 1; j++) {\n      if (str2[i - 1] === str1[j - 1]) {\n        lcs[i][j] = [str2[i - 1], lcs[i - 1][j - 1][1] + 1, i - 1, j - 1];\n      } else {\n        if (lcs[i - 1][j][1] > lcs[i][j - 1][1]) {\n          lcs[i][j] = [null, lcs[i - 1][j][1], i - 1, j];\n        } else {\n          lcs[i][j] = [null, lcs[i][j - 1][1], i, j - 1];\n        }\n      }\n    }\n  }\n  return buildSequence(lcs);\n}\n\nfunction buildSequence(lcs: any[][][]) {\n  const sequence: string[] = [];\n  let i = lcs.length - 1;\n  let j = lcs[0].length - 1;\n  while (i !== 0 && j !== 0) {\n    let currentEntry = lcs[i][j];\n    if (currentEntry[0]) {\n      sequence.unshift(currentEntry[0]);\n    }\n    i = currentEntry[2];\n    j = currentEntry[3];\n  }\n  return sequence;\n}\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\n// O(nm) time | O(nm) space\nexport function longestCommonSubsequence(str1: string, str2: string) {\n  const lengths: number[][] = [];\n  for (let i = 0; i < str2.length + 1; i++) {\n    lengths.push(new Array(str1.length + 1).fill(0));\n  }\n  for (let i = 1; i < str2.length + 1; i++) {\n    for (let j = 1; j < str1.length + 1; j++) {\n      if (str2[i - 1] === str1[j - 1]) {\n        lengths[i][j] = lengths[i - 1][j - 1] + 1;\n      } else {\n        lengths[i][j] = Math.max(lengths[i - 1][j], lengths[i][j - 1]);\n      }\n    }\n  }\n  return buildSequence(lengths, str1);\n}\n\nfunction buildSequence(lengths: number[][], string: string) {\n  const sequence: string[] = [];\n  let i = lengths.length - 1;\n  let j = lengths[0].length - 1;\n  while (i !== 0 && j !== 0) {\n    if (lengths[i][j] === lengths[i - 1][j]) {\n      i--;\n    } else if (lengths[i][j] === lengths[i][j - 1]) {\n      j--;\n    } else {\n      sequence.unshift(string[j - 1]);\n      i--;\n      j--;\n    }\n  }\n  return sequence;\n}\n"
      ]
    }
  },
  "JSONTestLanguages": [
    "javascript",
    "cpp",
    "python",
    "java",
    "csharp",
    "go",
    "swift",
    "typescript"
  ],
  "JSONTests": [
    {
      "str1": "ZXVVYZW",
      "str2": "XKYKZPW"
    },
    {
      "str1": "",
      "str2": ""
    },
    {
      "str1": "",
      "str2": "ABCDEFG"
    },
    {
      "str1": "ABCDEFG",
      "str2": ""
    },
    {
      "str1": "ABCDEFG",
      "str2": "ABCDEFG"
    },
    {
      "str1": "ABCDEFG",
      "str2": "APPLES"
    },
    {
      "str1": "clement",
      "str2": "antoine"
    },
    {
      "str1": "8111111111111111142",
      "str2": "222222222822222222222222222222433333333332"
    },
    {
      "str1": "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
      "str2": "CCCDDEGDHAGKGLWAJWKJAWGKGWJAKLGGWAFWLFFWAGJWKAG"
    },
    {
      "str1": "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
      "str2": "CCCDDEGDHAGKGLWAJWKJAWGKGWJAKLGGWAFWLFFWAGJWKAGTUV"
    }
  ],
  "JSONAnswers": [
    [
      [
        "X",
        "Y",
        "Z",
        "W"
      ],
      [],
      [],
      [],
      [
        "A",
        "B",
        "C",
        "D",
        "E",
        "F",
        "G"
      ],
      [
        "A",
        "E"
      ],
      [
        "n",
        "t"
      ],
      [
        "8",
        "4",
        "2"
      ],
      [
        "C",
        "D",
        "E",
        "G",
        "H",
        "J",
        "K",
        "L",
        "W"
      ],
      [
        "C",
        "D",
        "E",
        "G",
        "H",
        "J",
        "K",
        "L",
        "T",
        "U",
        "V"
      ]
    ]
  ]
}