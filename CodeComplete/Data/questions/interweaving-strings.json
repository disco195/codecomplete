{
  "Summary": {
    "Name": "Interweaving Strings",
    "Category": "Recursion",
    "Difficulty": 3,
    "Available": true,
    "Metadata": {
      "date": "2019-11-21T00:00:00Z",
      "number": 615,
      "timeOne": 0,
      "timeTwo": 1401,
      "url": "https://player.vimeo.com/video/374517467"
    }
  },
  "Prompt": "",
  "Hints": "Try traversing the three strings with three different pointers to solve this problem.\nDeclare three variables (i, j, and k, for instance) pointing to indices in the three strings, respectively, and starting at 0. At any given combination of indices, if neither the character at i in the first string nor the character at j in the second string is equal to the character at k in the third string, then the first two strings can't interweave to form the third one (at least not in whatever way led to the values of i, j, and k in question).\nIf at any given combination of the indices i, j, and k mentioned in Hint #2, the character at i in the first string or the character at j in the second string is equal to the character at k in the third string, then you can potentially interweave the first two strings to get the third one. In such a case, try incrementing the two relevant indices (i and k or j and k) and repeating this process until you confirm whether or not the first two strings can be interwoven to form the third one. Try using recursion to implement this algorithm.\nBy following Hint #3, you'll perform, in some cases, many computations multiple times. How can you use caching to improve the time complexity of this algorithm?",
  "SpaceTime": "O(nm) time | O(nm) space - where n is the length of the first string and m is the length of the second string",
  "PromptHTML": "<p>\n  Write a function that takes in three strings and returns a boolean\n  representing whether the third string can be formed by interweaving the first\n  two strings.\n</p>\n<p>\n  To interweave strings means to merge them by alternating their letters without\n  any specific pattern. For instance, the strings <span>\"abc\"</span> and\n  <span>\"123\"</span> can be interwoven as <span>\"a1b2c3\"</span>, as\n  <span>\"abc123\"</span>, and as <span>\"ab1c23\"</span> (this list is\n  nonexhaustive).\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">one</span> = \"codecomplete\"\n<span class=\"CodeEditor-promptParameter\">two</span> = \"your-dream-job\"\n<span class=\"CodeEditor-promptParameter\">three</span> = \"your-algodream-expertjob\"\n</pre>\n<h3>Sample Output</h3>\n<pre>\ntrue\n</pre>\n",
  "Notes": "",
  "IsLongOutput": false,
  "Visualization": {
    "inputType": null,
    "outputType": null
  },
  "CustomInputLanguages": [
    "javascript",
    "cpp",
    "python",
    "java",
    "csharp",
    "go",
    "swift",
    "typescript"
  ],
  "CustomInputVars": [
    {
      "Name": "one",
      "Example": "codecomplete",
      "Schema": {
        "type": "string"
      }
    },
    {
      "Name": "two",
      "Example": "your-dream-job",
      "Schema": {
        "type": "string"
      }
    },
    {
      "Name": "three",
      "Example": "your-algodream-expertjob",
      "Schema": {
        "type": "string"
      }
    }
  ],
  "Resources": {
    "cpp": {
      "Language": "cpp",
      "StartingCode": "using namespace std;\n\nbool interweavingStrings(string one, string two, string three) {\n  // Write your code here.\n  return false;\n}\n",
      "StartingTest": "class ProgramTest : public TestSuite {\npublic:\n  void Run() {\n\n    RunTest(\"Test Case 1\", []() {\n      string one = \"a\";\n      string two = \"b\";\n      string three = \"ab\";\n      assert(interweavingStrings(one, two, three) == true);\n    });\n\n    RunTest(\"Test Case 2\", []() {\n      string one = \"a\";\n      string two = \"b\";\n      string three = \"ba\";\n      assert(interweavingStrings(one, two, three) == true);\n    });\n\n    RunTest(\"Test Case 3\", []() {\n      string one = \"a\";\n      string two = \"b\";\n      string three = \"ac\";\n      assert(interweavingStrings(one, two, three) == false);\n    });\n\n    RunTest(\"Test Case 4\", []() {\n      string one = \"abc\";\n      string two = \"def\";\n      string three = \"abcdef\";\n      assert(interweavingStrings(one, two, three) == true);\n    });\n\n    RunTest(\"Test Case 5\", []() {\n      string one = \"abc\";\n      string two = \"def\";\n      string three = \"adbecf\";\n      assert(interweavingStrings(one, two, three) == true);\n    });\n\n    RunTest(\"Test Case 6\", []() {\n      string one = \"abc\";\n      string two = \"def\";\n      string three = \"deabcf\";\n      assert(interweavingStrings(one, two, three) == true);\n    });\n\n    RunTest(\"Test Case 7\", []() {\n      string one = \"aabcc\";\n      string two = \"dbbca\";\n      string three = \"aadbbcbcac\";\n      assert(interweavingStrings(one, two, three) == true);\n    });\n\n    RunTest(\"Test Case 8\", []() {\n      string one = \"aabcc\";\n      string two = \"dbbca\";\n      string three = \"aadbbbaccc\";\n      assert(interweavingStrings(one, two, three) == false);\n    });\n\n    RunTest(\"Test Case 9\", []() {\n      string one = \"codecomplete\";\n      string two = \"your-dream-job\";\n      string three = \"your-algodream-expertjob\";\n      assert(interweavingStrings(one, two, three) == true);\n    });\n\n    RunTest(\"Test Case 10\", []() {\n      string one = \"codecomplete\";\n      string two = \"your-dream-job\";\n      string three = \"ayloguore-xdpreeratm-job\";\n      assert(interweavingStrings(one, two, three) == true);\n    });\n\n    RunTest(\"Test Case 11\", []() {\n      string one = \"aaaaaaa\";\n      string two = \"aaaabaaa\";\n      string three = \"aaaaaaaaaaaaaab\";\n      assert(interweavingStrings(one, two, three) == false);\n    });\n\n    RunTest(\"Test Case 12\", []() {\n      string one = \"aaaaaaa\";\n      string two = \"aaaaaaa\";\n      string three = \"aaaaaaaaaaaaaa\";\n      assert(interweavingStrings(one, two, three) == true);\n    });\n\n    RunTest(\"Test Case 13\", []() {\n      string one = \"aacaaaa\";\n      string two = \"aaabaaa\";\n      string three = \"aaaabacaaaaaaa\";\n      assert(interweavingStrings(one, two, three) == true);\n    });\n\n    RunTest(\"Test Case 14\", []() {\n      string one = \"aacaaaa\";\n      string two = \"aaabaaa\";\n      string three = \"aaaacabaaaaaaa\";\n      assert(interweavingStrings(one, two, three) == true);\n    });\n\n    RunTest(\"Test Case 15\", []() {\n      string one = \"aacaaaa\";\n      string two = \"aaabaaa\";\n      string three = \"aaaaaacbaaaaaa\";\n      assert(interweavingStrings(one, two, three) == false);\n    });\n\n    RunTest(\"Test Case 16\", []() {\n      string one = \"codecomplete\";\n      string two = \"your-dream-job\";\n      string three = \"1your-algodream-expertjob\";\n      assert(interweavingStrings(one, two, three) == false);\n    });\n\n    RunTest(\"Test Case 17\", []() {\n      string one = \"codecomplete\";\n      string two = \"your-dream-job\";\n      string three = \"your-algodream-expertjob1\";\n      assert(interweavingStrings(one, two, three) == false);\n    });\n\n    RunTest(\"Test Case 18\", []() {\n      string one = \"codecomplete\";\n      string two = \"your-dream-job\";\n      string three = \"your-algodream-expertjo\";\n      assert(interweavingStrings(one, two, three) == false);\n    });\n  }\n};\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\npublic:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      string one = \"codecomplete\";\n      string two = \"your-dream-job\";\n      string three = \"your-algodream-expertjob\";\n      assert(interweavingStrings(one, two, three) == true);\n    });\n  }\n};\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nusing namespace std;\n\nbool areInterwoven(string one, string two, string three, int i, int j);\n\n// O(2^(n + m)) time | O(n + m) space - where n is the length\n// of the first string and m is the length of the second string\nbool interweavingStrings(string one, string two, string three) {\n  if (three.size() != one.size() + two.size()) {\n    return false;\n  }\n\n  return areInterwoven(one, two, three, 0, 0);\n}\n\nbool areInterwoven(string one, string two, string three, int i, int j) {\n  int k = i + j;\n  if (k == three.size())\n    return true;\n\n  if (i < one.size() && one[i] == three[k]) {\n    if (areInterwoven(one, two, three, i + 1, j))\n      return true;\n  }\n\n  if (j < two.size() && two[j] == three[k]) {\n    return areInterwoven(one, two, three, i, j + 1);\n  }\n\n  return false;\n}\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nusing namespace std;\n\nbool areInterwoven(string one, string two, string three, int i, int j,\n                   vector<vector<int>> &cache);\n\n// O(nm) time | O(nm) space - where n is the length of the\n// first string and m is the length of the second string\nbool interweavingStrings(string one, string two, string three) {\n  if (three.size() != one.size() + two.size()) {\n    return false;\n  }\n\n  vector<vector<int>> cache;\n  for (int i = 0; i < one.size() + 1; i++) {\n    cache.push_back(vector<int>{});\n    for (int j = 0; j < two.size() + 1; j++) {\n      cache[i].push_back(-1);\n    }\n  }\n\n  return areInterwoven(one, two, three, 0, 0, cache);\n}\n\nbool areInterwoven(string one, string two, string three, int i, int j,\n                   vector<vector<int>> &cache) {\n  if (cache[i][j] != -1)\n    return cache[i][j];\n\n  int k = i + j;\n  if (k == three.size())\n    return true;\n\n  if (i < one.size() && one[i] == three[k]) {\n    cache[i][j] = areInterwoven(one, two, three, i + 1, j, cache);\n    if (cache[i][j] == true)\n      return true;\n  }\n\n  if (j < two.size() && two[j] == three[k]) {\n    cache[i][j] = areInterwoven(one, two, three, i, j + 1, cache);\n    return cache[i][j];\n  }\n\n  cache[i][j] = false;\n  return false;\n}"
      ]
    },
    "csharp": {
      "Language": "csharp",
      "StartingCode": "\npublic class Program {\n\tpublic static bool Interweavingstrings(string one, string two, string three) {\n\t\t// Write your code here.\n\t\treturn false;\n\t}\n}\n",
      "StartingTest": "public class ProgramTest {\n\t[Test]\n\tpublic void TestCase1() {\n\t\tstring one = \"a\";\n\t\tstring two = \"b\";\n\t\tstring three = \"ab\";\n\t\tUtils.AssertTrue(Program.Interweavingstrings(one, two, three) == true);\n\t}\n\n\t[Test]\n\tpublic void TestCase2() {\n\t\tstring one = \"a\";\n\t\tstring two = \"b\";\n\t\tstring three = \"ba\";\n\t\tUtils.AssertTrue(Program.Interweavingstrings(one, two, three) == true);\n\t}\n\n\t[Test]\n\tpublic void TestCase3() {\n\t\tstring one = \"a\";\n\t\tstring two = \"b\";\n\t\tstring three = \"ac\";\n\t\tUtils.AssertTrue(Program.Interweavingstrings(one, two, three) == false);\n\t}\n\n\t[Test]\n\tpublic void TestCase4() {\n\t\tstring one = \"abc\";\n\t\tstring two = \"def\";\n\t\tstring three = \"abcdef\";\n\t\tUtils.AssertTrue(Program.Interweavingstrings(one, two, three) == true);\n\t}\n\n\t[Test]\n\tpublic void TestCase5() {\n\t\tstring one = \"abc\";\n\t\tstring two = \"def\";\n\t\tstring three = \"adbecf\";\n\t\tUtils.AssertTrue(Program.Interweavingstrings(one, two, three) == true);\n\t}\n\n\t[Test]\n\tpublic void TestCase6() {\n\t\tstring one = \"abc\";\n\t\tstring two = \"def\";\n\t\tstring three = \"deabcf\";\n\t\tUtils.AssertTrue(Program.Interweavingstrings(one, two, three) == true);\n\t}\n\n\t[Test]\n\tpublic void TestCase7() {\n\t\tstring one = \"aabcc\";\n\t\tstring two = \"dbbca\";\n\t\tstring three = \"aadbbcbcac\";\n\t\tUtils.AssertTrue(Program.Interweavingstrings(one, two, three) == true);\n\t}\n\n\t[Test]\n\tpublic void TestCase8() {\n\t\tstring one = \"aabcc\";\n\t\tstring two = \"dbbca\";\n\t\tstring three = \"aadbbbaccc\";\n\t\tUtils.AssertTrue(Program.Interweavingstrings(one, two, three) == false);\n\t}\n\n\t[Test]\n\tpublic void TestCase9() {\n\t\tstring one = \"codecomplete\";\n\t\tstring two = \"your-dream-job\";\n\t\tstring three = \"your-algodream-expertjob\";\n\t\tUtils.AssertTrue(Program.Interweavingstrings(one, two, three) == true);\n\t}\n\n\t[Test]\n\tpublic void TestCase10() {\n\t\tstring one = \"codecomplete\";\n\t\tstring two = \"your-dream-job\";\n\t\tstring three = \"ayloguore-xdpreeratm-job\";\n\t\tUtils.AssertTrue(Program.Interweavingstrings(one, two, three) == true);\n\t}\n\n\t[Test]\n\tpublic void TestCase11() {\n\t\tstring one = \"aaaaaaa\";\n\t\tstring two = \"aaaabaaa\";\n\t\tstring three = \"aaaaaaaaaaaaaab\";\n\t\tUtils.AssertTrue(Program.Interweavingstrings(one, two, three) == false);\n\t}\n\n\t[Test]\n\tpublic void TestCase12() {\n\t\tstring one = \"aaaaaaa\";\n\t\tstring two = \"aaaaaaa\";\n\t\tstring three = \"aaaaaaaaaaaaaa\";\n\t\tUtils.AssertTrue(Program.Interweavingstrings(one, two, three) == true);\n\t}\n\n\t[Test]\n\tpublic void TestCase13() {\n\t\tstring one = \"aacaaaa\";\n\t\tstring two = \"aaabaaa\";\n\t\tstring three = \"aaaabacaaaaaaa\";\n\t\tUtils.AssertTrue(Program.Interweavingstrings(one, two, three) == true);\n\t}\n\n\t[Test]\n\tpublic void TestCase14() {\n\t\tstring one = \"aacaaaa\";\n\t\tstring two = \"aaabaaa\";\n\t\tstring three = \"aaaacabaaaaaaa\";\n\t\tUtils.AssertTrue(Program.Interweavingstrings(one, two, three) == true);\n\t}\n\n\t[Test]\n\tpublic void TestCase15() {\n\t\tstring one = \"aacaaaa\";\n\t\tstring two = \"aaabaaa\";\n\t\tstring three = \"aaaaaacbaaaaaa\";\n\t\tUtils.AssertTrue(Program.Interweavingstrings(one, two, three) == false);\n\t}\n\n\t[Test]\n\tpublic void TestCase16() {\n\t\tstring one = \"codecomplete\";\n\t\tstring two = \"your-dream-job\";\n\t\tstring three = \"1your-algodream-expertjob\";\n\t\tUtils.AssertTrue(Program.Interweavingstrings(one, two, three) == false);\n\t}\n\n\t[Test]\n\tpublic void TestCase17() {\n\t\tstring one = \"codecomplete\";\n\t\tstring two = \"your-dream-job\";\n\t\tstring three = \"your-algodream-expertjob1\";\n\t\tUtils.AssertTrue(Program.Interweavingstrings(one, two, three) == false);\n\t}\n\n\t[Test]\n\tpublic void TestCase18() {\n\t\tstring one = \"codecomplete\";\n\t\tstring two = \"your-dream-job\";\n\t\tstring three = \"your-algodream-expertjo\";\n\t\tUtils.AssertTrue(Program.Interweavingstrings(one, two, three) == false);\n\t}\n}\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npublic class ProgramTest {\n\t[Test]\n\tpublic void TestCase1() {\n\t\tstring one = \"codecomplete\";\n\t\tstring two = \"your-dream-job\";\n\t\tstring three = \"your-algodream-expertjob\";\n\t\tUtils.AssertTrue(Program.Interweavingstrings(one, two, three) == true);\n\t}\n}\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\npublic class Program {\n\t// O(2^(n + m)) time | O(n + m) space - where n is the length\n\t// of the first string and m is the length of the second string\n\tpublic static bool Interweavingstrings(string one, string two, string three) {\n\t\tif (three.Length != one.Length + two.Length) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn areInterwoven(one, two, three, 0, 0);\n\t}\n\n\tpublic static bool areInterwoven(string one, string two, string three, int i, int j) {\n\t\tint k = i + j;\n\t\tif (k == three.Length) return true;\n\n\t\tif (i < one.Length && one[i] == three[k]) {\n\t\t\tif (areInterwoven(one, two, three, i + 1, j)) return true;\n\t\t}\n\n\t\tif (j < two.Length && two[j] == three[k]) {\n\t\t\treturn areInterwoven(one, two, three, i, j + 1);\n\t\t}\n\n\t\treturn false;\n\t}\n}\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nusing System.Collections.Generic;\n\npublic class Program {\n\t// O(nm) time | O(nm) space - where n is the length of the\n\t// first string and m is the length of the second string\n\tpublic static bool Interweavingstrings(string one, string two, string three) {\n\t\tif (three.Length != one.Length + two.Length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tbool?[,] cache = new bool?[one.Length+1, two.Length+1];\n\t\treturn areInterwoven(one, two, three, 0, 0, cache);\n\t}\n\n\tpublic static bool areInterwoven(string one, string two, string three, int i, int j,\n\t  bool?[,] cache) {\n\t\tif (cache[i,j].HasValue) {\n\t\t\treturn cache[i,j].Value;\n\t\t}\n\n\t\tint k = i + j;\n\t\tif (k == three.Length) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (i < one.Length && one[i] == three[k]) {\n\t\t\tcache[i,j] = areInterwoven(one, two, three, i + 1, j, cache);\n\t\t\tif (cache[i,j].HasValue && cache[i,j].Value) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\tif (j < two.Length && two[j] == three[k]) {\n\t\t\tcache[i,j] = areInterwoven(one, two, three, i, j + 1, cache);\n\t\t\treturn cache[i,j].Value;\n\t\t}\n\n\t\tcache[i,j] = false;\n\t\treturn false;\n\t}\n}\n"
      ]
    },
    "go": {
      "Language": "go",
      "StartingCode": "package main\n\nfunc InterweavingStrings(one, two, three string) bool {\n\t// Write your code here.\n\treturn false\n}\n",
      "StartingTest": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tone := \"a\"\n\ttwo := \"b\"\n\tthree := \"ab\"\n\trequire.Equal(t, InterweavingStrings(one, two, three), true)\n}\n\nfunc (s *TestSuite) TestCase2(t *TestCase) {\n\tone := \"a\"\n\ttwo := \"b\"\n\tthree := \"ba\"\n\trequire.Equal(t, InterweavingStrings(one, two, three), true)\n}\n\nfunc (s *TestSuite) TestCase3(t *TestCase) {\n\tone := \"a\"\n\ttwo := \"b\"\n\tthree := \"ac\"\n\trequire.Equal(t, InterweavingStrings(one, two, three), false)\n}\n\nfunc (s *TestSuite) TestCase4(t *TestCase) {\n\tone := \"abc\"\n\ttwo := \"def\"\n\tthree := \"abcdef\"\n\trequire.Equal(t, InterweavingStrings(one, two, three), true)\n}\n\nfunc (s *TestSuite) TestCase5(t *TestCase) {\n\tone := \"abc\"\n\ttwo := \"def\"\n\tthree := \"abdecf\"\n\trequire.Equal(t, InterweavingStrings(one, two, three), true)\n}\n\nfunc (s *TestSuite) TestCase6(t *TestCase) {\n\tone := \"abc\"\n\ttwo := \"def\"\n\tthree := \"deabcf\"\n\trequire.Equal(t, InterweavingStrings(one, two, three), true)\n}\n\nfunc (s *TestSuite) TestCase7(t *TestCase) {\n\tone := \"aabcc\"\n\ttwo := \"dbbca\"\n\tthree := \"aadbbcbcac\"\n\trequire.Equal(t, InterweavingStrings(one, two, three), true)\n}\n\nfunc (s *TestSuite) TestCase8(t *TestCase) {\n\tone := \"aabcc\"\n\ttwo := \"dbbca\"\n\tthree := \"aadbbbaccc\"\n\trequire.Equal(t, InterweavingStrings(one, two, three), false)\n}\n\nfunc (s *TestSuite) TestCase9(t *TestCase) {\n\tone := \"codecomplete\"\n\ttwo := \"your-dream-job\"\n\tthree := \"your-algodream-expertjob\"\n\trequire.Equal(t, InterweavingStrings(one, two, three), true)\n}\n\nfunc (s *TestSuite) TestCase10(t *TestCase) {\n\tone := \"codecomplete\"\n\ttwo := \"your-dream-job\"\n\tthree := \"ayloguore-xdpreeratm-job\"\n\trequire.Equal(t, InterweavingStrings(one, two, three), true)\n}\n\nfunc (s *TestSuite) TestCase11(t *TestCase) {\n\tone := \"aaaaaaa\"\n\ttwo := \"aaaabaaa\"\n\tthree := \"aaaaaaaaaaaaaab\"\n\trequire.Equal(t, InterweavingStrings(one, two, three), false)\n}\n\nfunc (s *TestSuite) TestCase12(t *TestCase) {\n\tone := \"aaaaaaa\"\n\ttwo := \"aaaaaaa\"\n\tthree := \"aaaaaaaaaaaaaa\"\n\trequire.Equal(t, InterweavingStrings(one, two, three), true)\n}\n\nfunc (s *TestSuite) TestCase13(t *TestCase) {\n\tone := \"aacaaaa\"\n\ttwo := \"aaabaaa\"\n\tthree := \"aaaabacaaaaaaa\"\n\trequire.Equal(t, InterweavingStrings(one, two, three), true)\n}\n\nfunc (s *TestSuite) TestCase14(t *TestCase) {\n\tone := \"aacaaaa\"\n\ttwo := \"aaabaaa\"\n\tthree := \"aaaacabaaaaaaa\"\n\trequire.Equal(t, InterweavingStrings(one, two, three), true)\n}\n\nfunc (s *TestSuite) TestCase15(t *TestCase) {\n\tone := \"aacaaaa\"\n\ttwo := \"aaabaaa\"\n\tthree := \"aaaaaacbaaaaaa\"\n\trequire.Equal(t, InterweavingStrings(one, two, three), false)\n}\n\nfunc (s *TestSuite) TestCase16(t *TestCase) {\n\tone := \"codecomplete\"\n\ttwo := \"your-dream-job\"\n\tthree := \"1your-algodream-expertjob\"\n\trequire.Equal(t, InterweavingStrings(one, two, three), false)\n}\n\nfunc (s *TestSuite) TestCase17(t *TestCase) {\n\tone := \"codecomplete\"\n\ttwo := \"your-dream-job\"\n\tthree := \"your-algodream-expertjob1\"\n\trequire.Equal(t, InterweavingStrings(one, two, three), false)\n}\n\nfunc (s *TestSuite) TestCase18(t *TestCase) {\n\tone := \"codecomplete\"\n\ttwo := \"your-dream-job\"\n\tthree := \"your-algodream-expertjo\"\n\trequire.Equal(t, InterweavingStrings(one, two, three), false)\n}\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tone := \"codecomplete\"\n\ttwo := \"your-dream-job\"\n\tthree := \"your-algodream-expertjob\"\n\trequire.Equal(t, InterweavingStrings(one, two, three), true)\n}",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\npackage main\n\n// O(2^(n + m)) time | O(n + m) space - where n is the length\n// of the first string and m is the length of the second string\nfunc InterweavingStrings(one, two, three string) bool {\n\tif len(three) != len(one)+len(two) {\n\t\treturn false\n\t}\n\treturn areInterwoven(one, two, three, 0, 0)\n}\n\nfunc areInterwoven(one, two, three string, i, j int) bool {\n\tk := i + j\n\tif k == len(three) {\n\t\treturn true\n\t}\n\n\tif i < len(one) && one[i] == three[k] {\n\t\tif areInterwoven(one, two, three, i+1, j) {\n\t\t\treturn true\n\t\t}\n\t}\n\n\tif j < len(two) && two[j] == three[k] {\n\t\treturn areInterwoven(one, two, three, i, j+1)\n\t}\n\treturn false\n}\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\npackage main\n\n// O(nm) time | O(nm) space - where n is the length of the\n// first string and m is the length of the second string\nfunc InterweavingStrings(one, two, three string) bool {\n\tif len(three) != len(one)+len(two) {\n\t\treturn false\n\t}\n\tcache := make([][]*bool, len(one)+1)\n\tfor i := 0; i < len(one)+1; i++ {\n\t\tcache[i] = make([]*bool, len(two)+1)\n\t}\n\treturn areInterwoven(one, two, three, 0, 0, cache)\n}\n\nfunc areInterwoven(one, two, three string, i, j int, cache [][]*bool) bool {\n\tif cache[i][j] != nil {\n\t\treturn *cache[i][j]\n\t}\n\n\tk := i + j\n\tif k == len(three) {\n\t\treturn true\n\t}\n\n\tif i < len(one) && one[i] == three[k] {\n\t\tresult := areInterwoven(one, two, three, i+1, j, cache)\n\t\tcache[i][j] = &result\n\t\tif result {\n\t\t\treturn true\n\t\t}\n\t}\n\n\tif j < len(two) && two[j] == three[k] {\n\t\tresult := areInterwoven(one, two, three, i, j+1, cache)\n\t\tcache[i][j] = &result\n\t\treturn result\n\t}\n\n\tresult := false\n\tcache[i][j] = &result\n\treturn result\n}\n"
      ]
    },
    "java": {
      "Language": "java",
      "StartingCode": "import java.util.*;\n\nclass Program {\n  public static boolean interweavingStrings(String one, String two, String three) {\n    // Write your code here.\n    return false;\n  }\n}\n",
      "StartingTest": "class ProgramTest {\n  @Test\n  public void TestCase1() {\n    String one = \"a\";\n    String two = \"b\";\n    String three = \"ab\";\n    Utils.assertTrue(Program.interweavingStrings(one, two, three) == true);\n  }\n\n  @Test\n  public void TestCase2() {\n    String one = \"a\";\n    String two = \"b\";\n    String three = \"ba\";\n    Utils.assertTrue(Program.interweavingStrings(one, two, three) == true);\n  }\n\n  @Test\n  public void TestCase3() {\n    String one = \"a\";\n    String two = \"b\";\n    String three = \"ac\";\n    Utils.assertTrue(Program.interweavingStrings(one, two, three) == false);\n  }\n\n  @Test\n  public void TestCase4() {\n    String one = \"abc\";\n    String two = \"def\";\n    String three = \"abcdef\";\n    Utils.assertTrue(Program.interweavingStrings(one, two, three) == true);\n  }\n\n  @Test\n  public void TestCase5() {\n    String one = \"abc\";\n    String two = \"def\";\n    String three = \"adbecf\";\n    Utils.assertTrue(Program.interweavingStrings(one, two, three) == true);\n  }\n\n  @Test\n  public void TestCase6() {\n    String one = \"abc\";\n    String two = \"def\";\n    String three = \"deabcf\";\n    Utils.assertTrue(Program.interweavingStrings(one, two, three) == true);\n  }\n\n  @Test\n  public void TestCase7() {\n    String one = \"aabcc\";\n    String two = \"dbbca\";\n    String three = \"aadbbcbcac\";\n    Utils.assertTrue(Program.interweavingStrings(one, two, three) == true);\n  }\n\n  @Test\n  public void TestCase8() {\n    String one = \"aabcc\";\n    String two = \"dbbca\";\n    String three = \"aadbbbaccc\";\n    Utils.assertTrue(Program.interweavingStrings(one, two, three) == false);\n  }\n\n  @Test\n  public void TestCase9() {\n    String one = \"codecomplete\";\n    String two = \"your-dream-job\";\n    String three = \"your-algodream-expertjob\";\n    Utils.assertTrue(Program.interweavingStrings(one, two, three) == true);\n  }\n\n  @Test\n  public void TestCase10() {\n    String one = \"codecomplete\";\n    String two = \"your-dream-job\";\n    String three = \"ayloguore-xdpreeratm-job\";\n    Utils.assertTrue(Program.interweavingStrings(one, two, three) == true);\n  }\n\n  @Test\n  public void TestCase11() {\n    String one = \"aaaaaaa\";\n    String two = \"aaaabaaa\";\n    String three = \"aaaaaaaaaaaaaab\";\n    Utils.assertTrue(Program.interweavingStrings(one, two, three) == false);\n  }\n\n  @Test\n  public void TestCase12() {\n    String one = \"aaaaaaa\";\n    String two = \"aaaaaaa\";\n    String three = \"aaaaaaaaaaaaaa\";\n    Utils.assertTrue(Program.interweavingStrings(one, two, three) == true);\n  }\n\n  @Test\n  public void TestCase13() {\n    String one = \"aacaaaa\";\n    String two = \"aaabaaa\";\n    String three = \"aaaabacaaaaaaa\";\n    Utils.assertTrue(Program.interweavingStrings(one, two, three) == true);\n  }\n\n  @Test\n  public void TestCase14() {\n    String one = \"aacaaaa\";\n    String two = \"aaabaaa\";\n    String three = \"aaaacabaaaaaaa\";\n    Utils.assertTrue(Program.interweavingStrings(one, two, three) == true);\n  }\n\n  @Test\n  public void TestCase15() {\n    String one = \"aacaaaa\";\n    String two = \"aaabaaa\";\n    String three = \"aaaaaacbaaaaaa\";\n    Utils.assertTrue(Program.interweavingStrings(one, two, three) == false);\n  }\n\n  @Test\n  public void TestCase16() {\n    String one = \"codecomplete\";\n    String two = \"your-dream-job\";\n    String three = \"1your-algodream-expertjob\";\n    Utils.assertTrue(Program.interweavingStrings(one, two, three) == false);\n  }\n\n  @Test\n  public void TestCase17() {\n    String one = \"codecomplete\";\n    String two = \"your-dream-job\";\n    String three = \"your-algodream-expertjob1\";\n    Utils.assertTrue(Program.interweavingStrings(one, two, three) == false);\n  }\n\n  @Test\n  public void TestCase18() {\n    String one = \"codecomplete\";\n    String two = \"your-dream-job\";\n    String three = \"your-algodream-expertjo\";\n    Utils.assertTrue(Program.interweavingStrings(one, two, three) == false);\n  }\n}\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    String one = \"codecomplete\";\n    String two = \"your-dream-job\";\n    String three = \"your-algodream-expertjob\";\n    Utils.assertTrue(Program.interweavingStrings(one, two, three) == true);\n  }\n}\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nclass Program {\n  // O(2^(n + m)) time | O(n + m) space - where n is the length\n  // of the first string and m is the length of the second string\n  public static boolean interweavingStrings(String one, String two, String three) {\n    if (three.length() != one.length() + two.length()) {\n      return false;\n    }\n\n    return areInterwoven(one, two, three, 0, 0);\n  }\n\n  public static boolean areInterwoven(String one, String two, String three, int i, int j) {\n    int k = i + j;\n    if (k == three.length()) return true;\n\n    if (i < one.length() && one.charAt(i) == three.charAt(k)) {\n      if (areInterwoven(one, two, three, i + 1, j)) return true;\n    }\n\n    if (j < two.length() && two.charAt(j) == three.charAt(k)) {\n      return areInterwoven(one, two, three, i, j + 1);\n    }\n\n    return false;\n  }\n}\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(nm) time | O(nm) space - where n is the length of the\n  // first string and m is the length of the second string\n  public static boolean interweavingStrings(String one, String two, String three) {\n    if (three.length() != one.length() + two.length()) {\n      return false;\n    }\n\n    Boolean[][] cache = new Boolean[one.length() + 1][two.length() + 1];\n    return areInterwoven(one, two, three, 0, 0, cache);\n  }\n\n  public static boolean areInterwoven(\n      String one, String two, String three, int i, int j, Boolean[][] cache) {\n    if (cache[i][j] != null) return cache[i][j];\n\n    int k = i + j;\n    if (k == three.length()) {\n      return true;\n    }\n\n    if (i < one.length() && one.charAt(i) == three.charAt(k)) {\n      cache[i][j] = areInterwoven(one, two, three, i + 1, j, cache);\n      if (cache[i][j]) return true;\n    }\n\n    if (j < two.length() && two.charAt(j) == three.charAt(k)) {\n      var result = areInterwoven(one, two, three, i, j + 1, cache);\n      cache[i][j] = result;\n      return result;\n    }\n\n    cache[i][j] = false;\n    return false;\n  }\n}\n"
      ]
    },
    "javascript": {
      "Language": "javascript",
      "StartingCode": "function interweavingStrings(one, two, three) {\n  // Write your code here.\n}\n\n// Do not edit the line below.\nexports.interweavingStrings = interweavingStrings;\n",
      "StartingTest": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const one = 'a';\n  const two = 'b';\n  const three = 'ab';\n  chai.expect(program.interweavingStrings(one, two, three)).to.deep.equal(true);\n});\n\nit('Test Case #2', function () {\n  const one = 'a';\n  const two = 'b';\n  const three = 'ba';\n  chai.expect(program.interweavingStrings(one, two, three)).to.deep.equal(true);\n});\n\nit('Test Case #3', function () {\n  const one = 'a';\n  const two = 'b';\n  const three = 'ac';\n  chai.expect(program.interweavingStrings(one, two, three)).to.deep.equal(false);\n});\n\nit('Test Case #4', function () {\n  const one = 'abc';\n  const two = 'def';\n  const three = 'abcdef';\n  chai.expect(program.interweavingStrings(one, two, three)).to.deep.equal(true);\n});\n\nit('Test Case #5', function () {\n  const one = 'abc';\n  const two = 'def';\n  const three = 'adbecf';\n  chai.expect(program.interweavingStrings(one, two, three)).to.deep.equal(true);\n});\n\nit('Test Case #6', function () {\n  const one = 'abc';\n  const two = 'def';\n  const three = 'deabcf';\n  chai.expect(program.interweavingStrings(one, two, three)).to.deep.equal(true);\n});\n\nit('Test Case #7', function () {\n  const one = 'aabcc';\n  const two = 'dbbca';\n  const three = 'aadbbcbcac';\n  chai.expect(program.interweavingStrings(one, two, three)).to.deep.equal(true);\n});\n\nit('Test Case #8', function () {\n  const one = 'aabcc';\n  const two = 'dbbca';\n  const three = 'aadbbbaccc';\n  chai.expect(program.interweavingStrings(one, two, three)).to.deep.equal(false);\n});\n\nit('Test Case #9', function () {\n  const one = 'codecomplete';\n  const two = 'your-dream-job';\n  const three = 'your-algodream-expertjob';\n  chai.expect(program.interweavingStrings(one, two, three)).to.deep.equal(true);\n});\n\nit('Test Case #10', function () {\n  const one = 'codecomplete';\n  const two = 'your-dream-job';\n  const three = 'ayloguore-xdpreeratm-job';\n  chai.expect(program.interweavingStrings(one, two, three)).to.deep.equal(true);\n});\n\nit('Test Case #11', function () {\n  const one = 'aaaaaaa';\n  const two = 'aaaabaaa';\n  const three = 'aaaaaaaaaaaaaab';\n  chai.expect(program.interweavingStrings(one, two, three)).to.deep.equal(false);\n});\n\nit('Test Case #12', function () {\n  const one = 'aaaaaaa';\n  const two = 'aaaaaaa';\n  const three = 'aaaaaaaaaaaaaa';\n  chai.expect(program.interweavingStrings(one, two, three)).to.deep.equal(true);\n});\n\nit('Test Case #13', function () {\n  const one = 'aacaaaa';\n  const two = 'aaabaaa';\n  const three = 'aaaabacaaaaaaa';\n  chai.expect(program.interweavingStrings(one, two, three)).to.deep.equal(true);\n});\n\nit('Test Case #14', function () {\n  const one = 'aacaaaa';\n  const two = 'aaabaaa';\n  const three = 'aaaacabaaaaaaa';\n  chai.expect(program.interweavingStrings(one, two, three)).to.deep.equal(true);\n});\n\nit('Test Case #15', function () {\n  const one = 'aacaaaa';\n  const two = 'aaabaaa';\n  const three = 'aaaaaacbaaaaaa';\n  chai.expect(program.interweavingStrings(one, two, three)).to.deep.equal(false);\n});\n\nit('Test Case #16', function () {\n  const one = 'codecomplete';\n  const two = 'your-dream-job';\n  const three = '1your-algodream-expertjob';\n  chai.expect(program.interweavingStrings(one, two, three)).to.deep.equal(false);\n});\n\nit('Test Case #17', function () {\n  const one = 'codecomplete';\n  const two = 'your-dream-job';\n  const three = 'your-algodream-expertjob1';\n  chai.expect(program.interweavingStrings(one, two, three)).to.deep.equal(false);\n});\n\nit('Test Case #18', function () {\n  const one = 'codecomplete';\n  const two = 'your-dream-job';\n  const three = 'your-algodream-expertjo';\n  chai.expect(program.interweavingStrings(one, two, three)).to.deep.equal(false);\n});\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const one = 'codecomplete';\n  const two = 'your-dream-job';\n  const three = 'your-algodream-expertjob';\n  chai.expect(program.interweavingStrings(one, two, three)).to.deep.equal(true);\n});\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\n// O(2^(n + m)) time | O(n + m) space - where n is the length\n// of the first string and m is the length of the second string\nfunction interweavingStrings(one, two, three) {\n  if (three.length !== one.length + two.length) {\n    return false;\n  }\n\n  return areInterwoven(one, two, three, 0, 0);\n}\n\nfunction areInterwoven(one, two, three, i, j) {\n  const k = i + j;\n  if (k === three.length) return true;\n\n  if (i < one.length && one[i] === three[k]) {\n    if (areInterwoven(one, two, three, i + 1, j)) return true;\n  }\n\n  if (j < two.length && two[j] === three[k]) {\n    return areInterwoven(one, two, three, i, j + 1);\n  }\n\n  return false;\n}\n\nexports.interweavingStrings = interweavingStrings;\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\n// O(nm) time | O(nm) space - where n is the length of the\n// first string and m is the length of the second string\nfunction interweavingStrings(one, two, three) {\n  if (three.length !== one.length + two.length) {\n    return false;\n  }\n\n  const cache = new Array(one.length + 1).fill(0).map(_ => new Array(two.length + 1).fill(null));\n  return areInterwoven(one, two, three, 0, 0, cache);\n}\n\nfunction areInterwoven(one, two, three, i, j, cache) {\n  if (cache[i][j] !== null) return cache[i][j];\n\n  const k = i + j;\n  if (k === three.length) return true;\n\n  if (i < one.length && one[i] === three[k]) {\n    cache[i][j] = areInterwoven(one, two, three, i + 1, j, cache);\n    if (cache[i][j]) return true;\n  }\n\n  if (j < two.length && two[j] === three[k]) {\n    cache[i][j] = areInterwoven(one, two, three, i, j + 1, cache);\n    return cache[i][j];\n  }\n\n  cache[i][j] = false;\n  return false;\n}\n\nexports.interweavingStrings = interweavingStrings;\n"
      ]
    },
    "python": {
      "Language": "python",
      "StartingCode": "def interweavingStrings(one, two, three):\n    # Write your code here.\n    pass\n",
      "StartingTest": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        one = \"a\"\n        two = \"b\"\n        three = \"ab\"\n        self.assertEqual(program.interweavingStrings(one, two, three), True)\n\n    def test_case_2(self):\n        one = \"a\"\n        two = \"b\"\n        three = \"ba\"\n        self.assertEqual(program.interweavingStrings(one, two, three), True)\n\n    def test_case_3(self):\n        one = \"a\"\n        two = \"b\"\n        three = \"ac\"\n        self.assertEqual(program.interweavingStrings(one, two, three), False)\n\n    def test_case_4(self):\n        one = \"abc\"\n        two = \"def\"\n        three = \"abcdef\"\n        self.assertEqual(program.interweavingStrings(one, two, three), True)\n\n    def test_case_5(self):\n        one = \"abc\"\n        two = \"def\"\n        three = \"abdecf\"\n        self.assertEqual(program.interweavingStrings(one, two, three), True)\n\n    def test_case_6(self):\n        one = \"abc\"\n        two = \"def\"\n        three = \"deabcf\"\n        self.assertEqual(program.interweavingStrings(one, two, three), True)\n\n    def test_case_7(self):\n        one = \"aabcc\"\n        two = \"dbbca\"\n        three = \"aadbbcbcac\"\n        self.assertEqual(program.interweavingStrings(one, two, three), True)\n\n    def test_case_8(self):\n        one = \"aabcc\"\n        two = \"dbbca\"\n        three = \"aadbbbaccc\"\n        self.assertEqual(program.interweavingStrings(one, two, three), False)\n\n    def test_case_9(self):\n        one = \"codecomplete\"\n        two = \"your-dream-job\"\n        three = \"your-algodream-expertjob\"\n        self.assertEqual(program.interweavingStrings(one, two, three), True)\n\n    def test_case_10(self):\n        one = \"codecomplete\"\n        two = \"your-dream-job\"\n        three = \"ayloguore-xdpreeratm-job\"\n        self.assertEqual(program.interweavingStrings(one, two, three), True)\n\n    def test_case_11(self):\n        one = \"aaaaaaa\"\n        two = \"aaaabaaa\"\n        three = \"aaaaaaaaaaaaaab\"\n        self.assertEqual(program.interweavingStrings(one, two, three), False)\n\n    def test_case_12(self):\n        one = \"aaaaaaa\"\n        two = \"aaaaaaa\"\n        three = \"aaaaaaaaaaaaaa\"\n        self.assertEqual(program.interweavingStrings(one, two, three), True)\n\n    def test_case_13(self):\n        one = \"aacaaaa\"\n        two = \"aaabaaa\"\n        three = \"aaaabacaaaaaaa\"\n        self.assertEqual(program.interweavingStrings(one, two, three), True)\n\n    def test_case_14(self):\n        one = \"aacaaaa\"\n        two = \"aaabaaa\"\n        three = \"aaaacabaaaaaaa\"\n        self.assertEqual(program.interweavingStrings(one, two, three), True)\n\n    def test_case_15(self):\n        one = \"aacaaaa\"\n        two = \"aaabaaa\"\n        three = \"aaaaaacbaaaaaa\"\n        self.assertEqual(program.interweavingStrings(one, two, three), False)\n\n    def test_case_16(self):\n        one = \"codecomplete\"\n        two = \"your-dream-job\"\n        three = \"1your-algodream-expertjob\"\n        self.assertEqual(program.interweavingStrings(one, two, three), False)\n\n    def test_case_17(self):\n        one = \"codecomplete\"\n        two = \"your-dream-job\"\n        three = \"your-algodream-expertjob1\"\n        self.assertEqual(program.interweavingStrings(one, two, three), False)\n\n    def test_case_18(self):\n        one = \"codecomplete\"\n        two = \"your-dream-job\"\n        three = \"your-algodream-expertjo\"\n        self.assertEqual(program.interweavingStrings(one, two, three), False)\n",
      "SandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        one = \"codecomplete\"\n        two = \"your-dream-job\"\n        three = \"your-algodream-expertjob\"\n        self.assertEqual(program.interweavingStrings(one, two, three), True)\n",
      "Solutions": [
        "# Copyright © 2020 Code Complete. All rights reserved.\n\n# O(2^(n + m)) time | O(n + m) space - where n is the length\n# of the first string and m is the length of the second string\ndef interweavingStrings(one, two, three):\n    if len(three) != len(one) + len(two):\n        return False\n\n    return areInterwoven(one, two, three, 0, 0)\n\n\ndef areInterwoven(one, two, three, i, j):\n    k = i + j\n    if k == len(three):\n        return True\n\n    if i < len(one) and one[i] == three[k]:\n        if areInterwoven(one, two, three, i + 1, j):\n            return True\n\n    if j < len(two) and two[j] == three[k]:\n        return areInterwoven(one, two, three, i, j + 1)\n\n    return False\n",
        "# Copyright © 2020 Code Complete. All rights reserved.\n\n# O(nm) time | O(nm) space - where n is the length of the\n# first string and m is the length of the second string\ndef interweavingStrings(one, two, three):\n    if len(three) != len(one) + len(two):\n        return False\n\n    cache = [[None for j in range(len(two) + 1)] for i in range(len(one) + 1)]\n    return areInterwoven(one, two, three, 0, 0, cache)\n\n\ndef areInterwoven(one, two, three, i, j, cache):\n    if cache[i][j] is not None:\n        return cache[i][j]\n\n    k = i + j\n    if k == len(three):\n        return True\n\n    if i < len(one) and one[i] == three[k]:\n        cache[i][j] = areInterwoven(one, two, three, i + 1, j, cache)\n        if cache[i][j]:\n            return True\n\n    if j < len(two) and two[j] == three[k]:\n        cache[i][j] = areInterwoven(one, two, three, i, j + 1, cache)\n        return cache[i][j]\n\n    cache[i][j] = False\n    return False\n"
      ]
    },
    "swift": {
      "Language": "swift",
      "StartingCode": "class Program {\n  func interweavingStrings(_ one: String, _ two: String, _ three: String) -> Bool {\n    // Write your code here\n    return false\n  }\n}\n",
      "StartingTest": "class ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      let one = \"a\"\n      let two = \"b\"\n      let three = \"ab\"\n      let result = program.interweavingStrings(one, two, three)\n      try assertEqual(true, result)\n    }\n    runTest(\"Test Case 2\") { () throws -> Void in\n      let one = \"a\"\n      let two = \"b\"\n      let three = \"ba\"\n      let result = program.interweavingStrings(one, two, three)\n      try assertEqual(true, result)\n    }\n    runTest(\"Test Case 3\") { () throws -> Void in\n      let one = \"a\"\n      let two = \"b\"\n      let three = \"ac\"\n      let result = program.interweavingStrings(one, two, three)\n      try assertEqual(false, result)\n    }\n    runTest(\"Test Case 4\") { () throws -> Void in\n      let one = \"abc\"\n      let two = \"def\"\n      let three = \"abcdef\"\n      let result = program.interweavingStrings(one, two, three)\n      try assertEqual(true, result)\n    }\n    runTest(\"Test Case 5\") { () throws -> Void in\n      let one = \"abc\"\n      let two = \"def\"\n      let three = \"abdecf\"\n      let result = program.interweavingStrings(one, two, three)\n      try assertEqual(true, result)\n    }\n    runTest(\"Test Case 6\") { () throws -> Void in\n      let one = \"abc\"\n      let two = \"def\"\n      let three = \"deabcf\"\n      let result = program.interweavingStrings(one, two, three)\n      try assertEqual(true, result)\n    }\n    runTest(\"Test Case 7\") { () throws -> Void in\n      let one = \"aabcc\"\n      let two = \"dbbca\"\n      let three = \"aadbbcbcac\"\n      let result = program.interweavingStrings(one, two, three)\n      try assertEqual(true, result)\n    }\n    runTest(\"Test Case 8\") { () throws -> Void in\n      let one = \"aabcc\"\n      let two = \"dbbca\"\n      let three = \"aadbbbaccc\"\n      let result = program.interweavingStrings(one, two, three)\n      try assertEqual(false, result)\n    }\n    runTest(\"Test Case 9\") { () throws -> Void in\n      let one = \"codecomplete\"\n      let two = \"your-dream-job\"\n      let three = \"your-algodream-expertjob\"\n      let result = program.interweavingStrings(one, two, three)\n      try assertEqual(true, result)\n    }\n    runTest(\"Test Case 10\") { () throws -> Void in\n      let one = \"codecomplete\"\n      let two = \"your-dream-job\"\n      let three = \"ayloguore-xdpreeratm-job\"\n      let result = program.interweavingStrings(one, two, three)\n      try assertEqual(true, result)\n    }\n    runTest(\"Test Case 11\") { () throws -> Void in\n      let one = \"aaaaaaa\"\n      let two = \"aaaabaaa\"\n      let three = \"aaaaaaaaaaaaaab\"\n      let result = program.interweavingStrings(one, two, three)\n      try assertEqual(false, result)\n    }\n    runTest(\"Test Case 12\") { () throws -> Void in\n      let one = \"aaaaaaa\"\n      let two = \"aaaaaaa\"\n      let three = \"aaaaaaaaaaaaaa\"\n      let result = program.interweavingStrings(one, two, three)\n      try assertEqual(true, result)\n    }\n    runTest(\"Test Case 13\") { () throws -> Void in\n      let one = \"aacaaaa\"\n      let two = \"aaabaaa\"\n      let three = \"aaaabacaaaaaaa\"\n      let result = program.interweavingStrings(one, two, three)\n      try assertEqual(true, result)\n    }\n    runTest(\"Test Case 14\") { () throws -> Void in\n      let one = \"aacaaaa\"\n      let two = \"aaabaaa\"\n      let three = \"aaaacabaaaaaaa\"\n      let result = program.interweavingStrings(one, two, three)\n      try assertEqual(true, result)\n    }\n    runTest(\"Test Case 15\") { () throws -> Void in\n      let one = \"aacaaaa\"\n      let two = \"aaabaaa\"\n      let three = \"aaaaaacbaaaaaa\"\n      let result = program.interweavingStrings(one, two, three)\n      try assertEqual(false, result)\n    }\n    runTest(\"Test Case 16\") { () throws -> Void in\n      let one = \"codecomplete\"\n      let two = \"your-dream-job\"\n      let three = \"1your-algodream-expertjob\"\n      let result = program.interweavingStrings(one, two, three)\n      try assertEqual(false, result)\n    }\n    runTest(\"Test Case 17\") { () throws -> Void in\n      let one = \"codecomplete\"\n      let two = \"your-dream-job\"\n      let three = \"your-algodream-expertjob1\"\n      let result = program.interweavingStrings(one, two, three)\n      try assertEqual(false, result)\n    }\n    runTest(\"Test Case 18\") { () throws -> Void in\n      let one = \"codecomplete\"\n      let two = \"your-dream-job\"\n      let three = \"your-algodream-expertjo\"\n      let result = program.interweavingStrings(one, two, three)\n      try assertEqual(false, result)\n    }\n  }\n}\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      let one = \"codecomplete\"\n      let two = \"your-dream-job\"\n      let three = \"your-algodream-expertjob\"\n      let result = program.interweavingStrings(one, two, three)\n      try assertEqual(true, result)\n    }\n  }\n}\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nclass Program {\n  // O(2^(n + m)) time | O(n + m) space - where n is the length\n  // of the first string and m is the length of the second string\n  func interweavingStrings(_ one: String, _ two: String, _ three: String) -> Bool {\n    if three.length != one.length + two.length {\n      return false\n    }\n    return areInterwoven(one, two, three, 0, 0)\n  }\n\n  func areInterwoven(_ one: String, _ two: String, _ three: String, _ i: Int, _ j: Int) -> Bool {\n    let k = i + j\n    if k == three.length {\n      return true\n    }\n\n    let oneI = one.index(one.startIndex, offsetBy: i)\n    let twoJ = two.index(two.startIndex, offsetBy: j)\n    let threeK = three.index(three.startIndex, offsetBy: k)\n    if i < one.length, one[oneI] == three[threeK] {\n      if areInterwoven(one, two, three, i + 1, j) {\n        return true\n      }\n    }\n\n    if j < two.length, two[twoJ] == three[threeK] {\n      return areInterwoven(one, two, three, i, j + 1)\n    }\n\n    return false\n  }\n}\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nclass Program {\n  // O(nm) time | O(nm) space - where n is the length of the\n  // first string and m is the length of the second string\n  func interweavingStrings(_ one: String, _ two: String, _ three: String) -> Bool {\n    if three.length != one.length + two.length {\n      return false\n    }\n    var cache: [[Bool?]] = Array(repeating: Array(repeating: nil, count: two.length + 1), count: one.length + 1)\n    return areInterwoven(one, two, three, 0, 0, &cache)\n  }\n\n  func areInterwoven(_ one: String, _ two: String, _ three: String, _ i: Int, _ j: Int, _ cache: inout [[Bool?]]) -> Bool {\n    if let result = cache[i][j] {\n      return result\n    }\n\n    let k = i + j\n    if k == three.length {\n      return true\n    }\n\n    let oneI = one.index(one.startIndex, offsetBy: i)\n    let twoJ = two.index(two.startIndex, offsetBy: j)\n    let threeK = three.index(three.startIndex, offsetBy: k)\n    if i < one.length, one[oneI] == three[threeK] {\n      let result = areInterwoven(one, two, three, i + 1, j, &cache)\n      cache[i][j] = result\n      if result {\n        return true\n      }\n    }\n\n    if j < two.length, two[twoJ] == three[threeK] {\n      let result = areInterwoven(one, two, three, i, j + 1, &cache)\n      cache[i][j] = result\n      return result\n    }\n\n    cache[i][j] = false\n    return false\n  }\n}\n"
      ]
    },
    "typescript": {
      "Language": "typescript",
      "StartingCode": "export function interweavingStrings(one: string, two: string, three: string) {\n  // Write your code here.\n  return false;\n}\n",
      "StartingTest": "",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const one = 'codecomplete';\n  const two = 'your-dream-job';\n  const three = 'your-algodream-expertjob';\n  chai.expect(program.interweavingStrings(one, two, three)).to.deep.equal(true);\n});\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\n// O(2^(n + m)) time | O(n + m) space - where n is the length\n// of the first string and m is the length of the second string\nexport function interweavingStrings(one: string, two: string, three: string) {\n  if (three.length !== one.length + two.length) {\n    return false;\n  }\n\n  return areInterwoven(one, two, three, 0, 0);\n}\n\nfunction areInterwoven(one: string, two: string, three: string, i: number, j: number): boolean {\n  const k = i + j;\n  if (k === three.length) return true;\n\n  if (i < one.length && one[i] === three[k]) {\n    if (areInterwoven(one, two, three, i + 1, j)) return true;\n  }\n\n  if (j < two.length && two[j] === three[k]) {\n    return areInterwoven(one, two, three, i, j + 1);\n  }\n\n  return false;\n}\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\n// O(nm) time | O(nm) space - where n is the length of the\n// first string and m is the length of the second string\nexport function interweavingStrings(one: string, two: string, three: string) {\n  if (three.length !== one.length + two.length) {\n    return false;\n  }\n\n  const cache: Array<boolean | null>[] = new Array(one.length + 1)\n    .fill(0)\n    .map(_ => new Array(two.length + 1).fill(null));\n  return areInterwoven(one, two, three, 0, 0, cache);\n}\n\nfunction areInterwoven(one: string, two: string, three: string, i: number, j: number, cache: Array<boolean | null>[]) {\n  if (cache[i][j] !== null) return cache[i][j];\n\n  const k = i + j;\n  if (k === three.length) return true;\n\n  if (i < one.length && one[i] === three[k]) {\n    cache[i][j] = areInterwoven(one, two, three, i + 1, j, cache);\n    if (cache[i][j]) return true;\n  }\n\n  if (j < two.length && two[j] === three[k]) {\n    cache[i][j] = areInterwoven(one, two, three, i, j + 1, cache);\n    return cache[i][j];\n  }\n\n  cache[i][j] = false;\n  return false;\n}\n"
      ]
    }
  },
  "JSONTestLanguages": [
    "javascript",
    "cpp",
    "python",
    "java",
    "csharp",
    "go",
    "swift",
    "typescript"
  ],
  "JSONTests": [
    {
      "one": "codecomplete",
      "three": "your-codedream-completejob",
      "two": "your-dream-job"
    },
    {
      "one": "a",
      "three": "ab",
      "two": "b"
    },
    {
      "one": "a",
      "three": "ba",
      "two": "b"
    },
    {
      "one": "a",
      "three": "ac",
      "two": "b"
    },
    {
      "one": "abc",
      "three": "abcdef",
      "two": "def"
    },
    {
      "one": "abc",
      "three": "adbecf",
      "two": "def"
    },
    {
      "one": "abc",
      "three": "deabcf",
      "two": "def"
    },
    {
      "one": "aabcc",
      "three": "aadbbcbcac",
      "two": "dbbca"
    },
    {
      "one": "aabcc",
      "three": "aadbbbaccc",
      "two": "dbbca"
    },
    {
      "one": "codecomplete",
      "three": "cyooduerc-odmrpelaemt-ejob",
      "two": "your-dream-job"
    },
    {
      "one": "aaaaaaa",
      "three": "aaaaaaaaaaaaaab",
      "two": "aaaabaaa"
    },
    {
      "one": "aaaaaaa",
      "three": "aaaaaaaaaaaaaa",
      "two": "aaaaaaa"
    },
    {
      "one": "aacaaaa",
      "three": "aaaabacaaaaaaa",
      "two": "aaabaaa"
    },
    {
      "one": "aacaaaa",
      "three": "aaaacabaaaaaaa",
      "two": "aaabaaa"
    },
    {
      "one": "aacaaaa",
      "three": "aaaaaacbaaaaaa",
      "two": "aaabaaa"
    },
    {
      "one": "codecomplete",
      "three": "1your-algodream-expertjob",
      "two": "your-dream-job"
    },
    {
      "one": "codecomplete",
      "three": "your-algodream-expertjob1",
      "two": "your-dream-job"
    },
    {
      "one": "codecomplete",
      "three": "your-algodream-expertjo",
      "two": "your-dream-job"
    },
    {
      "one": "ae",
      "three": "see",
      "two": "e"
    }
  ],
  "JSONAnswers": [
    [
      true,
      true,
      true,
      false,
      true,
      true,
      true,
      true,
      false,
      true,
      false,
      true,
      true,
      true,
      false,
      false,
      false,
      false,
      false
    ]
  ]
}
