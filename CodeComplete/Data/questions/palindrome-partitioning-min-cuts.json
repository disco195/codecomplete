{
  "Summary": {
    "Name": "Palindrome Partitioning Min Cuts",
    "Category": "Dynamic Programming",
    "Difficulty": 4,
    "Available": true,
    "Metadata": {
      "number": 662,
      "timeOne": 0,
      "timeTwo": 2290,
      "url": "https://player.vimeo.com/video/225713438"
    }
  },
  "Prompt": "",
  "Hints": "Try building a two-dimensional array of the palindromicities of all substrings of the input string. Let the value stored at row i and at column j represent the palindromicity of the substring starting at index i and ending at index j.\nChecking for palindromicity is typically an O(n) time operation. Can you eliminate this step and build the same two-dimensional array mentioned in Hint #1 a different way? Realize that the substring whose starting and ending indices are (i, j) is only a palindrome if string[i] is equal to string[j] and if the substring denoted by (i + 1, j - 1) is also a palindrome.\nBuild a one-dimensional array of the same length as the input string. At each index i in this array compute and store the minimum number of cuts needed for the substring whose starting and ending indices are (0, i). Use previously calculated values as well as the two-dimensional array mentioned in Hint #1 to find each value in this array.\n",
  "SpaceTime": "O(n^2) time | O(n^2) space - where n is the length of the input string\n",
  "PromptHTML": "<p>\n  Given a non-empty string, write a function that returns the minimum number of\n  cuts needed to perform on the string such that each remaining substring is a\n  palindrome.\n</p>\n<p>\n  A palindrome is defined as a string that's written the same forward as\n  backward. Note that single-character strings are palindromes.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">string</span> = \"noonabbad\"\n</pre>\n<h3>Sample Output</h3>\n<pre>\n2 <span class=\"CodeEditor-promptComment\">// noon | abba | d\"</span>\n</pre>\n",
  "Notes": "",
  "IsLongOutput": false,
  "Visualization": {
    "inputType": null,
    "outputType": null
  },
  "CustomInputLanguages": [
    "javascript",
    "cpp",
    "python",
    "java",
    "csharp",
    "go",
    "swift",
    "typescript"
  ],
  "CustomInputVars": [
    {
      "Name": "string",
      "Example": "noonabbad",
      "Schema": {
        "minLength": 1,
        "type": "string"
      }
    }
  ],
  "Resources": {
    "cpp": {
      "Language": "cpp",
      "StartingCode": "#include <vector>\nusing namespace std;\n\nint palindromePartitioningMinCuts(string string) {\n  // Write your code here.\n  return -1;\n}\n",
      "StartingTest": "class ProgramTest : public TestSuite {\npublic:\n  void Run() {\n\n    RunTest(\"Test Case 1\",\n            []() { assert(palindromePartitioningMinCuts(\"a\") == 0); });\n\n    RunTest(\"Test Case 2\",\n            []() { assert(palindromePartitioningMinCuts(\"abba\") == 0); });\n\n    RunTest(\"Test Case 3\",\n            []() { assert(palindromePartitioningMinCuts(\"abbba\") == 0); });\n\n    RunTest(\"Test Case 4\",\n            []() { assert(palindromePartitioningMinCuts(\"abb\") == 1); });\n\n    RunTest(\"Test Case 5\",\n            []() { assert(palindromePartitioningMinCuts(\"abbb\") == 1); });\n\n    RunTest(\"Test Case 6\",\n            []() { assert(palindromePartitioningMinCuts(\"noonabbad\") == 2); });\n\n    RunTest(\"Test Case 7\",\n            []() { assert(palindromePartitioningMinCuts(\"abcbm\") == 2); });\n\n    RunTest(\n        []() { assert(palindromePartitioningMinCuts(\"ababbbabbababa\") == 3); });\n\n    RunTest(\"Test Case 8\", []() {\n      assert(palindromePartitioningMinCuts(\"abbbacecffgbgffab\") == 4);\n    });\n\n    RunTest(\"Test Case 9\", []() {\n      assert(palindromePartitioningMinCuts(\"abcdefghijklmonpqrstuvwxyz\") == 25);\n    });\n\n    RunTest(\"Test Case 10\", []() {\n      assert(palindromePartitioningMinCuts(\n                 \"abcdefghijklmracecaronpqrstuvwxyz\") == 26);\n    });\n  }\n};\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\npublic:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      assert(palindromePartitioningMinCuts(\"noonabbad\") == 2);\n    });\n  }\n};\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\n#include <vector>\n#include <climits>\nusing namespace std;\n\nbool isPalindrome(string s);\n\n// O(n^3) time | O(n^2) space\nint palindromePartitioningMinCuts(string s) {\n  vector<vector<bool>> palindromes(s.length(), vector<bool>(s.length(), false));\n  for (int i = 0; i < s.length(); i++) {\n    for (int j = i; j < s.length(); j++) {\n      palindromes[i][j] = isPalindrome(s.substr(i, j + 1 - i));\n    }\n  }\n  vector<int> cuts(s.length(), INT_MAX);\n  for (int i = 0; i < s.length(); i++) {\n    if (palindromes[0][i]) {\n      cuts[i] = 0;\n    } else {\n      cuts[i] = cuts[i - 1] + 1;\n      for (int j = 1; j < i; j++) {\n        if (palindromes[j][i] && cuts[j - 1] + 1 < cuts[i]) {\n          cuts[i] = cuts[j - 1] + 1;\n        }\n      }\n    }\n  }\n  return cuts[s.length() - 1];\n}\n\nbool isPalindrome(string s) {\n  int leftIdx = 0;\n  int rightIdx = s.length() - 1;\n  while (leftIdx < rightIdx) {\n    if (s[leftIdx] != s[rightIdx]) {\n      return false;\n    }\n    leftIdx++;\n    rightIdx--;\n  }\n  return true;\n}\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\n#include <vector>\n#include <climits>\nusing namespace std;\n\n// O(n^2) time | O(n^2) space\nint palindromePartitioningMinCuts(string s) {\n  vector<vector<bool>> palindromes(s.length(), vector<bool>(s.length(), false));\n  for (int i = 0; i < s.length(); i++) {\n    palindromes[i][i] = true;\n  }\n  for (int length = 2; length < s.length() + 1; length++) {\n    for (int i = 0; i < s.length() - length + 1; i++) {\n      int j = i + length - 1;\n      if (length == 2) {\n        palindromes[i][j] = (s[i] == s[j]);\n      } else {\n        palindromes[i][j] = (s[i] == s[j] && palindromes[i + 1][j - 1]);\n      }\n    }\n  }\n  vector<int> cuts(s.length(), INT_MAX);\n  for (int i = 0; i < s.length(); i++) {\n    if (palindromes[0][i]) {\n      cuts[i] = 0;\n    } else {\n      cuts[i] = cuts[i - 1] + 1;\n      for (int j = 1; j < i; j++) {\n        if (palindromes[j][i] && cuts[j - 1] + 1 < cuts[i]) {\n          cuts[i] = cuts[j - 1] + 1;\n        }\n      }\n    }\n  }\n  return cuts[s.length() - 1];\n}\n"
      ]
    },
    "csharp": {
      "Language": "csharp",
      "StartingCode": "public class Program {\n\tpublic static int PalindromePartitioningMinCuts(string str) {\n\t\t// Write your code here.\n\t\treturn -1;\n\t}\n}\n",
      "StartingTest": "public class ProgramTest {\n\t[Test]\n\tpublic void TestCase1() {\n\t\tUtils.AssertTrue(Program.PalindromePartitioningMinCuts(\"a\") == 0);\n\t}\n\n\t[Test]\n\tpublic void TestCase2() {\n\t\tUtils.AssertTrue(Program.PalindromePartitioningMinCuts(\"abba\") == 0);\n\t}\n\n\t[Test]\n\tpublic void TestCase3() {\n\t\tUtils.AssertTrue(Program.PalindromePartitioningMinCuts(\"abbba\") == 0);\n\t}\n\n\t[Test]\n\tpublic void TestCase4() {\n\t\tUtils.AssertTrue(Program.PalindromePartitioningMinCuts(\"abb\") == 1);\n\t}\n\n\t[Test]\n\tpublic void TestCase5() {\n\t\tUtils.AssertTrue(Program.PalindromePartitioningMinCuts(\"abbb\") == 1);\n\t}\n\n\t[Test]\n\tpublic void TestCase6() {\n\t\tUtils.AssertTrue(Program.PalindromePartitioningMinCuts(\"noonabbad\") == 2);\n\t}\n\n\t[Test]\n\tpublic void TestCase7() {\n\t\tUtils.AssertTrue(Program.PalindromePartitioningMinCuts(\"abcbm\") == 2);\n\t}\n\n\t[Test]\n\tpublic void TestCase8() {\n\t\tUtils.AssertTrue(Program.PalindromePartitioningMinCuts(\"ababbbabbababa\") == 3);\n\t}\n\n\t[Test]\n\tpublic void TestCase9() {\n\t\tUtils.AssertTrue(Program.PalindromePartitioningMinCuts(\"abbbacecffgbgffab\") == 4);\n\t}\n\n\t[Test]\n\tpublic void TestCase10() {\n\t\tUtils.AssertTrue(Program.PalindromePartitioningMinCuts(\n\t\t\t  \"abcdefghijklmonpqrstuvwxyz\") == 25);\n\t}\n\n\t[Test]\n\tpublic void TestCase11() {\n\t\tUtils.AssertTrue(Program.PalindromePartitioningMinCuts(\n\t\t\t  \"abcdefghijklmracecaronpqrstuvwxyz\") == 26);\n\t}\n}\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npublic class ProgramTest {\n\t[Test]\n\tpublic void TestCase1() {\n\t\tUtils.AssertTrue(Program.PalindromePartitioningMinCuts(\"noonabbad\") == 2);\n\t}\n}\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nusing System;\n\npublic class Program {\n\t// O(n^3) time | O(n^2) space\n\tpublic static int PalindromePartitioningMinCuts(string str) {\n\t\tbool[,] palindromes = new bool[str.Length,str.Length];\n\t\tfor (int i = 0; i < str.Length; i++) {\n\t\t\tfor (int j = i; j < str.Length; j++) {\n\t\t\t\tpalindromes[i,j] = IsPalindrome(str.Substring(i, j + 1 - i));\n\t\t\t}\n\t\t}\n\t\tint[] cuts = new int[str.Length];\n\t\tArray.Fill(cuts, Int32.MaxValue);\n\t\tfor (int i = 0; i < str.Length; i++) {\n\t\t\tif (palindromes[0,i]) {\n\t\t\t\tcuts[i] = 0;\n\t\t\t} else {\n\t\t\t\tcuts[i] = cuts[i - 1] + 1;\n\t\t\t\tfor (int j = 1; j < i; j++) {\n\t\t\t\t\tif (palindromes[j,i] && cuts[j - 1] + 1 < cuts[i]) {\n\t\t\t\t\t\tcuts[i] = cuts[j - 1] + 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn cuts[str.Length - 1];\n\t}\n\n\tpublic static bool IsPalindrome(string str) {\n\t\tint leftIdx = 0;\n\t\tint rightIdx = str.Length - 1;\n\t\twhile (leftIdx < rightIdx) {\n\t\t\tif (str[leftIdx] != str[rightIdx]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tleftIdx++;\n\t\t\trightIdx--;\n\t\t}\n\t\treturn true;\n\t}\n}\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nusing System;\n\npublic class Program {\n\t// O(n^2) time | O(n^2) space\n\tpublic static int PalindromePartitioningMinCuts(string str) {\n\t\tbool[,] palindromes = new bool[str.Length,str.Length];\n\t\tfor (int i = 0; i < str.Length; i++) {\n\t\t\tfor (int j = 0; j < str.Length; j++) {\n\t\t\t\tif (i == j) {\n\t\t\t\t\tpalindromes[i,j] = true;\n\t\t\t\t} else {\n\t\t\t\t\tpalindromes[i,j] = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (int length = 2; length < str.Length + 1; length++) {\n\t\t\tfor (int i = 0; i < str.Length - length + 1; i++) {\n\t\t\t\tint j = i + length - 1;\n\t\t\t\tif (length == 2) {\n\t\t\t\t\tpalindromes[i,j] = (str[i] == str[j]);\n\t\t\t\t} else {\n\t\t\t\t\tpalindromes[i,\n\t\t\t\t\t  j] =\n\t\t\t\t\t  (str[i] == str[j] && palindromes[i + 1,j - 1]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint[] cuts = new int[str.Length];\n\t\tArray.Fill(cuts, Int32.MaxValue);\n\t\tfor (int i = 0; i < str.Length; i++) {\n\t\t\tif (palindromes[0,i]) {\n\t\t\t\tcuts[i] = 0;\n\t\t\t} else {\n\t\t\t\tcuts[i] = cuts[i - 1] + 1;\n\t\t\t\tfor (int j = 1; j < i; j++) {\n\t\t\t\t\tif (palindromes[j,i] && cuts[j - 1] + 1 < cuts[i]) {\n\t\t\t\t\t\tcuts[i] = cuts[j - 1] + 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn cuts[str.Length - 1];\n\t}\n}\n"
      ]
    },
    "go": {
      "Language": "go",
      "StartingCode": "package main\n\nfunc PalindromePartitioningMinCuts(str string) int {\n\t// Write your code here.\n\treturn -1\n}\n",
      "StartingTest": "package main\n\nimport (\n\t\"reflect\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tif !reflect.DeepEqual(PalindromePartitioningMinCuts(\"a\"), 0) {\n\t\tt.Fail()\n\t}\n}\n\nfunc (s *TestSuite) TestCase2(t *TestCase) {\n\tif !reflect.DeepEqual(PalindromePartitioningMinCuts(\"abba\"), 0) {\n\t\tt.Fail()\n\t}\n}\n\nfunc (s *TestSuite) TestCase3(t *TestCase) {\n\tif !reflect.DeepEqual(PalindromePartitioningMinCuts(\"abbba\"), 0) {\n\t\tt.Fail()\n\t}\n}\n\nfunc (s *TestSuite) TestCase4(t *TestCase) {\n\tif !reflect.DeepEqual(PalindromePartitioningMinCuts(\"abb\"), 1) {\n\t\tt.Fail()\n\t}\n}\n\nfunc (s *TestSuite) TestCase5(t *TestCase) {\n\tif !reflect.DeepEqual(PalindromePartitioningMinCuts(\"abbb\"), 1) {\n\t\tt.Fail()\n\t}\n}\n\nfunc (s *TestSuite) TestCase6(t *TestCase) {\n\tif !reflect.DeepEqual(PalindromePartitioningMinCuts(\"noonabbad\"), 2) {\n\t\tt.Fail()\n\t}\n}\n\nfunc (s *TestSuite) TestCase7(t *TestCase) {\n\tif !reflect.DeepEqual(PalindromePartitioningMinCuts(\"abcbm\"), 2) {\n\t\tt.Fail()\n\t}\n}\n\nfunc (s *TestSuite) TestCase8(t *TestCase) {\n\tif !reflect.DeepEqual(PalindromePartitioningMinCuts(\"ababbbabbababa\"), 3) {\n\t\tt.Fail()\n\t}\n}\n\nfunc (s *TestSuite) TestCase9(t *TestCase) {\n\tif !reflect.DeepEqual(PalindromePartitioningMinCuts(\"abbbacecffgbgffab\"), 4) {\n\t\tt.Fail()\n\t}\n}\n\nfunc (s *TestSuite) TestCase10(t *TestCase) {\n\tif !reflect.DeepEqual(PalindromePartitioningMinCuts(\"abcdefghijklmonpqrstuvwxyz\"), 25) {\n\t\tt.Fail()\n\t}\n}\n\nfunc (s *TestSuite) TestCase11(t *TestCase) {\n\tif !reflect.DeepEqual(PalindromePartitioningMinCuts(\"abcdefghijklmracecaronpqrstuvwxyz\"), 26) {\n\t\tt.Fail()\n\t}\n}\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport \"github.com/stretchr/testify/require\"\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\toutput := PalindromePartitioningMinCuts(\"noonabbad\")\n\trequire.Equal(t, 2, output)\n}\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\npackage main\n\nimport \"math\"\n\nfunc PalindromePartitioningMinCuts(s string) int {\n\tpalindromes := make([][]bool, len(s))\n\tfor i := range palindromes {\n\t\tpalindromes[i] = make([]bool, len(s))\n\t}\n\tfor i := range s {\n\t\tfor j := i; j < len(s); j++ {\n\t\t\tpalindromes[i][j] = isPalindrome(s[i : j+1])\n\t\t}\n\t}\n\tcuts := make([]int, len(s))\n\tfor i := range cuts {\n\t\tcuts[i] = math.MinInt32\n\t}\n\tfor i := range s {\n\t\tif palindromes[0][i] {\n\t\t\tcuts[i] = 0\n\t\t} else {\n\t\t\tcuts[i] = cuts[i-1] + 1\n\t\t\tfor j := 1; j < i; j++ {\n\t\t\t\tif palindromes[j][i] && cuts[j-1]+1 < cuts[i] {\n\t\t\t\t\tcuts[i] = cuts[j-1] + 1\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn cuts[len(s)-1]\n}\n\nfunc isPalindrome(s string) bool {\n\tfor i := 0; i < len(s)/2; i++ {\n\t\tif s[i] != s[len(s)-i-1] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\npackage main\n\nimport \"math\"\n\n// O(n^2) time | O(n^2) space\nfunc PalindromePartitioningMinCuts(str string) int {\n\tpalindromes := make([][]bool, len(str))\n\tfor i := range palindromes {\n\t\tpalindromes[i] = make([]bool, len(str))\n\t}\n\tfor i := range str {\n\t\tpalindromes[i][i] = true\n\t}\n\tfor length := 2; length < len(str)+1; length++ {\n\t\tfor i := 0; i < len(str)-length+1; i++ {\n\t\t\tj := i + length - 1\n\t\t\tif length == 2 {\n\t\t\t\tpalindromes[i][j] = (str[i] == str[j])\n\t\t\t} else {\n\t\t\t\tpalindromes[i][j] = (str[i] == str[j] && palindromes[i+1][j-1])\n\t\t\t}\n\t\t}\n\t}\n\tcuts := make([]int, len(str))\n\tfor i := range cuts {\n\t\tcuts[i] = math.MaxInt32\n\t}\n\tfor i := range str {\n\t\tif palindromes[0][i] {\n\t\t\tcuts[i] = 0\n\t\t} else {\n\t\t\tcuts[i] = cuts[i-1] + 1\n\t\t\tfor j := 1; j < i; j++ {\n\t\t\t\tif palindromes[j][i] && cuts[j-1]+1 < cuts[i] {\n\t\t\t\t\tcuts[i] = cuts[j-1] + 1\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn cuts[len(cuts)-1]\n}\n"
      ]
    },
    "java": {
      "Language": "java",
      "StartingCode": "import java.util.*;\n\nclass Program {\n  public static int palindromePartitioningMinCuts(String str) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "StartingTest": "class ProgramTest {\n  @Test\n  public void TestCase1() {\n    Utils.assertTrue(Program.palindromePartitioningMinCuts(\"a\") == 0);\n  }\n\n  @Test\n  public void TestCase2() {\n    Utils.assertTrue(Program.palindromePartitioningMinCuts(\"abba\") == 0);\n  }\n\n  @Test\n  public void TestCase3() {\n    Utils.assertTrue(Program.palindromePartitioningMinCuts(\"abbba\") == 0);\n  }\n\n  @Test\n  public void TestCase4() {\n    Utils.assertTrue(Program.palindromePartitioningMinCuts(\"abb\") == 1);\n  }\n\n  @Test\n  public void TestCase5() {\n    Utils.assertTrue(Program.palindromePartitioningMinCuts(\"abbb\") == 1);\n  }\n\n  @Test\n  public void TestCase6() {\n    Utils.assertTrue(Program.palindromePartitioningMinCuts(\"noonabbad\") == 2);\n  }\n\n  @Test\n  public void TestCase7() {\n    Utils.assertTrue(Program.palindromePartitioningMinCuts(\"abcbm\") == 2);\n  }\n\n  @Test\n  public void TestCase8() {\n    Utils.assertTrue(Program.palindromePartitioningMinCuts(\"ababbbabbababa\") == 3);\n  }\n\n  @Test\n  public void TestCase9() {\n    Utils.assertTrue(Program.palindromePartitioningMinCuts(\"abbbacecffgbgffab\") == 4);\n  }\n\n  @Test\n  public void TestCase10() {\n    Utils.assertTrue(Program.palindromePartitioningMinCuts(\"abcdefghijklmonpqrstuvwxyz\") == 25);\n  }\n\n  @Test\n  public void TestCase11() {\n    Utils.assertTrue(\n        Program.palindromePartitioningMinCuts(\"abcdefghijklmracecaronpqrstuvwxyz\") == 26);\n  }\n}\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    Utils.assertTrue(Program.palindromePartitioningMinCuts(\"noonabbad\") == 2);\n  }\n}\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nimport java.util.Arrays;\n\nclass Program {\n  // O(n^3) time | O(n^2) space\n  public static int palindromePartitioningMinCuts(String str) {\n    boolean[][] palindromes = new boolean[str.length()][str.length()];\n    for (int i = 0; i < str.length(); i++) {\n      for (int j = i; j < str.length(); j++) {\n        palindromes[i][j] = isPalindrome(str.substring(i, j + 1));\n      }\n    }\n    int[] cuts = new int[str.length()];\n    Arrays.fill(cuts, Integer.MAX_VALUE);\n    for (int i = 0; i < str.length(); i++) {\n      if (palindromes[0][i]) {\n        cuts[i] = 0;\n      } else {\n        cuts[i] = cuts[i - 1] + 1;\n        for (int j = 1; j < i; j++) {\n          if (palindromes[j][i] && cuts[j - 1] + 1 < cuts[i]) {\n            cuts[i] = cuts[j - 1] + 1;\n          }\n        }\n      }\n    }\n    return cuts[str.length() - 1];\n  }\n\n  public static boolean isPalindrome(String str) {\n    int leftIdx = 0;\n    int rightIdx = str.length() - 1;\n    while (leftIdx < rightIdx) {\n      if (str.charAt(leftIdx) != str.charAt(rightIdx)) {\n        return false;\n      }\n      leftIdx++;\n      rightIdx--;\n    }\n    return true;\n  }\n}\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nimport java.util.Arrays;\n\nclass Program {\n  // O(n^2) time | O(n^2) space\n  public static int palindromePartitioningMinCuts(String str) {\n    boolean[][] palindromes = new boolean[str.length()][str.length()];\n    for (int i = 0; i < str.length(); i++) {\n      for (int j = 0; j < str.length(); j++) {\n        if (i == j) {\n          palindromes[i][j] = true;\n        } else {\n          palindromes[i][j] = false;\n        }\n      }\n    }\n    for (int length = 2; length < str.length() + 1; length++) {\n      for (int i = 0; i < str.length() - length + 1; i++) {\n        int j = i + length - 1;\n        if (length == 2) {\n          palindromes[i][j] = (str.charAt(i) == str.charAt(j));\n        } else {\n          palindromes[i][j] = (str.charAt(i) == str.charAt(j) && palindromes[i + 1][j - 1]);\n        }\n      }\n    }\n    int[] cuts = new int[str.length()];\n    Arrays.fill(cuts, Integer.MAX_VALUE);\n    for (int i = 0; i < str.length(); i++) {\n      if (palindromes[0][i]) {\n        cuts[i] = 0;\n      } else {\n        cuts[i] = cuts[i - 1] + 1;\n        for (int j = 1; j < i; j++) {\n          if (palindromes[j][i] && cuts[j - 1] + 1 < cuts[i]) {\n            cuts[i] = cuts[j - 1] + 1;\n          }\n        }\n      }\n    }\n    return cuts[str.length() - 1];\n  }\n}\n"
      ]
    },
    "javascript": {
      "Language": "javascript",
      "StartingCode": "function palindromePartitioningMinCuts(string) {\n  // Write your code here.\n}\n\n// Do not edit the line below.\nexports.palindromePartitioningMinCuts = palindromePartitioningMinCuts;\n",
      "StartingTest": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai.expect(program.palindromePartitioningMinCuts('a')).to.deep.equal(0);\n});\n\nit('Test Case #2', function () {\n  chai.expect(program.palindromePartitioningMinCuts('abba')).to.deep.equal(0);\n});\n\nit('Test Case #3', function () {\n  chai.expect(program.palindromePartitioningMinCuts('abbba')).to.deep.equal(0);\n});\n\nit('Test Case #4', function () {\n  chai.expect(program.palindromePartitioningMinCuts('abb')).to.deep.equal(1);\n});\n\nit('Test Case #5', function () {\n  chai.expect(program.palindromePartitioningMinCuts('abbb')).to.deep.equal(1);\n});\n\nit('Test Case #6', function () {\n  chai.expect(program.palindromePartitioningMinCuts('noonabbad')).to.deep.equal(2);\n});\n\nit('Test Case #7', function () {\n  chai.expect(program.palindromePartitioningMinCuts('abcbm')).to.deep.equal(2);\n});\n\nit('Test Case #8', function () {\n  chai.expect(program.palindromePartitioningMinCuts('ababbbabbababa')).to.deep.equal(3);\n});\n\nit('Test Case #9', function () {\n  chai.expect(program.palindromePartitioningMinCuts('abbbacecffgbgffab')).to.deep.equal(4);\n});\n\nit('Test Case #10', function () {\n  chai.expect(program.palindromePartitioningMinCuts('abcdefghijklmonpqrstuvwxyz')).to.deep.equal(25);\n});\n\nit('Test Case #11', function () {\n  chai.expect(program.palindromePartitioningMinCuts('abcdefghijklmracecaronpqrstuvwxyz')).to.deep.equal(26);\n});\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai.expect(program.palindromePartitioningMinCuts('noonabbad')).to.deep.equal(2);\n});\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\n// O(n^3) time | O(n^2) space\nfunction palindromePartitioningMinCuts(string) {\n  const palindromes = new Array(string.length).fill(1).map(row => []);\n  for (let i = 0; i < string.length; i++) {\n    for (let j = i; j < string.length; j++) {\n      palindromes[i][j] = isPalindrome(string.slice(i, j + 1));\n    }\n  }\n  const cuts = new Array(string.length);\n  cuts.fill(Infinity);\n  for (let i = 0; i < string.length; i++) {\n    if (palindromes[0][i]) {\n      cuts[i] = 0;\n    } else {\n      cuts[i] = cuts[i - 1] + 1;\n      for (let j = 1; j < i; j++) {\n        if (palindromes[j][i] && cuts[j - 1] + 1 < cuts[i]) {\n          cuts[i] = cuts[j - 1] + 1;\n        }\n      }\n    }\n  }\n  return cuts[cuts.length - 1];\n}\n\nfunction isPalindrome(string) {\n  let leftIdx = 0;\n  let rightIdx = string.length - 1;\n  while (leftIdx < rightIdx) {\n    if (string[leftIdx] !== string[rightIdx]) return false;\n    leftIdx++;\n    rightIdx--;\n  }\n  return true;\n}\n\nexports.palindromePartitioningMinCuts = palindromePartitioningMinCuts;\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\n// O(n^2) time | O(n^2) space\nfunction palindromePartitioningMinCuts(string) {\n  const palindromes = [];\n  for (let i = 0; i < string.length; i++) {\n    const row = [];\n    for (let j = 0; j < string.length; j++) {\n      if (i === j) {\n        row.push(true);\n      } else {\n        row.push(false);\n      }\n    }\n    palindromes.push(row);\n  }\n  for (let length = 2; length < string.length + 1; length++) {\n    for (let i = 0; i < string.length - length + 1; i++) {\n      const j = i + length - 1;\n      if (length === 2) {\n        palindromes[i][j] = string[i] === string[j];\n      } else {\n        palindromes[i][j] = string[i] === string[j] && palindromes[i + 1][j - 1];\n      }\n    }\n  }\n  const cuts = new Array(string.length);\n  cuts.fill(Infinity);\n  for (let i = 0; i < string.length; i++) {\n    if (palindromes[0][i]) {\n      cuts[i] = 0;\n    } else {\n      cuts[i] = cuts[i - 1] + 1;\n      for (let j = 1; j < i; j++) {\n        if (palindromes[j][i] && cuts[j - 1] + 1 < cuts[i]) {\n          cuts[i] = cuts[j - 1] + 1;\n        }\n      }\n    }\n  }\n  return cuts[cuts.length - 1];\n}\n\nexports.palindromePartitioningMinCuts = palindromePartitioningMinCuts;\n"
      ]
    },
    "python": {
      "Language": "python",
      "StartingCode": "def palindromePartitioningMinCuts(string):\n    # Write your code here.\n    pass\n",
      "StartingTest": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(program.palindromePartitioningMinCuts(\"a\"), 0)\n\n    def test_case_2(self):\n        self.assertEqual(program.palindromePartitioningMinCuts(\"abba\"), 0)\n\n    def test_case_3(self):\n        self.assertEqual(program.palindromePartitioningMinCuts(\"abbba\"), 0)\n\n    def test_case_4(self):\n        self.assertEqual(program.palindromePartitioningMinCuts(\"abb\"), 1)\n\n    def test_case_5(self):\n        self.assertEqual(program.palindromePartitioningMinCuts(\"abbb\"), 1)\n\n    def test_case_6(self):\n        self.assertEqual(program.palindromePartitioningMinCuts(\"noonabbad\"), 2)\n\n    def test_case_7(self):\n        self.assertEqual(program.palindromePartitioningMinCuts(\"abcbm\"), 2)\n\n    def test_case_8(self):\n        self.assertEqual(program.palindromePartitioningMinCuts(\"ababbbabbababa\"), 3)\n\n    def test_case_9(self):\n        self.assertEqual(program.palindromePartitioningMinCuts(\"abbbacecffgbgffab\"), 4)\n\n    def test_case_10(self):\n        self.assertEqual(program.palindromePartitioningMinCuts(\"abcdefghijklmonpqrstuvwxyz\"), 25)\n\n    def test_case_11(self):\n        self.assertEqual(program.palindromePartitioningMinCuts(\"abcdefghijklmracecaronpqrstuvwxyz\"), 26)\n",
      "SandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(program.palindromePartitioningMinCuts(\"noonabbad\"), 2)\n",
      "Solutions": [
        "# Copyright © 2020 Code Complete. All rights reserved.\n\n# O(n^3) time | O(n^2) space\ndef palindromePartitioningMinCuts(string):\n    palindromes = [[False for i in string] for j in string]\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            palindromes[i][j] = isPalindrome(string[i : j + 1])\n    cuts = [float(\"inf\") for i in string]\n    for i in range(len(string)):\n        if palindromes[0][i]:\n            cuts[i] = 0\n        else:\n            cuts[i] = cuts[i - 1] + 1\n            for j in range(1, i):\n                if palindromes[j][i] and cuts[j - 1] + 1 < cuts[i]:\n                    cuts[i] = cuts[j - 1] + 1\n    return cuts[-1]\n\n\ndef isPalindrome(string):\n    leftIdx = 0\n    rightIdx = len(string) - 1\n    while leftIdx < rightIdx:\n        if string[leftIdx] != string[rightIdx]:\n            return False\n        leftIdx += 1\n        rightIdx -= 1\n    return True\n",
        "# Copyright © 2020 Code Complete. All rights reserved.\n\n# O(n^2) time | O(n^2) space\ndef palindromePartitioningMinCuts(string):\n    palindromes = [[False for i in string] for j in string]\n    for i in range(len(string)):\n        palindromes[i][i] = True\n    for length in range(2, len(string) + 1):\n        for i in range(0, len(string) - length + 1):\n            j = i + length - 1\n            if length == 2:\n                palindromes[i][j] = string[i] == string[j]\n            else:\n                palindromes[i][j] = string[i] == string[j] and palindromes[i + 1][j - 1]\n    cuts = [float(\"inf\") for i in string]\n    for i in range(len(string)):\n        if palindromes[0][i]:\n            cuts[i] = 0\n        else:\n            cuts[i] = cuts[i - 1] + 1\n            for j in range(1, i):\n                if palindromes[j][i] and cuts[j - 1] + 1 < cuts[i]:\n                    cuts[i] = cuts[j - 1] + 1\n    return cuts[-1]\n"
      ]
    },
    "swift": {
      "Language": "swift",
      "StartingCode": "class Program {\n  func palindromePartitioingMinCuts(_ string: String) -> Int {\n    // Write your code here.\n    return -1\n  }\n}\n",
      "StartingTest": "class ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      try assertEqual(0, program.palindromePartitioingMinCuts(\"a\"))\n    }\n    runTest(\"Test Case 2\") { () throws -> Void in\n      try assertEqual(0, program.palindromePartitioingMinCuts(\"abba\"))\n    }\n    runTest(\"Test Case 3\") { () throws -> Void in\n      try assertEqual(0, program.palindromePartitioingMinCuts(\"abbba\"))\n    }\n    runTest(\"Test Case 4\") { () throws -> Void in\n      try assertEqual(1, program.palindromePartitioingMinCuts(\"abb\"))\n    }\n    runTest(\"Test Case 5\") { () throws -> Void in\n      try assertEqual(1, program.palindromePartitioingMinCuts(\"abbb\"))\n    }\n    runTest(\"Test Case 6\") { () throws -> Void in\n      try assertEqual(2, program.palindromePartitioingMinCuts(\"noonabbad\"))\n    }\n    runTest(\"Test Case 7\") { () throws -> Void in\n      try assertEqual(2, program.palindromePartitioingMinCuts(\"abcbm\"))\n    }\n    runTest(\"Test Case 8\") { () throws -> Void in\n      try assertEqual(3, program.palindromePartitioingMinCuts(\"ababbbabbababa\"))\n    }\n    runTest(\"Test Case 9\") { () throws -> Void in\n      try assertEqual(4, program.palindromePartitioingMinCuts(\"abbbacecffgbgffab\"))\n    }\n    runTest(\"Test Case 10\") { () throws -> Void in\n      try assertEqual(25, program.palindromePartitioingMinCuts(\"abcdefghijklmonpqrstuvwxyz\"))\n    }\n    runTest(\"Test Case 11\") { () throws -> Void in\n      try assertEqual(26, program.palindromePartitioingMinCuts(\"abcdefghijklmracecaronpqrstuvwxyz\"))\n    }\n  }\n}\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      try assertEqual(2, program.palindromePartitioingMinCuts(\"noonabbad\"))\n    }\n  }\n}\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nclass Program {\n  // O(n^3) time | O(n^2) space\n  func palindromePartitioingMinCuts(_ string: String) -> Int {\n    var palindromes = string.map { _ in Array(repeating: false, count: string.count) }\n\n    for i in 0 ..< string.count {\n      for j in i ..< string.count {\n        let leftIndex = string.index(string.startIndex, offsetBy: i)\n        let rightIndex = string.index(string.startIndex, offsetBy: j)\n        let subString = String(string[leftIndex ... rightIndex])\n\n        palindromes[i][j] = isPalindrome(subString)\n      }\n    }\n\n    var cuts = Array(repeating: Int.max, count: string.count)\n\n    for i in 0 ..< string.count {\n      if palindromes[0][i] {\n        cuts[i] = 0\n      } else {\n        cuts[i] = cuts[i - 1] + 1\n\n        for j in 1 ..< i {\n          if palindromes[j][i], cuts[j - 1] + 1 < cuts[i] {\n            cuts[i] = cuts[j - 1] + 1\n          }\n        }\n      }\n    }\n\n    return cuts[string.count - 1]\n  }\n\n  func isPalindrome(_ string: String) -> Bool {\n    var leftIndex = 0\n    var rightIndex = string.count - 1\n\n    while leftIndex < rightIndex {\n      let leftStringIndex = string.index(string.startIndex, offsetBy: leftIndex)\n      let rightStringIndex = string.index(string.startIndex, offsetBy: rightIndex)\n\n      if string[leftStringIndex] != string[rightStringIndex] {\n        return false\n      }\n\n      leftIndex += 1\n      rightIndex -= 1\n    }\n\n    return true\n  }\n}\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nclass Program {\n  // O(n^2) time | O(n^2) space\n  func palindromePartitioingMinCuts(_ string: String) -> Int {\n    var palindromes = string.map { _ in Array(repeating: false, count: string.count) }\n\n    for i in 0 ..< string.count {\n      palindromes[i][i] = true\n    }\n\n    for length in stride(from: 2, through: string.count, by: 1) {\n      for i in stride(from: 0, through: string.count - length, by: 1) {\n        let j = i + length - 1\n\n        let iStringIndex = string.index(string.startIndex, offsetBy: i)\n        let jStringIndex = string.index(string.startIndex, offsetBy: j)\n\n        if length == 2, string[iStringIndex] == string[jStringIndex] {\n          palindromes[i][j] = true\n        } else if palindromes[i + 1][j - 1], string[iStringIndex] == string[jStringIndex] {\n          palindromes[i][j] = true\n        }\n      }\n    }\n\n    var cuts = Array(repeating: Int.max, count: string.count)\n\n    for i in 0 ..< string.count {\n      if palindromes[0][i] {\n        cuts[i] = 0\n      } else {\n        cuts[i] = cuts[i - 1] + 1\n\n        for j in 1 ..< i {\n          if palindromes[j][i], cuts[j - 1] + 1 < cuts[i] {\n            cuts[i] = cuts[j - 1] + 1\n          }\n        }\n      }\n    }\n\n    return cuts[string.count - 1]\n  }\n}\n"
      ]
    },
    "typescript": {
      "Language": "typescript",
      "StartingCode": "export function palindromePartitioningMinCuts(string: string) {\n  // Write your code here.\n  return -1;\n}\n",
      "StartingTest": "",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  chai.expect(program.palindromePartitioningMinCuts('noonabbad')).to.deep.equal(2);\n});\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\n// O(n^3) time | O(n^2) space\nexport function palindromePartitioningMinCuts(string: string) {\n  const palindromes: boolean[][] = new Array(string.length).fill(1).map(row => []);\n  for (let i = 0; i < string.length; i++) {\n    for (let j = i; j < string.length; j++) {\n      palindromes[i][j] = isPalindrome(string.slice(i, j + 1));\n    }\n  }\n  const cuts: number[] = new Array(string.length);\n  cuts.fill(Infinity);\n  for (let i = 0; i < string.length; i++) {\n    if (palindromes[0][i]) {\n      cuts[i] = 0;\n    } else {\n      cuts[i] = cuts[i - 1] + 1;\n      for (let j = 1; j < i; j++) {\n        if (palindromes[j][i] && cuts[j - 1] + 1 < cuts[i]) {\n          cuts[i] = cuts[j - 1] + 1;\n        }\n      }\n    }\n  }\n  return cuts[cuts.length - 1];\n}\n\nfunction isPalindrome(string: string) {\n  let leftIdx = 0;\n  let rightIdx = string.length - 1;\n  while (leftIdx < rightIdx) {\n    if (string[leftIdx] !== string[rightIdx]) return false;\n    leftIdx++;\n    rightIdx--;\n  }\n  return true;\n}\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\n// O(n^2) time | O(n^2) space\nexport function palindromePartitioningMinCuts(string: string) {\n  const palindromes: boolean[][] = [];\n  for (let i = 0; i < string.length; i++) {\n    const row: boolean[] = [];\n    for (let j = 0; j < string.length; j++) {\n      if (i === j) {\n        row.push(true);\n      } else {\n        row.push(false);\n      }\n    }\n    palindromes.push(row);\n  }\n  for (let length = 2; length < string.length + 1; length++) {\n    for (let i = 0; i < string.length - length + 1; i++) {\n      const j = i + length - 1;\n      if (length === 2) {\n        palindromes[i][j] = string[i] === string[j];\n      } else {\n        palindromes[i][j] = string[i] === string[j] && palindromes[i + 1][j - 1];\n      }\n    }\n  }\n  const cuts: number[] = new Array(string.length);\n  cuts.fill(Infinity);\n  for (let i = 0; i < string.length; i++) {\n    if (palindromes[0][i]) {\n      cuts[i] = 0;\n    } else {\n      cuts[i] = cuts[i - 1] + 1;\n      for (let j = 1; j < i; j++) {\n        if (palindromes[j][i] && cuts[j - 1] + 1 < cuts[i]) {\n          cuts[i] = cuts[j - 1] + 1;\n        }\n      }\n    }\n  }\n  return cuts[cuts.length - 1];\n}\n"
      ]
    }
  },
  "JSONTestLanguages": [
    "javascript",
    "cpp",
    "python",
    "java",
    "csharp",
    "go",
    "swift",
    "typescript"
  ],
  "JSONTests": [
    {
      "string": "noonabbad"
    },
    {
      "string": "a"
    },
    {
      "string": "abba"
    },
    {
      "string": "abbba"
    },
    {
      "string": "abb"
    },
    {
      "string": "abbb"
    },
    {
      "string": "abcbm"
    },
    {
      "string": "ababbbabbababa"
    },
    {
      "string": "abbbacecffgbgffab"
    },
    {
      "string": "abcdefghijklmonpqrstuvwxyz"
    },
    {
      "string": "abcdefghijklmracecaronpqrstuvwxyz"
    }
  ],
  "JSONAnswers": [
    [
      2,
      0,
      0,
      0,
      1,
      1,
      2,
      3,
      4,
      25,
      26
    ]
  ]
}