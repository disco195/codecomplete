{
  "Summary": {
    "Name": "Knapsack Problem",
    "Category": "Dynamic Programming",
    "Difficulty": 3,
    "Available": true,
    "Metadata": {
      "number": 659,
      "timeOne": 0,
      "timeTwo": 1929,
      "url": "https://player.vimeo.com/video/225692965"
    }
  },
  "Prompt": "",
  "Hints": "Try building a two-dimensional array of the maximum values that knapsacks of all capacities between 0 and c inclusive could hold, given one, two, three, etc., items. Let columns represent capacities and rows represent items.\nBuild up the array mentioned in Hint #1 one row at a time. In other words, find the maximum values that knapsacks of all capacities between 0 and c can hold with only one item, then with two, etc., until you use all items. Find a formula that relates the maximum value at any given point to previous values.\nBacktrack your way through the two-dimensional array mentioned in Hint #1 to find which items are in your knapsack. Start at the final index in the array and check whether or not the value stored at that index is equal to the value located one row above. If it isn't, then the item represented by the current row is in the knapsack.\n",
  "SpaceTime": "O(nc) time | O(nc) space - where n is the number of items and c is the capacity\n",
  "PromptHTML": "<p>\n  You're given an array of arrays where each subarray holds two integer values\n  and represents an item; the first integer is the item's value, and the second\n  integer is the item's weight. You're also given an integer representing the\n  maximum capacity of a knapsack that you have. Your goal is to fit items in\n  your knapsack without having the sum of their weights exceed the knapsack's\n  capacity, all the while maximizing their combined value.\n</p>\n<p>\n  Write a function that returns the maximized combined value of the items that\n  you should pick as well as an array of the indices of each item picked.\n</p>\n<p>\n  You can assume that there will only be one combination of items that maximizes\n  the total value in the knapsack.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">items</span> = [[1, 2], [4, 3], [5, 6], [6, 7]]\n<span class=\"CodeEditor-promptParameter\">capacity</span> = 10\n</pre>\n<h3>Sample Output</h3>\n<pre>\n[10, [1, 3]]\n</pre>\n",
  "Notes": "",
  "IsLongOutput": false,
  "Visualization": {
    "inputType": null,
    "outputType": null
  },
  "CustomInputLanguages": [
    "javascript",
    "cpp",
    "python",
    "java",
    "csharp",
    "go",
    "swift",
    "typescript"
  ],
  "CustomInputVars": [
    {
      "Name": "items",
      "Example": [
        [
          1,
          2
        ],
        [
          4,
          3
        ],
        [
          5,
          6
        ],
        [
          6,
          7
        ]
      ],
      "Schema": {
        "items": {
          "items": {
            "type": "integer"
          },
          "maxItems": 2,
          "minItems": 2,
          "type": "array"
        },
        "type": "array"
      }
    },
    {
      "Name": "capacity",
      "Example": 10,
      "Schema": {
        "minimum": 0,
        "type": "integer"
      }
    }
  ],
  "Resources": {
    "cpp": {
      "Language": "cpp",
      "StartingCode": "#include <vector>\nusing namespace std;\n\nvector<vector<int>> knapsackProblem(vector<vector<int>> items, int capacity) {\n  // Write your code here.\n  // Replace return below.\n  return {\n      {10},   // total value\n      {1, 2}, // item indices\n  };\n}\n",
      "StartingTest": "class ProgramTest : public TestSuite {\npublic:\n  void Run() {\n\n    RunTest(\"Test Case 1\", []() {\n      vector<vector<int>> vector1{{1, 2}, {4, 3}, {5, 6}, {6, 7}};\n      vector<vector<int>> vector1S{{10}, {1, 3}};\n      assert(knapsackProblem(vector1, 10) == vector1S);\n    });\n\n    RunTest(\"Test Case 2\", []() {\n      vector<vector<int>> vector2{\n          {465, 100},  {400, 85},   {255, 55},  {350, 45},\n          {650, 130},  {1000, 190}, {455, 100}, {100, 25},\n          {1200, 190}, {320, 65},   {750, 100}, {50, 45},\n          {550, 65},   {100, 50},   {600, 70},  {240, 40}};\n      vector<vector<int>> vector2S{{1500}, {3, 12, 14}};\n      assert(knapsackProblem(vector2, 200) == vector2S);\n    });\n\n    RunTest(\"Test Case 3\", []() {\n      vector<vector<int>> vector3{\n          {465, 100},  {400, 85},   {255, 55},  {350, 45},\n          {650, 130},  {1000, 190}, {455, 100}, {100, 25},\n          {1200, 190}, {320, 65},   {750, 100}, {50, 45},\n          {550, 65},   {100, 50},   {600, 70},  {255, 40}};\n      vector<vector<int>> vector3S{{1505}, {7, 12, 14, 15}};\n      assert(knapsackProblem(vector3, 200) == vector3S);\n    });\n\n    RunTest(\"Test Case 4\", []() {\n      vector<vector<int>> vector4{\n          {2, 1}, {70, 70}, {30, 30}, {69, 69}, {100, 100}};\n      vector<vector<int>> vector4S{{101}, {0, 2, 3}};\n      assert(knapsackProblem(vector4, 100) == vector4S);\n    });\n\n    RunTest(\"Test Case 5\", []() {\n      vector<vector<int>> vector5{\n          {1, 2}, {70, 70}, {30, 30}, {69, 69}, {99, 100}};\n      vector<vector<int>> vector5S{{100}, {1, 2}};\n      assert(knapsackProblem(vector5, 100) == vector5S);\n    });\n\n    RunTest(\"Test Case 6\", []() {\n      vector<vector<int>> vector6{\n          {1, 2}, {70, 70}, {30, 30}, {69, 69}, {100, 100}};\n      vector<vector<int>> vector6S{{0}, {}};\n      assert(knapsackProblem(vector6, 0) == vector6S);\n    });\n  }\n};\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\npublic:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<vector<int>> vector1{{1, 2}, {4, 3}, {5, 6}, {6, 7}};\n      vector<vector<int>> vector1S{{10}, {1, 3}};\n      assert(knapsackProblem(vector1, 10) == vector1S);\n    });\n  }\n};\n",
      "Solutions": [
        "// Copyright Â© 2020 Code Complete. All rights reserved.\n\n#include <vector>\nusing namespace std;\n\nvector<vector<int>> getKnapsackItems(vector<vector<int>> knapsackValues,\n                                     vector<vector<int>> items, int weight);\n\n// O(nc) time | O(nc) space\nvector<vector<int>> knapsackProblem(vector<vector<int>> items, int capacity) {\n  vector<vector<int>> knapsackValues(items.size() + 1,\n                                     vector<int>(capacity + 1, 0));\n  for (int i = 1; i < items.size() + 1; i++) {\n    int currentWeight = items[i - 1][1];\n    int currentValue = items[i - 1][0];\n    for (int c = 0; c < capacity + 1; c++) {\n      if (currentWeight > c) {\n        knapsackValues[i][c] = knapsackValues[i - 1][c];\n      } else {\n        knapsackValues[i][c] =\n            max(knapsackValues[i - 1][c],\n                knapsackValues[i - 1][c - currentWeight] + currentValue);\n      }\n    }\n  }\n  return getKnapsackItems(knapsackValues, items,\n                          knapsackValues[items.size()][capacity]);\n}\n\nvector<vector<int>> getKnapsackItems(vector<vector<int>> knapsackValues,\n                                     vector<vector<int>> items, int weight) {\n  vector<vector<int>> solution = {{}, {}};\n  int i = knapsackValues.size() - 1;\n  int c = knapsackValues[0].size() - 1;\n  while (i > 0) {\n    if (knapsackValues[i][c] == knapsackValues[i - 1][c]) {\n      i--;\n    } else {\n      solution[1].insert(solution[1].begin(), i - 1);\n      c -= items[i - 1][1];\n      i--;\n    }\n    if (c == 0) {\n      break;\n    }\n  }\n  solution[0].push_back(weight);\n  return solution;\n}\n"
      ]
    },
    "csharp": {
      "Language": "csharp",
      "StartingCode": "using System.Collections.Generic;\n\npublic class Program {\n\tpublic static List<List<int> > KnapsackProblem(int[,] items, int capacity) {\n\t\t// Write your code here.\n\t\t// Replace the code below.\n\t\tList<int> totalValue = new List<int> {\n\t\t\t10\n\t\t};\n\t\tList<int> finalItems = new List<int> {\n\t\t\t1, 2\n\t\t};\n\t\tvar result = new List<List<int> >();\n\t\tresult.Add(totalValue);\n\t\tresult.Add(finalItems);\n\t\treturn result;\n\t}\n}\n",
      "StartingTest": "using System;\nusing System.Collections.Generic;\n\npublic class ProgramTest {\n\t[Test]\n\tpublic void TestCase1() {\n\t\tint[,] input = {{1, 2}, {4, 3}, {5, 6}, {6, 7}};\n\t\tTuple<int, int[]> expected = Tuple.Create(10, new int[] {1, 3});\n\t\tUtils.AssertTrue(compare(Program.KnapsackProblem(input, 10), expected));\n\t}\n\n\t[Test]\n\tpublic void TestCase2() {\n\t\tint[,\n\t\t] input =\n\t\t{{465, 100}, {400, 85}, {255, 55}, {350, 45}, {650, 130}, {1000, 190}, {455, 100},\n\t\t {100, 25}, {1200, 190}, {320, 65}, {750, 100}, {50, 45}, {550, 65},\n\t\t {100, 50}, {600, 70}, {240, 40}};\n\t\tTuple<int, int[]> expected = Tuple.Create(1500, new int[] {3, 12, 14});\n\t\tUtils.AssertTrue(compare(Program.KnapsackProblem(input, 200), expected));\n\t}\n\n\t[Test]\n\tpublic void TestCase3() {\n\t\tint[,\n\t\t] input =\n\t\t{{465, 100}, {400, 85}, {255, 55}, {350, 45}, {650, 130}, {1000, 190}, {455, 100},\n\t\t {100, 25}, {1200, 190}, {320, 65}, {750, 100}, {50, 45}, {550, 65},\n\t\t {100, 50}, {600, 70}, {255, 40}};\n\t\tTuple<int, int[]> expected = Tuple.Create(1505, new int[] {7, 12, 14, 15});\n\t\tUtils.AssertTrue(compare(Program.KnapsackProblem(input, 200), expected));\n\t}\n\n\t[Test]\n\tpublic void TestCase4() {\n\t\tint[,] input = {{2, 1}, {70, 70}, {30, 30}, {69, 69}, {100, 100}};\n\t\tTuple<int, int[]> expected = Tuple.Create(101, new int[] {0, 2, 3});\n\t\tUtils.AssertTrue(compare(Program.KnapsackProblem(input, 100), expected));\n\t}\n\n\t[Test]\n\tpublic void TestCase5() {\n\t\tint[,] input = {{1, 2}, {70, 70}, {30, 30}, {69, 69}, {99, 100}};\n\t\tTuple<int, int[]> expected = Tuple.Create(100, new int[] {1, 2});\n\t\tUtils.AssertTrue(compare(Program.KnapsackProblem(input, 100), expected));\n\t}\n\n\t[Test]\n\tpublic void TestCase6() {\n\t\tint[,] input = {{1, 2}, {70, 70}, {30, 30}, {69, 69}, {100, 100}};\n\t\tTuple<int, int[]> expected = Tuple.Create(0, new int[] {});\n\t\tUtils.AssertTrue(compare(Program.KnapsackProblem(input, 0), expected));\n\t}\n\n\tprivate static bool compare(List<List<int> > arr1, Tuple<int, int[]> arr2) {\n\t\tif (arr1[0][0] != arr2.Item1) {\n\t\t\treturn false;\n\t\t}\n\t\tif (arr1[1].Count != arr2.Item2.Length) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (int i = 0; i < arr1[1].Count; i++) {\n\t\t\tif (arr1[1][i] != arr2.Item2[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nusing System;\nusing System.Collections.Generic;\n\npublic class ProgramTest {\n\t[Test]\n\tpublic void TestCase1() {\n\t\tint[,] input = {{1, 2}, {4, 3}, {5, 6}, {6, 7}};\n\t\tTuple<int, int[]> expected = Tuple.Create(10, new int[] {1, 3});\n\t\tUtils.AssertTrue(compare(Program.KnapsackProblem(input, 10), expected));\n\t}\n\n\tprivate static bool compare(List<List<int> > arr1, Tuple<int, int[]> arr2) {\n\t\tif (arr1[0][0] != arr2.Item1) {\n\t\t\treturn false;\n\t\t}\n\t\tif (arr1[1].Count != arr2.Item2.Length) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (int i = 0; i < arr1[1].Count; i++) {\n\t\t\tif (arr1[1][i] != arr2.Item2[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n",
      "Solutions": [
        "// Copyright Â© 2020 Code Complete. All rights reserved.\n\nusing System;\nusing System.Collections.Generic;\n\npublic class Program {\n\t// O(nc) time | O(nc) space\n\tpublic static List<List<int> > KnapsackProblem(int[,] items, int capacity) {\n\t\tint[,] knapsackValues = new int[items.GetLength(0) + 1,capacity + 1];\n\t\tfor (int i = 1; i < items.GetLength(0) + 1; i++) {\n\t\t\tint currentWeight = items[i - 1,1];\n\t\t\tint currentValue = items[i - 1,0];\n\t\t\tfor (int c = 0; c < capacity + 1; c++) {\n\t\t\t\tif (currentWeight > c) {\n\t\t\t\t\tknapsackValues[i,c] = knapsackValues[i - 1,c];\n\t\t\t\t} else {\n\t\t\t\t\tknapsackValues[i,c] = Math.Max(knapsackValues[i - 1,c],\n\t\t\t\t\t    knapsackValues[i - 1,\n\t\t\t\t\t    c -\n\t\t\t\t\t    currentWeight] +\n\t\t\t\t\t    currentValue);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn getKnapsackItems(knapsackValues, items,\n\t\t         knapsackValues[items.GetLength(0),capacity]);\n\t}\n\n\tpublic static List<List<int> > getKnapsackItems(int[,] knapsackValues, int[,] items,\n\t  int weight) {\n\t\tList<List<int> > sequence = new List<List<int> >();\n\t\tList<int> totalWeight = new List<int>();\n\t\ttotalWeight.Add(weight);\n\t\tsequence.Add(totalWeight);\n\t\tsequence.Add(new List<int>());\n\t\tint i = knapsackValues.GetLength(0) - 1;\n\t\tint c = knapsackValues.GetLength(1) - 1;\n\t\twhile (i > 0) {\n\t\t\tif (knapsackValues[i,c] == knapsackValues[i - 1,c]) {\n\t\t\t\ti--;\n\t\t\t} else {\n\t\t\t\tsequence[1].Insert(0, i - 1);\n\t\t\t\tc -= items[i - 1,1];\n\t\t\t\ti--;\n\t\t\t}\n\t\t\tif (c == 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn sequence;\n\t}\n}\n"
      ]
    },
    "go": {
      "Language": "go",
      "StartingCode": "package main\n\nfunc KnapsackProblem(items [][]int, capacity int) []interface{} {\n\t// Write your code here.\n\t// Replace return below.\n\treturn []interface{}{\n\t\t10,          // total value\n\t\t[]int{1, 2}, // item indices\n\t}\n}\n",
      "StartingTest": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\texpected := []interface{}{10, []int{1, 3}}\n\toutput := KnapsackProblem([][]int{{1, 2}, {4, 3}, {5, 6}, {6, 7}}, 10)\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase2(t *TestCase) {\n\texpected := []interface{}{1500, []int{3, 12, 14}}\n\toutput := KnapsackProblem([][]int{{465, 100}, {400, 85}, {255, 55}, {350, 45}, {650, 130}, {1000, 190}, {455, 100}, {100, 25}, {1200, 190}, {320, 65}, {750, 100}, {50, 45}, {550, 65}, {100, 50}, {600, 70}, {240, 40}}, 200)\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase3(t *TestCase) {\n\texpected := []interface{}{1505, []int{7, 12, 14, 15}}\n\toutput := KnapsackProblem([][]int{{465, 100}, {400, 85}, {255, 55}, {350, 45}, {650, 130}, {1000, 190}, {455, 100}, {100, 25}, {1200, 190}, {320, 65}, {750, 100}, {50, 45}, {550, 65}, {100, 50}, {600, 70}, {255, 40}}, 200)\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase4(t *TestCase) {\n\texpected := []interface{}{101, []int{0, 2, 3}}\n\toutput := KnapsackProblem([][]int{{2, 1}, {70, 70}, {30, 30}, {69, 69}, {100, 100}}, 100)\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase5(t *TestCase) {\n\texpected := []interface{}{100, []int{1, 2}}\n\toutput := KnapsackProblem([][]int{{1, 2}, {70, 70}, {30, 30}, {69, 69}, {99, 100}}, 100)\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase6(t *TestCase) {\n\texpected := []interface{}{0, []int{}}\n\toutput := KnapsackProblem([][]int{{1, 2}, {70, 70}, {30, 30}, {69, 69}, {100, 100}}, 0)\n\trequire.Equal(t, expected, output)\n}\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\texpected := []interface{}{10, []int{1, 3}}\n\toutput := KnapsackProblem([][]int{{1, 2}, {4, 3}, {5, 6}, {6, 7}}, 10)\n\trequire.Equal(t, expected, output)\n}\n",
      "Solutions": [
        "// Copyright Â© 2020 Code Complete. All rights reserved.\n\npackage main\n\nfunc KnapsackProblem(items [][]int, capacity int) []interface{} {\n\tvalues := make([][]int, len(items)+1)\n\tfor i := range values {\n\t\tvalues[i] = make([]int, capacity+1)\n\t}\n\tfor i := 1; i < len(items)+1; i++ {\n\t\tcurrentValue := items[i-1][0]\n\t\tcurrentWeight := items[i-1][1]\n\t\tfor c := 0; c < capacity+1; c++ {\n\t\t\tif currentWeight > c {\n\t\t\t\tvalues[i][c] = values[i-1][c]\n\t\t\t} else {\n\t\t\t\tvalues[i][c] = max(values[i-1][c], values[i-1][c-currentWeight]+currentValue)\n\t\t\t}\n\t\t}\n\t}\n\n\tvalue := values[len(items)][capacity]\n\tsequence := getKnapsackItems(values, items)\n\treturn []interface{}{value, sequence}\n}\n\nfunc getKnapsackItems(values [][]int, items [][]int) []int {\n\tsequence := []int{}\n\ti, c := len(values)-1, len(values[0])-1\n\tfor i > 0 {\n\t\tif values[i][c] == values[i-1][c] {\n\t\t\ti--\n\t\t} else {\n\t\t\tsequence = append(sequence, i-1)\n\t\t\tc -= items[i-1][1]\n\t\t\ti--\n\t\t}\n\t\tif c == 0 {\n\t\t\tbreak\n\t\t}\n\t}\n\treverse(sequence)\n\treturn sequence\n}\n\nfunc reverse(numbers []int) {\n\tfor i, j := 0, len(numbers)-1; i < j; i, j = i+1, j-1 {\n\t\tnumbers[i], numbers[j] = numbers[j], numbers[i]\n\t}\n}\n\nfunc max(arg int, rest ...int) int {\n\tcurr := arg\n\tfor _, num := range rest {\n\t\tif curr < num {\n\t\t\tcurr = num\n\t\t}\n\t}\n\treturn curr\n}\n"
      ]
    },
    "java": {
      "Language": "java",
      "StartingCode": "import java.util.*;\n\nclass Program {\n  public static List<List<Integer>> knapsackProblem(int[][] items, int capacity) {\n    // Write your code here.\n    // Replace the code below.\n    List<Integer> totalValue = Arrays.asList(10);\n    List<Integer> finalItems = Arrays.asList(1, 2);\n    var result = new ArrayList<List<Integer>>();\n    result.add(totalValue);\n    result.add(finalItems);\n    return result;\n  }\n}\n",
      "StartingTest": "import java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    int[][] input = {{1, 2}, {4, 3}, {5, 6}, {6, 7}};\n    int[][] expected = {{10}, {1, 3}};\n    Utils.assertTrue(compare(Program.knapsackProblem(input, 10), expected));\n  }\n\n  @Test\n  public void TestCase2() {\n    int[][] input = {\n      {465, 100},\n      {400, 85},\n      {255, 55},\n      {350, 45},\n      {650, 130},\n      {1000, 190},\n      {455, 100},\n      {100, 25},\n      {1200, 190},\n      {320, 65},\n      {750, 100},\n      {50, 45},\n      {550, 65},\n      {100, 50},\n      {600, 70},\n      {240, 40}\n    };\n    int[][] expected = {{1500}, {3, 12, 14}};\n    Utils.assertTrue(compare(Program.knapsackProblem(input, 200), expected));\n  }\n\n  @Test\n  public void TestCase3() {\n    int[][] input = {\n      {465, 100},\n      {400, 85},\n      {255, 55},\n      {350, 45},\n      {650, 130},\n      {1000, 190},\n      {455, 100},\n      {100, 25},\n      {1200, 190},\n      {320, 65},\n      {750, 100},\n      {50, 45},\n      {550, 65},\n      {100, 50},\n      {600, 70},\n      {255, 40}\n    };\n    int[][] expected = {{1505}, {7, 12, 14, 15}};\n    Utils.assertTrue(compare(Program.knapsackProblem(input, 200), expected));\n  }\n\n  @Test\n  public void TestCase4() {\n    int[][] input = {{2, 1}, {70, 70}, {30, 30}, {69, 69}, {100, 100}};\n    int[][] expected = {{101}, {0, 2, 3}};\n    Utils.assertTrue(compare(Program.knapsackProblem(input, 100), expected));\n  }\n\n  @Test\n  public void TestCase5() {\n    int[][] input = {{1, 2}, {70, 70}, {30, 30}, {69, 69}, {99, 100}};\n    int[][] expected = {{100}, {1, 2}};\n    Utils.assertTrue(compare(Program.knapsackProblem(input, 100), expected));\n  }\n\n  @Test\n  public void TestCase6() {\n    int[][] input = {{1, 2}, {70, 70}, {30, 30}, {69, 69}, {100, 100}};\n    int[][] expected = {{0}, {}};\n    Utils.assertTrue(compare(Program.knapsackProblem(input, 0), expected));\n  }\n\n  private static boolean compare(List<List<Integer>> arr1, int[][] arr2) {\n    if (arr1.get(0).get(0) != arr2[0][0]) {\n      return false;\n    }\n    if (arr1.get(1).size() != arr2[1].length) {\n      return false;\n    }\n    for (int i = 0; i < arr1.get(1).size(); i++) {\n      if (arr1.get(1).get(i) != arr2[1][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    int[][] input = {{1, 2}, {4, 3}, {5, 6}, {6, 7}};\n    int[][] expected = {{10}, {1, 3}};\n    Utils.assertTrue(compare(Program.knapsackProblem(input, 10), expected));\n  }\n\n  private static boolean compare(List<List<Integer>> arr1, int[][] arr2) {\n    if (arr1.get(0).get(0) != arr2[0][0]) {\n      return false;\n    }\n    if (arr1.get(1).size() != arr2[1].length) {\n      return false;\n    }\n    for (int i = 0; i < arr1.get(1).size(); i++) {\n      if (arr1.get(1).get(i) != arr2[1][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n",
      "Solutions": [
        "// Copyright Â© 2020 Code Complete. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(nc) time | O(nc) space\n  public static List<List<Integer>> knapsackProblem(int[][] items, int capacity) {\n    int[][] knapsackValues = new int[items.length + 1][capacity + 1];\n    for (int i = 1; i < items.length + 1; i++) {\n      int currentWeight = items[i - 1][1];\n      int currentValue = items[i - 1][0];\n      for (int c = 0; c < capacity + 1; c++) {\n        if (currentWeight > c) {\n          knapsackValues[i][c] = knapsackValues[i - 1][c];\n        } else {\n          knapsackValues[i][c] =\n              Math.max(\n                  knapsackValues[i - 1][c],\n                  knapsackValues[i - 1][c - currentWeight] + currentValue);\n        }\n      }\n    }\n    return getKnapsackItems(knapsackValues, items, knapsackValues[items.length][capacity]);\n  }\n\n  public static List<List<Integer>> getKnapsackItems(\n      int[][] knapsackValues, int[][] items, int weight) {\n    List<List<Integer>> sequence = new ArrayList<List<Integer>>();\n    List<Integer> totalWeight = new ArrayList<Integer>();\n    totalWeight.add(weight);\n    sequence.add(totalWeight);\n    sequence.add(new ArrayList<Integer>());\n    int i = knapsackValues.length - 1;\n    int c = knapsackValues[0].length - 1;\n    while (i > 0) {\n      if (knapsackValues[i][c] == knapsackValues[i - 1][c]) {\n        i--;\n      } else {\n        sequence.get(1).add(0, i - 1);\n        c -= items[i - 1][1];\n        i--;\n      }\n      if (c == 0) {\n        break;\n      }\n    }\n    return sequence;\n  }\n}\n"
      ]
    },
    "javascript": {
      "Language": "javascript",
      "StartingCode": "function knapsackProblem(items, capacity) {\n  // Write your code here.\n  // Replace return below.\n  return [\n    10, // total value\n    [1, 2], // item indices\n  ];\n}\n\n// Do not edit the line below.\nexports.knapsackProblem = knapsackProblem;\n",
      "StartingTest": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai\n    .expect(\n      program.knapsackProblem(\n        [\n          [1, 2],\n          [4, 3],\n          [5, 6],\n          [6, 7],\n        ],\n        10,\n      ),\n    )\n    .to.deep.equal([10, [1, 3]]);\n});\n\nit('Test Case #2', function () {\n  chai\n    .expect(\n      program.knapsackProblem(\n        [\n          [465, 100],\n          [400, 85],\n          [255, 55],\n          [350, 45],\n          [650, 130],\n          [1000, 190],\n          [455, 100],\n          [100, 25],\n          [1200, 190],\n          [320, 65],\n          [750, 100],\n          [50, 45],\n          [550, 65],\n          [100, 50],\n          [600, 70],\n          [240, 40],\n        ],\n        200,\n      ),\n    )\n    .to.deep.equal([1500, [3, 12, 14]]);\n});\n\nit('Test Case #3', function () {\n  chai\n    .expect(\n      program.knapsackProblem(\n        [\n          [465, 100],\n          [400, 85],\n          [255, 55],\n          [350, 45],\n          [650, 130],\n          [1000, 190],\n          [455, 100],\n          [100, 25],\n          [1200, 190],\n          [320, 65],\n          [750, 100],\n          [50, 45],\n          [550, 65],\n          [100, 50],\n          [600, 70],\n          [255, 40],\n        ],\n        200,\n      ),\n    )\n    .to.deep.equal([1505, [7, 12, 14, 15]]);\n});\n\nit('Test Case #4', function () {\n  chai\n    .expect(\n      program.knapsackProblem(\n        [\n          [2, 1],\n          [70, 70],\n          [30, 30],\n          [69, 69],\n          [100, 100],\n        ],\n        100,\n      ),\n    )\n    .to.deep.equal([101, [0, 2, 3]]);\n});\n\nit('Test Case #5', function () {\n  chai\n    .expect(\n      program.knapsackProblem(\n        [\n          [1, 2],\n          [70, 70],\n          [30, 30],\n          [69, 69],\n          [99, 100],\n        ],\n        100,\n      ),\n    )\n    .to.deep.equal([100, [1, 2]]);\n});\n\nit('Test Case #6', function () {\n  chai\n    .expect(\n      program.knapsackProblem(\n        [\n          [1, 2],\n          [70, 70],\n          [30, 30],\n          [69, 69],\n          [100, 100],\n        ],\n        0,\n      ),\n    )\n    .to.deep.equal([0, []]);\n});\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai\n    .expect(\n      program.knapsackProblem(\n        [\n          [1, 2],\n          [4, 3],\n          [5, 6],\n          [6, 7],\n        ],\n        10,\n      ),\n    )\n    .to.deep.equal([10, [1, 3]]);\n});\n",
      "Solutions": [
        "// Copyright Â© 2020 Code Complete. All rights reserved.\n\n// O(nc) time | O(nc) space\nfunction knapsackProblem(items, capacity) {\n  const knapsackValues = [];\n  for (let i = 0; i < items.length + 1; i++) {\n    const row = new Array(capacity + 1).fill(0);\n    knapsackValues.push(row);\n  }\n  for (let i = 1; i < items.length + 1; i++) {\n    const currentWeight = items[i - 1][1];\n    const currentValue = items[i - 1][0];\n    for (let c = 0; c < capacity + 1; c++) {\n      if (currentWeight > c) {\n        knapsackValues[i][c] = knapsackValues[i - 1][c];\n      } else {\n        knapsackValues[i][c] = Math.max(\n          knapsackValues[i - 1][c],\n          knapsackValues[i - 1][c - currentWeight] + currentValue,\n        );\n      }\n    }\n  }\n  return [knapsackValues[items.length][capacity], getKnapsackItems(knapsackValues, items)];\n}\n\nfunction getKnapsackItems(knapsackValues, items) {\n  const sequence = [];\n  let i = knapsackValues.length - 1;\n  let c = knapsackValues[0].length - 1;\n  while (i > 0) {\n    if (knapsackValues[i][c] === knapsackValues[i - 1][c]) {\n      i -= 1;\n    } else {\n      sequence.unshift(i - 1);\n      c -= items[i - 1][1];\n      i -= 1;\n    }\n    if (c === 0) break;\n  }\n  return sequence;\n}\n\nexports.knapsackProblem = knapsackProblem;\n"
      ]
    },
    "python": {
      "Language": "python",
      "StartingCode": "def knapsackProblem(items, capacity):\n    # Write your code here.\n    # return [\n    #   10, // total value\n    #   [1, 2], // item indices\n    # ]\n    pass\n",
      "StartingTest": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(program.knapsackProblem([[1, 2], [4, 3], [5, 6], [6, 7]], 10), [10, [1, 3]])\n\n    def test_case_2(self):\n        self.assertEqual(\n            program.knapsackProblem(\n                [\n                    [465, 100],\n                    [400, 85],\n                    [255, 55],\n                    [350, 45],\n                    [650, 130],\n                    [1000, 190],\n                    [455, 100],\n                    [100, 25],\n                    [1200, 190],\n                    [320, 65],\n                    [750, 100],\n                    [50, 45],\n                    [550, 65],\n                    [100, 50],\n                    [600, 70],\n                    [240, 40],\n                ],\n                200,\n            ),\n            [1500, [3, 12, 14]],\n        )\n\n    def test_case_3(self):\n        self.assertEqual(\n            program.knapsackProblem(\n                [\n                    [465, 100],\n                    [400, 85],\n                    [255, 55],\n                    [350, 45],\n                    [650, 130],\n                    [1000, 190],\n                    [455, 100],\n                    [100, 25],\n                    [1200, 190],\n                    [320, 65],\n                    [750, 100],\n                    [50, 45],\n                    [550, 65],\n                    [100, 50],\n                    [600, 70],\n                    [255, 40],\n                ],\n                200,\n            ),\n            [1505, [7, 12, 14, 15]],\n        )\n\n    def test_case_4(self):\n        self.assertEqual(\n            program.knapsackProblem([[2, 1], [70, 70], [30, 30], [69, 69], [100, 100]], 100), [101, [0, 2, 3]]\n        )\n\n    def test_case_5(self):\n        self.assertEqual(program.knapsackProblem([[1, 2], [70, 70], [30, 30], [69, 69], [99, 100]], 100), [100, [1, 2]])\n\n    def test_case_6(self):\n        self.assertEqual(program.knapsackProblem([[1, 2], [70, 70], [30, 30], [69, 69], [100, 100]], 0), [0, []])\n",
      "SandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(program.knapsackProblem([[1, 2], [4, 3], [5, 6], [6, 7]], 10), [10, [1, 3]])\n",
      "Solutions": [
        "# Copyright Â© 2020 Code Complete. All rights reserved.\n\n# O(nc) time | O(nc) space\ndef knapsackProblem(items, capacity):\n    knapsackValues = [[0 for x in range(0, capacity + 1)] for y in range(0, len(items) + 1)]\n    for i in range(1, len(items) + 1):\n        currentWeight = items[i - 1][1]\n        currentValue = items[i - 1][0]\n        for c in range(0, capacity + 1):\n            if currentWeight > c:\n                knapsackValues[i][c] = knapsackValues[i - 1][c]\n            else:\n                knapsackValues[i][c] = max(\n                    knapsackValues[i - 1][c], knapsackValues[i - 1][c - currentWeight] + currentValue\n                )\n    return [knapsackValues[-1][-1], getKnapsackItems(knapsackValues, items)]\n\n\ndef getKnapsackItems(knapsackValues, items):\n    sequence = []\n    i = len(knapsackValues) - 1\n    c = len(knapsackValues[0]) - 1\n    while i > 0:\n        if knapsackValues[i][c] == knapsackValues[i - 1][c]:\n            i -= 1\n        else:\n            sequence.append(i - 1)\n            c -= items[i - 1][1]\n            i -= 1\n        if c == 0:\n            break\n    return list(reversed(sequence))\n"
      ]
    },
    "swift": {
      "Language": "swift",
      "StartingCode": "class Program {\n  func knapsackProblem(_ items: [[Int]], _ capacity: Int) -> (Int, [Int]) {\n    // Write your code here.\n    // Replace the return blow.\n    return (\n      10, // total value\n      [1, 2] // item indices\n    )\n  }\n}\n",
      "StartingTest": "class ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      let expected = (10, [1, 3])\n      let output = program.knapsackProblem([[1, 2], [4, 3], [5, 6], [6, 7]], 10)\n      try assert(expected == output)\n    }\n    runTest(\"Test Case 2\") { () throws -> Void in\n      let expected = (1500, [3, 12, 14])\n      let output = program.knapsackProblem([[465, 100], [400, 85], [255, 55], [350, 45], [650, 130], [1000, 190], [455, 100], [100, 25], [1200, 190], [320, 65], [750, 100], [50, 45], [550, 65], [100, 50], [600, 70], [240, 40]], 200)\n      try assert(expected == output)\n    }\n    runTest(\"Test Case 3\") { () throws -> Void in\n      let expected = (1505, [7, 12, 14, 15])\n      let output = program.knapsackProblem([[465, 100], [400, 85], [255, 55], [350, 45], [650, 130], [1000, 190], [455, 100], [100, 25], [1200, 190], [320, 65], [750, 100], [50, 45], [550, 65], [100, 50], [600, 70], [255, 40]], 200)\n      try assert(expected == output)\n    }\n    runTest(\"Test Case 4\") { () throws -> Void in\n      let expected = (101, [0, 2, 3])\n      let output = program.knapsackProblem([[2, 1], [70, 70], [30, 30], [69, 69], [100, 100]], 100)\n      try assert(expected == output)\n    }\n    runTest(\"Test Case 5\") { () throws -> Void in\n      let expected = (100, [1, 2])\n      let output = program.knapsackProblem([[1, 2], [70, 70], [30, 30], [69, 69], [99, 100]], 100)\n      try assert(expected == output)\n    }\n    runTest(\"Test Case 6\") { () throws -> Void in\n      let expected = (0, [Int]())\n      let output = program.knapsackProblem([[1, 2], [70, 70], [30, 30], [69, 69], [100, 100]], 0)\n      try assert(expected == output)\n    }\n  }\n}\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      let expected = (10, [1, 3])\n      let output = program.knapsackProblem([[1, 2], [4, 3], [5, 6], [6, 7]], 10)\n      try assert(expected == output)\n    }\n  }\n}\n",
      "Solutions": [
        "// Copyright Â© 2020 Code Complete. All rights reserved.\n\nclass Program {\n  // O(nc) time | O(nc) space\n  func knapsackProblem(_ items: [[Int]], _ capacity: Int) -> (Int, [Int]) {\n    var knapsackValues = [[Int]]()\n\n    for _ in 0 ..< items.count + 1 {\n      let row = Array(repeating: 0, count: capacity + 1)\n      knapsackValues.append(row)\n    }\n\n    for currentItemIndex in 1 ..< items.count + 1 {\n      let currentValue = items[currentItemIndex - 1][0]\n      let currentWeight = items[currentItemIndex - 1][1]\n\n      for currentCapacity in 0 ..< capacity + 1 {\n        if currentWeight <= currentCapacity {\n          knapsackValues[currentItemIndex][currentCapacity] = max(knapsackValues[currentItemIndex - 1][currentCapacity], knapsackValues[currentItemIndex - 1][currentCapacity - currentWeight] + currentValue)\n        } else {\n          knapsackValues[currentItemIndex][currentCapacity] = knapsackValues[currentItemIndex - 1][currentCapacity]\n        }\n      }\n    }\n\n    return (knapsackValues[items.count][capacity], getKnapsackItems(items, knapsackValues))\n  }\n\n  func getKnapsackItems(_ items: [[Int]], _ knapsackValues: [[Int]]) -> [Int] {\n    var sequence = [Int]()\n\n    var currentItemIndex = knapsackValues.count - 1\n    var currentCapacity = knapsackValues[0].count - 1\n\n    while currentItemIndex > 0 {\n      if knapsackValues[currentItemIndex][currentCapacity] == knapsackValues[currentItemIndex - 1][currentCapacity] {\n        currentItemIndex -= 1\n      } else {\n        sequence.insert(currentItemIndex - 1, at: 0)\n\n        currentCapacity -= items[currentItemIndex - 1][1]\n        currentItemIndex -= 1\n      }\n\n      if currentCapacity == 0 {\n        break\n      }\n    }\n\n    return sequence\n  }\n}\n"
      ]
    },
    "typescript": {
      "Language": "typescript",
      "StartingCode": "export function knapsackProblem(items: [number, number][], capacity: number): [number, number[]] {\n  // Write your code here.\n  // Replace return below.\n  return [\n    10, // total value\n    [1, 2], // item indices\n  ];\n}\n",
      "StartingTest": "",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  chai\n    .expect(\n      program.knapsackProblem(\n        [\n          [1, 2],\n          [4, 3],\n          [5, 6],\n          [6, 7],\n        ],\n        10,\n      ),\n    )\n    .to.deep.equal([10, [1, 3]]);\n});\n",
      "Solutions": [
        "// Copyright Â© 2020 Code Complete. All rights reserved.\n\n// O(nc) time | O(nc) space\nexport function knapsackProblem(items: [number, number][], capacity: number): [number, number[]] {\n  const knapsackValues: number[][] = [];\n  for (let i = 0; i < items.length + 1; i++) {\n    const row = new Array(capacity + 1).fill(0);\n    knapsackValues.push(row);\n  }\n  for (let i = 1; i < items.length + 1; i++) {\n    const currentWeight = items[i - 1][1];\n    const currentValue = items[i - 1][0];\n    for (let c = 0; c < capacity + 1; c++) {\n      if (currentWeight > c) {\n        knapsackValues[i][c] = knapsackValues[i - 1][c];\n      } else {\n        knapsackValues[i][c] = Math.max(\n          knapsackValues[i - 1][c],\n          knapsackValues[i - 1][c - currentWeight] + currentValue,\n        );\n      }\n    }\n  }\n  return [knapsackValues[items.length][capacity], getKnapsackItems(knapsackValues, items)];\n}\n\nfunction getKnapsackItems(knapsackValues: number[][], items: [number, number][]) {\n  const sequence: number[] = [];\n  let i = knapsackValues.length - 1;\n  let c = knapsackValues[0].length - 1;\n  while (i > 0) {\n    if (knapsackValues[i][c] === knapsackValues[i - 1][c]) {\n      i -= 1;\n    } else {\n      sequence.unshift(i - 1);\n      c -= items[i - 1][1];\n      i -= 1;\n    }\n    if (c === 0) break;\n  }\n  return sequence;\n}\n"
      ]
    }
  },
  "JSONTestLanguages": [
    "javascript",
    "cpp",
    "python",
    "java",
    "csharp",
    "go",
    "swift",
    "typescript"
  ],
  "JSONTests": [
    {
      "capacity": 10,
      "items": [
        [
          1,
          2
        ],
        [
          4,
          3
        ],
        [
          5,
          6
        ],
        [
          6,
          7
        ]
      ]
    },
    {
      "capacity": 200,
      "items": [
        [
          465,
          100
        ],
        [
          400,
          85
        ],
        [
          255,
          55
        ],
        [
          350,
          45
        ],
        [
          650,
          130
        ],
        [
          1000,
          190
        ],
        [
          455,
          100
        ],
        [
          100,
          25
        ],
        [
          1200,
          190
        ],
        [
          320,
          65
        ],
        [
          750,
          100
        ],
        [
          50,
          45
        ],
        [
          550,
          65
        ],
        [
          100,
          50
        ],
        [
          600,
          70
        ],
        [
          240,
          40
        ]
      ]
    },
    {
      "capacity": 200,
      "items": [
        [
          465,
          100
        ],
        [
          400,
          85
        ],
        [
          255,
          55
        ],
        [
          350,
          45
        ],
        [
          650,
          130
        ],
        [
          1000,
          190
        ],
        [
          455,
          100
        ],
        [
          100,
          25
        ],
        [
          1200,
          190
        ],
        [
          320,
          65
        ],
        [
          750,
          100
        ],
        [
          50,
          45
        ],
        [
          550,
          65
        ],
        [
          100,
          50
        ],
        [
          600,
          70
        ],
        [
          255,
          40
        ]
      ]
    },
    {
      "capacity": 100,
      "items": [
        [
          2,
          1
        ],
        [
          70,
          70
        ],
        [
          30,
          30
        ],
        [
          69,
          69
        ],
        [
          100,
          100
        ]
      ]
    },
    {
      "capacity": 100,
      "items": [
        [
          1,
          2
        ],
        [
          70,
          70
        ],
        [
          30,
          30
        ],
        [
          69,
          69
        ],
        [
          99,
          100
        ]
      ]
    },
    {
      "capacity": 0,
      "items": [
        [
          1,
          2
        ],
        [
          70,
          70
        ],
        [
          30,
          30
        ],
        [
          69,
          69
        ],
        [
          100,
          100
        ]
      ]
    }
  ],
  "JSONAnswers": [
    [
      {
        "items": [
          1,
          3
        ],
        "totalValue": 10
      },
      {
        "items": [
          3,
          12,
          14
        ],
        "totalValue": 1500
      },
      {
        "items": [
          7,
          12,
          14,
          15
        ],
        "totalValue": 1505
      },
      {
        "items": [
          0,
          2,
          3
        ],
        "totalValue": 101
      },
      {
        "items": [
          1,
          2
        ],
        "totalValue": 100
      },
      {
        "items": [],
        "totalValue": 0
      }
    ]
  ]
}