{
  "Summary": {
    "Name": "Validate BST",
    "Category": "Binary Search Trees",
    "Difficulty": 2,
    "Available": true,
    "Metadata": {
      "number": 403,
      "timeOne": 0,
      "timeTwo": 1001,
      "url": "https://player.vimeo.com/video/229470065"
    }
  },
  "Prompt": "",
  "Hints": "Every node in the BST has a maximum possible value and a minimum possible value. In other words, the value of any given node in the BST must be strictly smaller than some value (the value of its closest right parent) and must be greater than or equal to some other value (the value of its closest left parent).\nValidate the BST by recursively calling the validateBst function on every node, passing in the correct maximum and minimum possible values to each. Initialize those values to be -Infinity and +Infinity.\n",
  "SpaceTime": "O(n) time | O(d) space - where n is the number of nodes in the BST and d is the depth (height) of the BST\n",
  "PromptHTML": "<p>\n  Write a function that takes in a potentially invalid Binary Search Tree (BST)\n  and returns a boolean representing whether the BST is valid.\n</p>\n<p>\n  Each <span>BST</span> node has an integer <span>value</span>, a\n  <span>left</span> child node, and a <span>right</span> child node. A node is\n  said to be a valid <span>BST</span> node if and only if it satisfies the BST\n  property: its <span>value</span> is strictly greater than the values of every\n  node to its left; its <span>value</span> is less than or equal to the values\n  of every node to its right; and its children nodes are either valid\n  <span>BST</span> nodes themselves or <span>None</span> / <span>null</span>.\n</p>\n<p>\n  A BST is valid if and only if all of its nodes are valid\n  <span>BST</span> nodes.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">tree</span> =   10\n       /     \\\n      5      15\n    /   \\   /   \\\n   2     5 13   22\n /           \\\n1            14\n</pre>\n<h3>Sample Output</h3>\n<pre>true</pre>\n",
  "Notes": "",
  "IsLongOutput": false,
  "Visualization": {
    "inputType": "tree",
    "outputType": null
  },
  "CustomInputLanguages": [
    "javascript",
    "cpp",
    "python",
    "java",
    "csharp",
    "go",
    "swift",
    "typescript"
  ],
  "CustomInputVars": [
    {
      "Name": "tree",
      "Example": {
        "nodes": [
          {
            "id": "10",
            "left": "5",
            "right": "15",
            "value": 10
          },
          {
            "id": "5",
            "left": "2",
            "right": "5-2",
            "value": 5
          },
          {
            "id": "15",
            "left": "13",
            "right": "22",
            "value": 15
          },
          {
            "id": "2",
            "left": "1",
            "right": null,
            "value": 2
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "13",
            "left": null,
            "right": "14",
            "value": 13
          },
          {
            "id": "22",
            "left": null,
            "right": null,
            "value": 22
          },
          {
            "id": "1",
            "left": null,
            "right": null,
            "value": 1
          },
          {
            "id": "14",
            "left": null,
            "right": null,
            "value": 14
          }
        ],
        "root": "10"
      },
      "Schema": {
        "description": "A Binary Tree is represented by a list of <span>nodes</span> and a <span>root</span> node. Every node has to\nhave a unique string <span>id</span> that will be referenced by other nodes' <span>left</span> and <span>right</span>\npointers and by the <span>root</span>.\n",
        "properties": {
          "nodes": {
            "items": {
              "properties": {
                "id": {
                  "type": "string"
                },
                "left": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "right": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "value": {
                  "type": "integer"
                }
              },
              "required": [
                "id",
                "value",
                "left",
                "right"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "root": {
            "type": "string"
          }
        },
        "required": [
          "root",
          "nodes"
        ],
        "type": "object"
      }
    }
  ],
  "Resources": {
    "cpp": {
      "Language": "cpp",
      "StartingCode": "class BST {\npublic:\n  int value;\n  BST *left;\n  BST *right;\n\n  BST(int val);\n  BST &insert(int val);\n};\n\n// O(n) time | O(d) space\nbool validateBst(BST *tree) {\n  // Write your code here.\n  return false;\n}\n",
      "StartingTest": "BST::BST(int val) {\n  value = val;\n  left = NULL;\n  right = NULL;\n}\n\nBST &BST::insert(int val) {\n  if (val < value) {\n    if (left == NULL) {\n      BST *newBST = new BST(val);\n      left = newBST;\n    } else {\n      left->insert(val);\n    }\n  } else {\n    if (right == NULL) {\n      BST *newBST = new BST(val);\n      right = newBST;\n    } else {\n      right->insert(val);\n    }\n  }\n  return *this;\n}\n\nclass ProgramTest : public TestSuite {\npublic:\n  void Run() {\n\n    RunTest(\"Test Case 1\", []() {\n      BST test1(10);\n      test1.insert(5)\n          .insert(15)\n          .insert(5)\n          .insert(2)\n          .insert(1)\n          .insert(22)\n          .insert(13)\n          .insert(14);\n      assert(validateBst(&test1) == true);\n    });\n\n    RunTest(\"Test Case 2\", []() {\n      BST test2(10);\n      test2.insert(5)\n          .insert(15)\n          .insert(5)\n          .insert(2)\n          .insert(1)\n          .insert(22)\n          .insert(-5)\n          .insert(-15)\n          .insert(-5)\n          .insert(-2)\n          .insert(-1)\n          .insert(-22);\n      assert(validateBst(&test2) == true);\n    });\n\n    RunTest(\"Test Case 3\", []() {\n      BST test3(10);\n\n      assert(validateBst(&test3) == true);\n    });\n\n    RunTest(\"Test Case 4\", []() {\n      BST test4(10);\n      test4.insert(5)\n          .insert(15)\n          .insert(5)\n          .insert(2)\n          .insert(1)\n          .insert(22)\n          .insert(500)\n          .insert(1500)\n          .insert(50)\n          .insert(200)\n          .insert(10000)\n          .insert(2200);\n      assert(validateBst(&test4) == true);\n    });\n\n    RunTest(\"Test Case 5\", []() {\n      BST test5(5000);\n      test5.insert(5)\n          .insert(15)\n          .insert(5)\n          .insert(2)\n          .insert(1)\n          .insert(22)\n          .insert(1)\n          .insert(1)\n          .insert(3)\n          .insert(1)\n          .insert(1)\n          .insert(502)\n          .insert(55000)\n          .insert(204)\n          .insert(205)\n          .insert(207)\n          .insert(206)\n          .insert(208)\n          .insert(203);\n\n      assert(validateBst(&test5) == true);\n    });\n\n    RunTest(\"Test Case 6\", []() {\n      BST test6(10);\n      test6.insert(5).insert(15).insert(5).insert(2).insert(1).insert(22);\n      test6.left->right->right = new BST(11);\n      assert(validateBst(&test6) == false);\n    });\n\n    RunTest(\"Test Case 7\", []() {\n      BST test7(10);\n      test7.insert(5)\n          .insert(15)\n          .insert(5)\n          .insert(2)\n          .insert(1)\n          .insert(22)\n          .insert(-5)\n          .insert(-15)\n          .insert(-5)\n          .insert(-2)\n          .insert(-1)\n          .insert(-22);\n      test7.left->left->left->left->left->left->left = new BST(11);\n      assert(validateBst(&test7) == false);\n    });\n\n    RunTest(\"Test Case 8\", []() {\n      BST test8(10);\n      test8.insert(12);\n      test8.left = new BST(11);\n      assert(validateBst(&test8) == false);\n    });\n\n    RunTest(\"Test Case 9\", []() {\n      BST test9(10);\n      test9.insert(5)\n          .insert(15)\n          .insert(5)\n          .insert(2)\n          .insert(1)\n          .insert(22)\n          .insert(500)\n          .insert(1500)\n          .insert(50)\n          .insert(200)\n          .insert(10000)\n          .insert(2200);\n      test9.right->right->right->right->right->right = new BST(9999);\n      assert(validateBst(&test9) == false);\n    });\n\n    RunTest(\"Test Case 10\", []() {\n      BST test10(100);\n      test10.insert(5)\n          .insert(15)\n          .insert(5)\n          .insert(2)\n          .insert(1)\n          .insert(22)\n          .insert(1)\n          .insert(1)\n          .insert(3)\n          .insert(1)\n          .insert(1)\n          .insert(502)\n          .insert(55000)\n          .insert(204)\n          .insert(205)\n          .insert(207)\n          .insert(206)\n          .insert(208)\n          .insert(203);\n      test10.right->left->right->left = new BST(300);\n      assert(validateBst(&test10) == false);\n    });\n\n    RunTest(\"Test Case 11\", []() {\n      BST test11(10);\n      test11.insert(5).insert(15);\n      test11.left->right = new BST(10);\n      assert(validateBst(&test11) == false);\n    });\n  }\n};\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nBST::BST(int val) {\n  value = val;\n  left = NULL;\n  right = NULL;\n}\n\nclass ProgramTest : public TestSuite {\npublic:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      BST* root = new BST(10);\n      root->left = new BST(5);\n      root->left->left = new BST(2);\n      root->left->left->left = new BST(1);\n      root->left->right = new BST(5);\n      root->right = new BST(15);\n      root->right->left = new BST(13);\n      root->right->left->right = new BST(14);\n      root->right->right = new BST(22);\n      assert(validateBst(root) == true);\n    });\n  }\n};\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\n#include <climits>\nusing namespace std;\n\nclass BST {\npublic:\n  int value;\n  BST *left;\n  BST *right;\n\n  BST(int val);\n  BST &insert(int val);\n};\n\nbool validateBst(BST *tree);\nbool validateBstHelper(BST *tree, int minValue, int maxValue);\n\n// O(n) time | O(d) space\nbool validateBst(BST *tree) {\n  return validateBstHelper(tree, INT_MIN, INT_MAX);\n}\n\nbool validateBstHelper(BST *tree, int minValue, int maxValue) {\n  if (tree->value < minValue || tree->value >= maxValue) {\n    return false;\n  }\n  if (tree->left != NULL &&\n      !validateBstHelper(tree->left, minValue, tree->value)) {\n    return false;\n  }\n  if (tree->right != NULL &&\n      !validateBstHelper(tree->right, tree->value, maxValue)) {\n    return false;\n  }\n  return true;\n}\n"
      ]
    },
    "csharp": {
      "Language": "csharp",
      "StartingCode": "using System;\n\npublic class Program {\n\tpublic static bool ValidateBst(BST tree) {\n\t\t// Write your code here.\n\t\treturn false;\n\t}\n\n\tpublic class BST {\n\t\tpublic int value;\n\t\tpublic BST left;\n\t\tpublic BST right;\n\n\t\tpublic BST(int value) {\n\t\t\tthis.value = value;\n\t\t}\n\t}\n}\n",
      "StartingTest": "public class ProgramTest {\n\tpublic TestBST test1;\n\tpublic TestBST test2;\n\tpublic TestBST test3;\n\tpublic TestBST test4;\n\tpublic TestBST test5;\n\tpublic TestBST test6;\n\tpublic TestBST test7;\n\tpublic TestBST test8;\n\tpublic TestBST test9;\n\tpublic TestBST test10;\n\tpublic TestBST test11;\n\n\tpublic ProgramTest() {\n\t\tthis.test1 = new TestBST(10);\n\t\tthis.test1.insert(5).insert(15).insert(5).insert(2).insert(1).insert(22).insert(13).\n\t\tinsert(14);\n\n\t\tthis.test2 = new TestBST(10);\n\t\tthis.test2.insert(5).insert(15).insert(5).insert(2).insert(1).insert(22).insert(-5).\n\t\tinsert(-15)\n\t\t.insert(-5).insert(-2).insert(-1).insert(-22);\n\n\t\tthis.test3 = new TestBST(10);\n\n\t\tthis.test4 = new TestBST(10);\n\t\tthis.test4.insert(5).insert(15).insert(5).insert(2).insert(1).insert(22).insert(500)\n\t\t.insert(1500)\n\t\t.insert(50).insert(200).insert(10000).insert(2200);\n\n\t\tthis.test5 = new TestBST(5000);\n\t\tthis.test5.insert(5).insert(15).insert(5).insert(2).insert(1).insert(22).insert(1).\n\t\tinsert(1).insert(3)\n\t\t.insert(1).insert(1).insert(502).insert(55000).insert(204).insert(205).insert(207).\n\t\tinsert(206)\n\t\t.insert(208).insert(203);\n\n\t\tthis.test6 = new TestBST(10);\n\t\tthis.test6.insert(5).insert(15).insert(5).insert(2).insert(1).insert(22);\n\t\ttest6.left.right.right = new Program.BST(11);\n\n\t\tthis.test7 = new TestBST(10);\n\t\tthis.test7.insert(5).insert(15).insert(5).insert(2).insert(1).insert(22).insert(-5).\n\t\tinsert(-15).insert(-5)\n\t\t.insert(-2).insert(-1).insert(-22);\n\t\ttest7.left.left.left.left.left.left.left = new Program.BST(11);\n\n\t\tthis.test8 = new TestBST(10);\n\t\tthis.test8.insert(12);\n\t\ttest8.left = new TestBST(11);\n\n\t\tthis.test9 = new TestBST(10);\n\t\tthis.test9.insert(5).insert(15).insert(5).insert(2).insert(1).insert(22).insert(500)\n\t\t.insert(1500).insert(50)\n\t\t.insert(200).insert(10000).insert(2200);\n\t\ttest9.right.right.right.right.right.right = new Program.BST(9999);\n\n\t\tthis.test10 = new TestBST(100);\n\t\tthis.test10.insert(5).insert(15).insert(5).insert(2).insert(1).insert(22).insert(1).\n\t\tinsert(1).insert(3).insert(1)\n\t\t.insert(1).insert(502).insert(55000).insert(204).insert(205).insert(207).insert(206)\n\t\t.insert(208).insert(203);\n\t\ttest10.right.left.right.left = new Program.BST(300);\n\n\t\tthis.test11 = new TestBST(10);\n\t\tthis.test11.insert(5).insert(15);\n\t\ttest11.left.right = new Program.BST(10);\n\t}\n\n\t[Test]\n\tpublic void TestCase1() {\n\t\tUtils.AssertTrue(Program.ValidateBst(test1));\n\t}\n\n\t[Test]\n\tpublic void TestCase2() {\n\t\tUtils.AssertTrue(Program.ValidateBst(test2));\n\t}\n\n\t[Test]\n\tpublic void TestCase3() {\n\t\tUtils.AssertTrue(Program.ValidateBst(test3));\n\t}\n\n\t[Test]\n\tpublic void TestCase4() {\n\t\tUtils.AssertTrue(Program.ValidateBst(test4));\n\t}\n\n\t[Test]\n\tpublic void TestCase5() {\n\t\tUtils.AssertTrue(Program.ValidateBst(test5));\n\t}\n\n\t[Test]\n\tpublic void TestCase6() {\n\t\tUtils.AssertTrue(!Program.ValidateBst(test6));\n\t}\n\n\t[Test]\n\tpublic void TestCase7() {\n\t\tUtils.AssertTrue(!Program.ValidateBst(test7));\n\t}\n\n\t[Test]\n\tpublic void TestCase8() {\n\t\tUtils.AssertTrue(!Program.ValidateBst(test8));\n\t}\n\n\t[Test]\n\tpublic void TestCase9() {\n\t\tUtils.AssertTrue(!Program.ValidateBst(test9));\n\t}\n\n\t[Test]\n\tpublic void TestCase10() {\n\t\tUtils.AssertTrue(!Program.ValidateBst(test10));\n\t}\n\n\t[Test]\n\tpublic void TestCase11() {\n\t\tUtils.AssertTrue(!Program.ValidateBst(test11));\n\t}\n\n\tpublic class TestBST : Program.BST {\n\t\tpublic TestBST(int value) : base(value) {\n\t\t}\n\n\t\tpublic TestBST insert(int value) {\n\t\t\tProgram.BST current = null;\n\t\t\tif (value < this.value) {\n\t\t\t\tif (this.left == null) {\n\t\t\t\t\tProgram.BST newBST = new Program.BST(value);\n\t\t\t\t\tthis.left = newBST;\n\t\t\t\t\treturn this;\n\t\t\t\t} else {\n\t\t\t\t\tcurrent = this.left;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (right == null) {\n\t\t\t\t\tProgram.BST newBST = new Program.BST(value);\n\t\t\t\t\tthis.right = newBST;\n\t\t\t\t\treturn this;\n\t\t\t\t} else {\n\t\t\t\t\tcurrent = this.right;\n\t\t\t\t}\n\t\t\t}\n\t\t\twhile (true) {\n\t\t\t\tif (value < current.value) {\n\t\t\t\t\tif (current.left == null) {\n\t\t\t\t\t\tProgram.BST newBST = new Program.BST(value);\n\t\t\t\t\t\tcurrent.left = newBST;\n\t\t\t\t\t\treturn this;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcurrent = current.left;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (current.right == null) {\n\t\t\t\t\t\tProgram.BST newBST = new Program.BST(value);\n\t\t\t\t\t\tcurrent.right = newBST;\n\t\t\t\t\t\treturn this;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcurrent = current.right;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npublic class ProgramTest {\n\t[Test]\n\tpublic void TestCase1() {\n\t\tvar root = new Program.BST(10);\n\t\troot.left = new Program.BST(5);\n\t\troot.left.left = new Program.BST(2);\n\t\troot.left.left.left = new Program.BST(1);\n\t\troot.left.right = new Program.BST(5);\n\t\troot.right = new Program.BST(15);\n\t\troot.right.left = new Program.BST(13);\n\t\troot.right.left.right = new Program.BST(14);\n\t\troot.right.right = new Program.BST(22);\n\n\t\tUtils.AssertTrue(Program.ValidateBst(root));\n\t}\n}\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nusing System;\n\npublic class Program {\n\t// O(n) time | O(d) space\n\tpublic static bool ValidateBst(BST tree) {\n\t\treturn ValidateBst(tree, Int32.MinValue, Int32.MaxValue);\n\t}\n\n\tpublic static bool ValidateBst(BST tree, int minValue, int maxValue) {\n\t\tif (tree.value < minValue || tree.value >= maxValue) {\n\t\t\treturn false;\n\t\t}\n\t\tif (tree.left != null && !ValidateBst(tree.left, minValue, tree.value)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (tree.right != null && !ValidateBst(tree.right, tree.value, maxValue)) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic class BST {\n\t\tpublic int value;\n\t\tpublic BST left;\n\t\tpublic BST right;\n\n\t\tpublic BST(int value) {\n\t\t\tthis.value = value;\n\t\t}\n\t}\n}\n"
      ]
    },
    "go": {
      "Language": "go",
      "StartingCode": "package main\n\ntype BST struct {\n\tValue int\n\n\tLeft  *BST\n\tRight *BST\n}\n\nfunc (tree *BST) Validate() bool {\n\t// Write your code here.\n\treturn false\n}\n",
      "StartingTest": "package main\n\nfunc NewBST(root int, values ...int) *BST {\n\ttree := &BST{Value: root}\n\tfor _, value := range values {\n\t\ttree.Insert(value)\n\t}\n\treturn tree\n}\n\nfunc (tree *BST) Insert(value int) {\n\tif value < tree.Value {\n\t\tif tree.Left == nil {\n\t\t\ttree.Left = &BST{Value: value}\n\t\t} else {\n\t\t\ttree.Left.Insert(value)\n\t\t}\n\t} else {\n\t\tif tree.Right == nil {\n\t\t\ttree.Right = &BST{Value: value}\n\t\t} else {\n\t\t\ttree.Right.Insert(value)\n\t\t}\n\t}\n}\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\toutput := NewBST(10, 5, 15, 5, 2, 1, 22, 13, 14).Validate()\n\texpected := true\n\tif output != expected {\n\t\tt.Fail()\n\t}\n}\n\nfunc (s *TestSuite) TestCase2(t *TestCase) {\n\toutput := NewBST(10, 5, 15, 5, 2, 1, 22, -5, -15, -5, -2, -1, -22).Validate()\n\texpected := true\n\tif output != expected {\n\t\tt.Fail()\n\t}\n}\n\nfunc (s *TestSuite) TestCase3(t *TestCase) {\n\toutput := NewBST(10).Validate()\n\texpected := true\n\tif output != expected {\n\t\tt.Fail()\n\t}\n}\n\nfunc (s *TestSuite) TestCase4(t *TestCase) {\n\toutput := NewBST(10, 5, 15, 5, 2, 1, 22, 500, 1500, 50, 200, 10000, 2200).Validate()\n\texpected := true\n\tif output != expected {\n\t\tt.Fail()\n\t}\n}\n\nfunc (s *TestSuite) TestCase5(t *TestCase) {\n\toutput := NewBST(5000, 5, 15, 5, 2, 1, 22, 1, 1, 3, 1, 1, 502, 55000, 204, 205, 207, 206, 208, 203).Validate()\n\texpected := true\n\tif output != expected {\n\t\tt.Fail()\n\t}\n}\n\nfunc (s *TestSuite) TestCase6(t *TestCase) {\n\ttree := NewBST(10, 5, 15, 5, 2, 1, 22)\n\ttree.Left.Right.Right = NewBST(11)\n\toutput := tree.Validate()\n\texpected := false\n\tif output != expected {\n\t\tt.Fail()\n\t}\n}\n\nfunc (s *TestSuite) TestCase7(t *TestCase) {\n\ttree := NewBST(10, 5, 15, 5, 2, 1, 22, -5, -15, -5, -2, -1, -22)\n\ttree.Left.Left.Left.Left.Left.Left.Left = NewBST(11)\n\toutput := tree.Validate()\n\texpected := false\n\tif output != expected {\n\t\tt.Fail()\n\t}\n}\n\nfunc (s *TestSuite) TestCase8(t *TestCase) {\n\ttree := NewBST(10, 12)\n\ttree.Left = NewBST(11)\n\toutput := tree.Validate()\n\texpected := false\n\tif output != expected {\n\t\tt.Fail()\n\t}\n}\n\nfunc (s *TestSuite) TestCase9(t *TestCase) {\n\ttree := NewBST(10, 5, 15, 5, 2, 1, 22, 500, 1500, 50, 200, 10000, 2200)\n\ttree.Right.Right.Right.Right.Right.Right = NewBST(9999)\n\toutput := tree.Validate()\n\texpected := false\n\tif output != expected {\n\t\tt.Fail()\n\t}\n}\n\nfunc (s *TestSuite) TestCase10(t *TestCase) {\n\ttree := NewBST(100, 5, 15, 5, 2, 1, 22, 1, 1, 3, 1, 1, 502, 55000, 204, 205, 207, 206, 208, 203)\n\ttree.Right.Left.Right.Left = NewBST(300)\n\toutput := tree.Validate()\n\texpected := false\n\tif output != expected {\n\t\tt.Fail()\n\t}\n}\n\nfunc (s *TestSuite) TestCase11(t *TestCase) {\n\ttree := NewBST(10, 5, 15)\n\ttree.Left.Right = NewBST(10)\n\toutput := tree.Validate()\n\texpected := false\n\tif output != expected {\n\t\tt.Fail()\n\t}\n}\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport \"github.com/stretchr/testify/require\"\n\nfunc NewBST(value int) *BST {\n\treturn &BST{Value: value}\n}\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\troot := NewBST(10)\n\troot.Left = NewBST(5)\n\troot.Left.Left = NewBST(2)\n\troot.Left.Left.Left = NewBST(1)\n\troot.Left.Right = NewBST(5)\n\troot.Right = NewBST(15)\n\troot.Right.Left = NewBST(13)\n\troot.Right.Left.Right = NewBST(14)\n\troot.Right.Right = NewBST(22)\n\n\toutput := root.Validate()\n\trequire.True(t, output)\n}\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\npackage main\n\nimport \"math\"\n\ntype BST struct {\n\tValue int\n\n\tLeft  *BST\n\tRight *BST\n}\n\n// O(n) time | O(d) space\nfunc (tree *BST) Validate() bool {\n\treturn tree.validate(math.MinInt32, math.MaxInt32)\n}\n\nfunc (tree *BST) validate(min, max int) bool {\n\tif tree.Value < min || tree.Value >= max {\n\t\treturn false\n\t}\n\tif tree.Left != nil && !tree.Left.validate(min, tree.Value) {\n\t\treturn false\n\t}\n\tif tree.Right != nil && !tree.Right.validate(tree.Value, max) {\n\t\treturn false\n\t}\n\treturn true\n}\n"
      ]
    },
    "java": {
      "Language": "java",
      "StartingCode": "import java.util.*;\n\nclass Program {\n  public static boolean validateBst(BST tree) {\n    // Write your code here.\n    return false;\n  }\n\n  static class BST {\n    public int value;\n    public BST left;\n    public BST right;\n\n    public BST(int value) {\n      this.value = value;\n    }\n  }\n}\n",
      "StartingTest": "class ProgramTest {\n  public TestBST test1;\n  public TestBST test2;\n  public TestBST test3;\n  public TestBST test4;\n  public TestBST test5;\n  public TestBST test6;\n  public TestBST test7;\n  public TestBST test8;\n  public TestBST test9;\n  public TestBST test10;\n  public TestBST test11;\n\n  public ProgramTest() {\n    this.test1 = new TestBST(10);\n    this.test1.insert(5).insert(15).insert(5).insert(2).insert(1).insert(22).insert(13).insert(14);\n\n    this.test2 = new TestBST(10);\n    this.test2\n        .insert(5)\n        .insert(15)\n        .insert(5)\n        .insert(2)\n        .insert(1)\n        .insert(22)\n        .insert(-5)\n        .insert(-15)\n        .insert(-5)\n        .insert(-2)\n        .insert(-1)\n        .insert(-22);\n\n    this.test3 = new TestBST(10);\n\n    this.test4 = new TestBST(10);\n    this.test4\n        .insert(5)\n        .insert(15)\n        .insert(5)\n        .insert(2)\n        .insert(1)\n        .insert(22)\n        .insert(500)\n        .insert(1500)\n        .insert(50)\n        .insert(200)\n        .insert(10000)\n        .insert(2200);\n\n    this.test5 = new TestBST(5000);\n    this.test5\n        .insert(5)\n        .insert(15)\n        .insert(5)\n        .insert(2)\n        .insert(1)\n        .insert(22)\n        .insert(1)\n        .insert(1)\n        .insert(3)\n        .insert(1)\n        .insert(1)\n        .insert(502)\n        .insert(55000)\n        .insert(204)\n        .insert(205)\n        .insert(207)\n        .insert(206)\n        .insert(208)\n        .insert(203);\n\n    this.test6 = new TestBST(10);\n    this.test6.insert(5).insert(15).insert(5).insert(2).insert(1).insert(22);\n    test6.left.right.right = new Program.BST(11);\n\n    this.test7 = new TestBST(10);\n    this.test7\n        .insert(5)\n        .insert(15)\n        .insert(5)\n        .insert(2)\n        .insert(1)\n        .insert(22)\n        .insert(-5)\n        .insert(-15)\n        .insert(-5)\n        .insert(-2)\n        .insert(-1)\n        .insert(-22);\n    test7.left.left.left.left.left.left.left = new Program.BST(11);\n\n    this.test8 = new TestBST(10);\n    this.test8.insert(12);\n    test8.left = new TestBST(11);\n\n    this.test9 = new TestBST(10);\n    this.test9\n        .insert(5)\n        .insert(15)\n        .insert(5)\n        .insert(2)\n        .insert(1)\n        .insert(22)\n        .insert(500)\n        .insert(1500)\n        .insert(50)\n        .insert(200)\n        .insert(10000)\n        .insert(2200);\n    test9.right.right.right.right.right.right = new Program.BST(9999);\n\n    this.test10 = new TestBST(100);\n    this.test10\n        .insert(5)\n        .insert(15)\n        .insert(5)\n        .insert(2)\n        .insert(1)\n        .insert(22)\n        .insert(1)\n        .insert(1)\n        .insert(3)\n        .insert(1)\n        .insert(1)\n        .insert(502)\n        .insert(55000)\n        .insert(204)\n        .insert(205)\n        .insert(207)\n        .insert(206)\n        .insert(208)\n        .insert(203);\n    test10.right.left.right.left = new Program.BST(300);\n\n    this.test11 = new TestBST(10);\n    this.test11.insert(5).insert(15);\n    test11.left.right = new Program.BST(10);\n  }\n\n  @Test\n  public void TestCase1() {\n    Utils.assertTrue(Program.validateBst(test1));\n  }\n\n  @Test\n  public void TestCase2() {\n    Utils.assertTrue(Program.validateBst(test2));\n  }\n\n  @Test\n  public void TestCase3() {\n    Utils.assertTrue(Program.validateBst(test3));\n  }\n\n  @Test\n  public void TestCase4() {\n    Utils.assertTrue(Program.validateBst(test4));\n  }\n\n  @Test\n  public void TestCase5() {\n    Utils.assertTrue(Program.validateBst(test5));\n  }\n\n  @Test\n  public void TestCase6() {\n    Utils.assertTrue(!Program.validateBst(test6));\n  }\n\n  @Test\n  public void TestCase7() {\n    Utils.assertTrue(!Program.validateBst(test7));\n  }\n\n  @Test\n  public void TestCase8() {\n    Utils.assertTrue(!Program.validateBst(test8));\n  }\n\n  @Test\n  public void TestCase9() {\n    Utils.assertTrue(!Program.validateBst(test9));\n  }\n\n  @Test\n  public void TestCase10() {\n    Utils.assertTrue(!Program.validateBst(test10));\n  }\n\n  @Test\n  public void TestCase11() {\n    Utils.assertTrue(!Program.validateBst(test11));\n  }\n\n  class TestBST extends Program.BST {\n    public TestBST(int value) {\n      super(value);\n    }\n\n    public TestBST insert(int value) {\n      Program.BST current = null;\n      if (value < this.value) {\n        if (this.left == null) {\n          Program.BST newBST = new Program.BST(value);\n          this.left = newBST;\n          return this;\n        } else {\n          current = this.left;\n        }\n      } else {\n        if (right == null) {\n          Program.BST newBST = new Program.BST(value);\n          this.right = newBST;\n          return this;\n        } else {\n          current = this.right;\n        }\n      }\n      while (true) {\n        if (value < current.value) {\n          if (current.left == null) {\n            Program.BST newBST = new Program.BST(value);\n            current.left = newBST;\n            return this;\n          } else {\n            current = current.left;\n          }\n        } else {\n          if (current.right == null) {\n            Program.BST newBST = new Program.BST(value);\n            current.right = newBST;\n            return this;\n          } else {\n            current = current.right;\n          }\n        }\n      }\n    }\n  }\n}\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    var root = new Program.BST(10);\n    root.left = new Program.BST(5);\n    root.left.left = new Program.BST(2);\n    root.left.left.left = new Program.BST(1);\n    root.left.right = new Program.BST(5);\n    root.right = new Program.BST(15);\n    root.right.left = new Program.BST(13);\n    root.right.left.right = new Program.BST(14);\n    root.right.right = new Program.BST(22);\n\n    Utils.assertTrue(Program.validateBst(root));\n  }\n}\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nclass Program {\n  // O(n) time | O(d) space\n  public static boolean validateBst(BST tree) {\n    return validateBst(tree, Integer.MIN_VALUE, Integer.MAX_VALUE);\n  }\n\n  public static boolean validateBst(BST tree, int minValue, int maxValue) {\n    if (tree.value < minValue || tree.value >= maxValue) {\n      return false;\n    }\n    if (tree.left != null && !validateBst(tree.left, minValue, tree.value)) {\n      return false;\n    }\n    if (tree.right != null && !validateBst(tree.right, tree.value, maxValue)) {\n      return false;\n    }\n    return true;\n  }\n\n  static class BST {\n    public int value;\n    public BST left;\n    public BST right;\n\n    public BST(int value) {\n      this.value = value;\n    }\n  }\n}\n"
      ]
    },
    "javascript": {
      "Language": "javascript",
      "StartingCode": "// This is an input class. Do not edit.\nclass BST {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n}\n\nfunction validateBst(tree) {\n  // Write your code here.\n}\n\n// Do not edit the line below.\nexports.BST = BST;\nexports.validateBst = validateBst;\n",
      "StartingTest": "const program = require('./program');\nconst chai = require('chai');\n\nclass StartBST {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n}\n\nconst progBST = program.BST || StartBST;\n\nclass BST extends progBST {\n  constructor(value) {\n    super(value);\n  }\n\n  insert(value) {\n    if (value < this.value) {\n      if (this.left === null) {\n        this.left = new BST(value);\n      } else {\n        this.left.insert(value);\n      }\n    } else {\n      if (this.right === null) {\n        this.right = new BST(value);\n      } else {\n        this.right.insert(value);\n      }\n    }\n    return this;\n  }\n}\n\nit('Test Case #1', function () {\n  const test1 = new BST(10).insert(5).insert(15).insert(5).insert(2).insert(1).insert(22).insert(13).insert(14);\n  chai.expect(program.validateBst(test1)).to.deep.equal(true);\n});\n\nit('Test Case #2', function () {\n  const test2 = new BST(10)\n    .insert(5)\n    .insert(15)\n    .insert(5)\n    .insert(2)\n    .insert(1)\n    .insert(22)\n    .insert(-5)\n    .insert(-15)\n    .insert(-5)\n    .insert(-2)\n    .insert(-1)\n    .insert(-22);\n  chai.expect(program.validateBst(test2)).to.deep.equal(true);\n});\n\nit('Test Case #3', function () {\n  const test3 = new BST(10);\n  chai.expect(program.validateBst(test3)).to.deep.equal(true);\n});\n\nit('Test Case #4', function () {\n  const test4 = new BST(10)\n    .insert(5)\n    .insert(15)\n    .insert(5)\n    .insert(2)\n    .insert(1)\n    .insert(22)\n    .insert(500)\n    .insert(1500)\n    .insert(50)\n    .insert(200)\n    .insert(10000)\n    .insert(2200);\n  chai.expect(program.validateBst(test4)).to.deep.equal(true);\n});\n\nit('Test Case #5', function () {\n  const test5 = new BST(5000)\n    .insert(5)\n    .insert(15)\n    .insert(5)\n    .insert(2)\n    .insert(1)\n    .insert(22)\n    .insert(1)\n    .insert(1)\n    .insert(3)\n    .insert(1)\n    .insert(1)\n    .insert(502)\n    .insert(55000)\n    .insert(204)\n    .insert(205)\n    .insert(207)\n    .insert(206)\n    .insert(208)\n    .insert(203);\n  chai.expect(program.validateBst(test5)).to.deep.equal(true);\n});\n\nit('Test Case #6', function () {\n  const test6 = new BST(10).insert(5).insert(15).insert(5).insert(2).insert(1).insert(22);\n  test6.left.right.right = new BST(11);\n  chai.expect(program.validateBst(test6)).to.deep.equal(false);\n});\n\nit('Test Case #7', function () {\n  const test7 = new BST(10)\n    .insert(5)\n    .insert(15)\n    .insert(5)\n    .insert(2)\n    .insert(1)\n    .insert(22)\n    .insert(-5)\n    .insert(-15)\n    .insert(-5)\n    .insert(-2)\n    .insert(-1)\n    .insert(-22);\n  test7.left.left.left.left.left.left.left = new BST(11);\n  chai.expect(program.validateBst(test7)).to.deep.equal(false);\n});\n\nit('Test Case #8', function () {\n  const test8 = new BST(10).insert(12);\n  test8.left = new BST(11);\n  chai.expect(program.validateBst(test8)).to.deep.equal(false);\n});\n\nit('Test Case #9', function () {\n  const test9 = new BST(10)\n    .insert(5)\n    .insert(15)\n    .insert(5)\n    .insert(2)\n    .insert(1)\n    .insert(22)\n    .insert(500)\n    .insert(1500)\n    .insert(50)\n    .insert(200)\n    .insert(10000)\n    .insert(2200);\n  test9.right.right.right.right.right.right = new BST(9999);\n  chai.expect(program.validateBst(test9)).to.deep.equal(false);\n});\n\nit('Test Case #10', function () {\n  const test10 = new BST(100)\n    .insert(5)\n    .insert(15)\n    .insert(5)\n    .insert(2)\n    .insert(1)\n    .insert(22)\n    .insert(1)\n    .insert(1)\n    .insert(3)\n    .insert(1)\n    .insert(1)\n    .insert(502)\n    .insert(55000)\n    .insert(204)\n    .insert(205)\n    .insert(207)\n    .insert(206)\n    .insert(208)\n    .insert(203);\n  test10.right.left.right.left = new BST(300);\n  chai.expect(program.validateBst(test10)).to.deep.equal(false);\n});\n\nit('Test Case #11', function () {\n  const test11 = new BST(10).insert(5).insert(15);\n  test11.left.right = new BST(10);\n  chai.expect(program.validateBst(test11)).to.deep.equal(false);\n});\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nclass BST {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n}\n\nit('Test Case #1', function () {\n  const root = new BST(10);\n  root.left = new BST(5);\n  root.left.left = new BST(2);\n  root.left.left.left = new BST(1);\n  root.left.right = new BST(5);\n  root.right = new BST(15);\n  root.right.left = new BST(13);\n  root.right.left.right = new BST(14);\n  root.right.right = new BST(22);\n\n  chai.expect(program.validateBst(root)).to.deep.equal(true);\n});\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nclass BST {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n}\n\n// O(n) time | O(d) space\nfunction validateBst(tree) {\n  return validateBstHelper(tree, -Infinity, Infinity);\n}\n\nfunction validateBstHelper(tree, minValue, maxValue) {\n  if (tree === null) return true;\n  if (tree.value < minValue || tree.value >= maxValue) return false;\n  const leftIsValid = validateBstHelper(tree.left, minValue, tree.value);\n  return leftIsValid && validateBstHelper(tree.right, tree.value, maxValue);\n}\n\nexports.BST = BST;\nexports.validateBst = validateBst;\n"
      ]
    },
    "python": {
      "Language": "python",
      "StartingCode": "# This is an input class. Do not edit.\nclass BST:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\n\ndef validateBst(tree):\n    # Write your code here.\n    pass\n",
      "StartingTest": "import program\nimport unittest\n\n\nclass StartBST:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\n\nprogBST = StartBST\nif hasattr(program, \"BST\"):\n    progBST = program.BST\n\n\nclass BST(progBST):\n    def insert(self, value):\n        if value < self.value:\n            if self.left is None:\n                self.left = BST(value)\n            else:\n                self.left.insert(value)\n        else:\n            if self.right is None:\n                self.right = BST(value)\n            else:\n                self.right.insert(value)\n        return self\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        test1 = BST(10).insert(5).insert(15).insert(5).insert(2).insert(1).insert(22).insert(13).insert(14)\n        self.assertEqual(program.validateBst(test1), True)\n\n    def test_case_2(self):\n        test2 = (\n            BST(10)\n            .insert(5)\n            .insert(15)\n            .insert(5)\n            .insert(2)\n            .insert(1)\n            .insert(22)\n            .insert(-5)\n            .insert(-15)\n            .insert(-5)\n            .insert(-2)\n            .insert(-1)\n            .insert(-22)\n        )\n        self.assertEqual(program.validateBst(test2), True)\n\n    def test_case_3(self):\n        test3 = BST(10)\n        self.assertEqual(program.validateBst(test3), True)\n\n    def test_case_4(self):\n        test4 = (\n            BST(10)\n            .insert(5)\n            .insert(15)\n            .insert(5)\n            .insert(2)\n            .insert(1)\n            .insert(22)\n            .insert(500)\n            .insert(1500)\n            .insert(50)\n            .insert(200)\n            .insert(10000)\n            .insert(2200)\n        )\n        self.assertEqual(program.validateBst(test4), True)\n\n    def test_case_5(self):\n        test5 = (\n            BST(5000)\n            .insert(5)\n            .insert(15)\n            .insert(5)\n            .insert(2)\n            .insert(1)\n            .insert(22)\n            .insert(1)\n            .insert(1)\n            .insert(3)\n            .insert(1)\n            .insert(1)\n            .insert(502)\n            .insert(55000)\n            .insert(204)\n            .insert(205)\n            .insert(207)\n            .insert(206)\n            .insert(208)\n            .insert(203)\n        )\n        self.assertEqual(program.validateBst(test5), True)\n\n    def test_case_6(self):\n        test6 = BST(10).insert(5).insert(15).insert(5).insert(2).insert(1).insert(22)\n        test6.left.right.right = BST(11)\n        self.assertEqual(program.validateBst(test6), False)\n\n    def test_case_7(self):\n        test7 = (\n            BST(10)\n            .insert(5)\n            .insert(15)\n            .insert(5)\n            .insert(2)\n            .insert(1)\n            .insert(22)\n            .insert(-5)\n            .insert(-15)\n            .insert(-5)\n            .insert(-2)\n            .insert(-1)\n            .insert(-22)\n        )\n        test7.left.left.left.left.left.left.left = BST(11)\n        self.assertEqual(program.validateBst(test7), False)\n\n    def test_case_8(self):\n        test8 = BST(10).insert(12)\n        test8.left = BST(11)\n        self.assertEqual(program.validateBst(test8), False)\n\n    def test_case_9(self):\n        test9 = (\n            BST(10)\n            .insert(5)\n            .insert(15)\n            .insert(5)\n            .insert(2)\n            .insert(1)\n            .insert(22)\n            .insert(500)\n            .insert(1500)\n            .insert(50)\n            .insert(200)\n            .insert(10000)\n            .insert(2200)\n        )\n        test9.right.right.right.right.right.right = BST(9999)\n        self.assertEqual(program.validateBst(test9), False)\n\n    def test_case_10(self):\n        test10 = (\n            BST(100)\n            .insert(5)\n            .insert(15)\n            .insert(5)\n            .insert(2)\n            .insert(1)\n            .insert(22)\n            .insert(1)\n            .insert(1)\n            .insert(3)\n            .insert(1)\n            .insert(1)\n            .insert(502)\n            .insert(55000)\n            .insert(204)\n            .insert(205)\n            .insert(207)\n            .insert(206)\n            .insert(208)\n            .insert(203)\n        )\n        test10.right.left.right.left = BST(300)\n        self.assertEqual(program.validateBst(test10), False)\n\n    def test_case_11(self):\n        test11 = BST(10).insert(5).insert(15)\n        test11.left.right = BST(10)\n        self.assertEqual(program.validateBst(test11), False)\n",
      "SandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass BST:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        root = BST(10)\n        root.left = BST(5)\n        root.left.left = BST(2)\n        root.left.left.left = BST(1)\n        root.left.right = BST(5)\n        root.right = BST(15)\n        root.right.left = BST(13)\n        root.right.left.right = BST(14)\n        root.right.right = BST(22)\n        self.assertEqual(program.validateBst(root), True)\n",
      "Solutions": [
        "# Copyright © 2020 Code Complete. All rights reserved.\n\nclass BST:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\n\n# O(n) time | O(d) space\ndef validateBst(tree):\n    return validateBstHelper(tree, float(\"-inf\"), float(\"inf\"))\n\n\ndef validateBstHelper(tree, minValue, maxValue):\n    if tree is None:\n        return True\n    if tree.value < minValue or tree.value >= maxValue:\n        return False\n    leftIsValid = validateBstHelper(tree.left, minValue, tree.value)\n    return leftIsValid and validateBstHelper(tree.right, tree.value, maxValue)\n"
      ]
    },
    "swift": {
      "Language": "swift",
      "StartingCode": "class Program {\n  // This is an input class. Do not edit.\n  class BST {\n    var value: Int?\n    var left: BST?\n    var right: BST?\n\n    init(value: Int) {\n      self.value = value\n      left = nil\n      right = nil\n    }\n  }\n\n  func validateBST(tree: BST) -> Bool {\n    // Write your code here.\n    return false\n  }\n}\n",
      "StartingTest": "class ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      let tree = TestBST(value: 10).insert(value: 5).insert(value: 15).insert(value: 5).insert(value: 2).insert(value: 1).insert(value: 22).insert(value: 13).insert(value: 14)\n      try assertEqual(true, program.validateBST(tree: tree))\n    }\n    runTest(\"Test Case 2\") { () throws -> Void in\n      let tree = TestBST(value: 10).insert(value: 5).insert(value: 15).insert(value: 5).insert(value: 2).insert(value: 1).insert(value: 22).insert(value: -5).insert(value: -15).insert(value: -5).insert(value: -2).insert(value: -1).insert(value: -22)\n      try assertEqual(true, program.validateBST(tree: tree))\n    }\n    runTest(\"Test Case 3\") { () throws -> Void in\n      let tree = TestBST(value: 10)\n      try assertEqual(true, program.validateBST(tree: tree))\n    }\n    runTest(\"Test Case 4\") { () throws -> Void in\n      let tree = TestBST(value: 10).insert(value: 5).insert(value: 15).insert(value: 5).insert(value: 2).insert(value: 1).insert(value: 22).insert(value: 500).insert(value: 1500).insert(value: 50).insert(value: 200).insert(value: 10000).insert(value: 2200)\n      try assertEqual(true, program.validateBST(tree: tree))\n    }\n    runTest(\"Test Case 5\") { () throws -> Void in\n      let tree = TestBST(value: 5000).insert(value: 5).insert(value: 15).insert(value: 5).insert(value: 2).insert(value: 1).insert(value: 22).insert(value: 1).insert(value: 1).insert(value: 3).insert(value: 1).insert(value: 1).insert(value: 502).insert(value: 55000).insert(value: 204).insert(value: 205).insert(value: 207).insert(value: 206).insert(value: 208).insert(value: 203)\n      try assertEqual(true, program.validateBST(tree: tree))\n    }\n    runTest(\"Test Case 6\") { () throws -> Void in\n      let tree = TestBST(value: 10).insert(value: 5).insert(value: 15).insert(value: 5).insert(value: 2).insert(value: 1).insert(value: 22)\n      tree.left?.right?.right = TestBST(value: 11)\n      try assertEqual(false, program.validateBST(tree: tree))\n    }\n    runTest(\"Test Case 7\") { () throws -> Void in\n      let tree = TestBST(value: 10).insert(value: 5).insert(value: 15).insert(value: 5).insert(value: 2).insert(value: 1).insert(value: 22).insert(value: -5).insert(value: -15).insert(value: -5).insert(value: -2).insert(value: -1).insert(value: -22)\n      tree.left?.left?.left?.left?.left?.left?.left = TestBST(value: 11)\n      try assertEqual(false, program.validateBST(tree: tree))\n    }\n    runTest(\"Test Case 8\") { () throws -> Void in\n      let tree = TestBST(value: 10).insert(value: 12)\n      tree.left = TestBST(value: 11)\n      try assertEqual(false, program.validateBST(tree: tree))\n    }\n    runTest(\"Test Case 9\") { () throws -> Void in\n      let tree = TestBST(value: 10).insert(value: 5).insert(value: 15).insert(value: 5).insert(value: 2).insert(value: 1).insert(value: 22).insert(value: 500).insert(value: 1500).insert(value: 50).insert(value: 200).insert(value: 10000).insert(value: 2200)\n      tree.right?.right?.right?.right?.right?.right = TestBST(value: 9999)\n      try assertEqual(false, program.validateBST(tree: tree))\n    }\n    runTest(\"Test Case 10\") { () throws -> Void in\n      let tree = TestBST(value: 100).insert(value: 5).insert(value: 15).insert(value: 5).insert(value: 2).insert(value: 1).insert(value: 22).insert(value: 1).insert(value: 1).insert(value: 502).insert(value: 55000).insert(value: 204).insert(value: 205).insert(value: 207).insert(value: 206).insert(value: 208).insert(value: 203)\n      tree.right?.left?.right?.left = TestBST(value: 300)\n      try assertEqual(false, program.validateBST(tree: tree))\n    }\n    runTest(\"Test Case 11\") { () throws -> Void in\n      let tree = TestBST(value: 10).insert(value: 5).insert(value: 15)\n      tree.left?.right = TestBST(value: 10)\n      try assertEqual(false, program.validateBST(tree: tree))\n    }\n  }\n}\n\nclass TestBST: Program.BST {\n  func insert(value: Int) -> TestBST {\n    var currentNode: Program.BST? = self as Program.BST?\n\n    while true {\n      if let node = currentNode, let currentNodeValue = node.value, value < currentNodeValue {\n        if node.left === nil {\n          node.left = TestBST(value: value) as Program.BST\n          break\n\n        } else {\n          currentNode = node.left\n        }\n      } else if let node = currentNode {\n        if node.right === nil {\n          node.right = TestBST(value: value) as Program.BST\n          break\n\n        } else {\n          currentNode = node.right\n        }\n      }\n    }\n    return self\n  }\n}\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      let root = Program.BST(value: 10)\n      root.left = Program.BST(value: 5)\n      root.left!.left = Program.BST(value: 2)\n      root.left!.left!.left = Program.BST(value: 1)\n      root.left!.right = Program.BST(value: 5)\n      root.right = Program.BST(value: 15)\n      root.right!.left = Program.BST(value: 13)\n      root.right!.left!.right = Program.BST(value: 14)\n      root.right!.right = Program.BST(value: 22)\n\n      try assertEqual(true, program.validateBST(tree: root))\n    }\n  }\n}\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nclass Program {\n  class BST {\n    var value: Int?\n    var left: BST?\n    var right: BST?\n\n    init(value: Int) {\n      self.value = value\n      left = nil\n      right = nil\n    }\n  }\n\n  // O(n) time | O(d) space\n  func validateBST(tree: BST) -> Bool {\n    var minimum = Int(Int32.min)\n    var maximum = Int(Int32.max)\n    return validateBSTHelper(tree: tree, minimum: &minimum, maximum: &maximum)\n  }\n\n  func validateBSTHelper(tree: BST?, minimum: inout Int, maximum: inout Int) -> Bool {\n    if tree === nil {\n      return true\n    }\n\n    if let tree = tree, let value = tree.value, value < minimum || value >= maximum {\n      return false\n    }\n\n    if var treeValue = tree?.value {\n      let leftIsValid = validateBSTHelper(tree: tree?.left, minimum: &minimum, maximum: &treeValue)\n      let rightIsValid = validateBSTHelper(tree: tree?.right, minimum: &treeValue, maximum: &maximum)\n\n      return leftIsValid && rightIsValid\n    } else {\n      return false\n    }\n  }\n}\n"
      ]
    },
    "typescript": {
      "Language": "typescript",
      "StartingCode": "// This is an input class. Do not edit.\nclass BST {\n  value: number;\n  left: BST | null;\n  right: BST | null;\n\n  constructor(value: number) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n}\n\nexport function validateBst(tree: BST) {\n  // Write your code here.\n  return false;\n}\n",
      "StartingTest": "",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nclass BST {\n  value: number;\n  left: BST | null;\n  right: BST | null;\n\n  constructor(value: number) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n}\n\nit('Test Case #1', function () {\n  const root = new BST(10);\n  root.left = new BST(5);\n  root.left.left = new BST(2);\n  root.left.left.left = new BST(1);\n  root.left.right = new BST(5);\n  root.right = new BST(15);\n  root.right.left = new BST(13);\n  root.right.left.right = new BST(14);\n  root.right.right = new BST(22);\n\n  chai.expect(program.validateBst(root)).to.deep.equal(true);\n});\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nclass BST {\n  value: number;\n  left: BST | null;\n  right: BST | null;\n\n  constructor(value: number) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n}\n\n// O(n) time | O(d) space\nexport function validateBst(tree: BST) {\n  return validateBstHelper(tree, -Infinity, Infinity);\n}\n\nfunction validateBstHelper(tree: BST | null, minValue: number, maxValue: number): boolean {\n  if (tree === null) return true;\n  if (tree.value < minValue || tree.value >= maxValue) return false;\n  const leftIsValid = validateBstHelper(tree.left, minValue, tree.value);\n  return leftIsValid && validateBstHelper(tree.right, tree.value, maxValue);\n}\n"
      ]
    }
  },
  "JSONTestLanguages": [
    "javascript",
    "cpp",
    "python",
    "java",
    "csharp",
    "go",
    "swift",
    "typescript"
  ],
  "JSONTests": [
    {
      "tree": {
        "nodes": [
          {
            "id": "10",
            "left": "5",
            "right": "15",
            "value": 10
          },
          {
            "id": "15",
            "left": "13",
            "right": "22",
            "value": 15
          },
          {
            "id": "22",
            "left": null,
            "right": null,
            "value": 22
          },
          {
            "id": "13",
            "left": null,
            "right": "14",
            "value": 13
          },
          {
            "id": "14",
            "left": null,
            "right": null,
            "value": 14
          },
          {
            "id": "5",
            "left": "2",
            "right": "5-2",
            "value": 5
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "2",
            "left": "1",
            "right": null,
            "value": 2
          },
          {
            "id": "1",
            "left": null,
            "right": null,
            "value": 1
          }
        ],
        "root": "10"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "10",
            "left": "5",
            "right": "15",
            "value": 10
          },
          {
            "id": "15",
            "left": null,
            "right": "22",
            "value": 15
          },
          {
            "id": "22",
            "left": null,
            "right": null,
            "value": 22
          },
          {
            "id": "5",
            "left": "2",
            "right": "5-2",
            "value": 5
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "2",
            "left": "1",
            "right": null,
            "value": 2
          },
          {
            "id": "1",
            "left": "-5",
            "right": null,
            "value": 1
          },
          {
            "id": "-5",
            "left": "-15",
            "right": "-5-2",
            "value": -5
          },
          {
            "id": "-5-2",
            "left": null,
            "right": "-2",
            "value": -5
          },
          {
            "id": "-2",
            "left": null,
            "right": "-1",
            "value": -2
          },
          {
            "id": "-1",
            "left": null,
            "right": null,
            "value": -1
          },
          {
            "id": "-15",
            "left": "-22",
            "right": null,
            "value": -15
          },
          {
            "id": "-22",
            "left": null,
            "right": null,
            "value": -22
          }
        ],
        "root": "10"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "10",
            "left": null,
            "right": null,
            "value": 10
          }
        ],
        "root": "10"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "10",
            "left": "5",
            "right": "15",
            "value": 10
          },
          {
            "id": "15",
            "left": null,
            "right": "22",
            "value": 15
          },
          {
            "id": "22",
            "left": null,
            "right": "500",
            "value": 22
          },
          {
            "id": "500",
            "left": "50",
            "right": "1500",
            "value": 500
          },
          {
            "id": "1500",
            "left": null,
            "right": "10000",
            "value": 1500
          },
          {
            "id": "10000",
            "left": "2200",
            "right": null,
            "value": 10000
          },
          {
            "id": "2200",
            "left": null,
            "right": null,
            "value": 2200
          },
          {
            "id": "50",
            "left": null,
            "right": "200",
            "value": 50
          },
          {
            "id": "200",
            "left": null,
            "right": null,
            "value": 200
          },
          {
            "id": "5",
            "left": "2",
            "right": "5-2",
            "value": 5
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "2",
            "left": "1",
            "right": null,
            "value": 2
          },
          {
            "id": "1",
            "left": null,
            "right": null,
            "value": 1
          }
        ],
        "root": "10"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "5000",
            "left": "5",
            "right": "55000",
            "value": 5000
          },
          {
            "id": "55000",
            "left": null,
            "right": null,
            "value": 55000
          },
          {
            "id": "5",
            "left": "2",
            "right": "15",
            "value": 5
          },
          {
            "id": "15",
            "left": "5-2",
            "right": "22",
            "value": 15
          },
          {
            "id": "22",
            "left": null,
            "right": "502",
            "value": 22
          },
          {
            "id": "502",
            "left": "204",
            "right": null,
            "value": 502
          },
          {
            "id": "204",
            "left": "203",
            "right": "205",
            "value": 204
          },
          {
            "id": "205",
            "left": null,
            "right": "207",
            "value": 205
          },
          {
            "id": "207",
            "left": "206",
            "right": "208",
            "value": 207
          },
          {
            "id": "208",
            "left": null,
            "right": null,
            "value": 208
          },
          {
            "id": "206",
            "left": null,
            "right": null,
            "value": 206
          },
          {
            "id": "203",
            "left": null,
            "right": null,
            "value": 203
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "2",
            "left": "1",
            "right": "3",
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          },
          {
            "id": "1",
            "left": null,
            "right": "1-2",
            "value": 1
          },
          {
            "id": "1-2",
            "left": null,
            "right": "1-3",
            "value": 1
          },
          {
            "id": "1-3",
            "left": null,
            "right": "1-4",
            "value": 1
          },
          {
            "id": "1-4",
            "left": null,
            "right": "1-5",
            "value": 1
          },
          {
            "id": "1-5",
            "left": null,
            "right": null,
            "value": 1
          }
        ],
        "root": "5000"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "10",
            "left": "5",
            "right": "15",
            "value": 10
          },
          {
            "id": "15",
            "left": null,
            "right": "22",
            "value": 15
          },
          {
            "id": "22",
            "left": null,
            "right": null,
            "value": 22
          },
          {
            "id": "5",
            "left": "2",
            "right": "5-2",
            "value": 5
          },
          {
            "id": "5-2",
            "left": null,
            "right": "11",
            "value": 5
          },
          {
            "id": "11",
            "left": null,
            "right": null,
            "value": 11
          },
          {
            "id": "2",
            "left": "1",
            "right": null,
            "value": 2
          },
          {
            "id": "1",
            "left": null,
            "right": null,
            "value": 1
          }
        ],
        "root": "10"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "10",
            "left": "5",
            "right": "15",
            "value": 10
          },
          {
            "id": "15",
            "left": null,
            "right": "22",
            "value": 15
          },
          {
            "id": "22",
            "left": null,
            "right": null,
            "value": 22
          },
          {
            "id": "5",
            "left": "2",
            "right": "5-2",
            "value": 5
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "2",
            "left": "1",
            "right": null,
            "value": 2
          },
          {
            "id": "1",
            "left": "-5",
            "right": null,
            "value": 1
          },
          {
            "id": "-5",
            "left": "-15",
            "right": "-5-2",
            "value": -5
          },
          {
            "id": "-5-2",
            "left": null,
            "right": "-2",
            "value": -5
          },
          {
            "id": "-2",
            "left": null,
            "right": "-1",
            "value": -2
          },
          {
            "id": "-1",
            "left": null,
            "right": null,
            "value": -1
          },
          {
            "id": "-15",
            "left": "-22",
            "right": null,
            "value": -15
          },
          {
            "id": "-22",
            "left": "11",
            "right": null,
            "value": -22
          },
          {
            "id": "11",
            "left": null,
            "right": null,
            "value": 11
          }
        ],
        "root": "10"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "10",
            "left": "11",
            "right": "12",
            "value": 10
          },
          {
            "id": "12",
            "left": null,
            "right": null,
            "value": 12
          },
          {
            "id": "11",
            "left": null,
            "right": null,
            "value": 11
          }
        ],
        "root": "10"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "10",
            "left": "5",
            "right": "15",
            "value": 10
          },
          {
            "id": "15",
            "left": null,
            "right": "22",
            "value": 15
          },
          {
            "id": "22",
            "left": null,
            "right": "500",
            "value": 22
          },
          {
            "id": "500",
            "left": "50",
            "right": "1500",
            "value": 500
          },
          {
            "id": "1500",
            "left": null,
            "right": "10000",
            "value": 1500
          },
          {
            "id": "10000",
            "left": "2200",
            "right": "9999",
            "value": 10000
          },
          {
            "id": "9999",
            "left": null,
            "right": null,
            "value": 9999
          },
          {
            "id": "2200",
            "left": null,
            "right": null,
            "value": 2200
          },
          {
            "id": "50",
            "left": null,
            "right": "200",
            "value": 50
          },
          {
            "id": "200",
            "left": null,
            "right": null,
            "value": 200
          },
          {
            "id": "5",
            "left": "2",
            "right": "5-2",
            "value": 5
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "2",
            "left": "1",
            "right": null,
            "value": 2
          },
          {
            "id": "1",
            "left": null,
            "right": null,
            "value": 1
          }
        ],
        "root": "10"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "100",
            "left": "5",
            "right": "502",
            "value": 100
          },
          {
            "id": "502",
            "left": "204",
            "right": "55000",
            "value": 502
          },
          {
            "id": "55000",
            "left": null,
            "right": null,
            "value": 55000
          },
          {
            "id": "204",
            "left": "203",
            "right": "205",
            "value": 204
          },
          {
            "id": "205",
            "left": "300",
            "right": "207",
            "value": 205
          },
          {
            "id": "207",
            "left": "206",
            "right": "208",
            "value": 207
          },
          {
            "id": "208",
            "left": null,
            "right": null,
            "value": 208
          },
          {
            "id": "206",
            "left": null,
            "right": null,
            "value": 206
          },
          {
            "id": "300",
            "left": null,
            "right": null,
            "value": 300
          },
          {
            "id": "203",
            "left": null,
            "right": null,
            "value": 203
          },
          {
            "id": "5",
            "left": "2",
            "right": "15",
            "value": 5
          },
          {
            "id": "15",
            "left": "5-2",
            "right": "22",
            "value": 15
          },
          {
            "id": "22",
            "left": null,
            "right": null,
            "value": 22
          },
          {
            "id": "5-2",
            "left": null,
            "right": null,
            "value": 5
          },
          {
            "id": "2",
            "left": "1",
            "right": "3",
            "value": 2
          },
          {
            "id": "3",
            "left": null,
            "right": null,
            "value": 3
          },
          {
            "id": "1",
            "left": null,
            "right": "1-2",
            "value": 1
          },
          {
            "id": "1-2",
            "left": null,
            "right": "1-3",
            "value": 1
          },
          {
            "id": "1-3",
            "left": null,
            "right": "1-4",
            "value": 1
          },
          {
            "id": "1-4",
            "left": null,
            "right": "1-5",
            "value": 1
          },
          {
            "id": "1-5",
            "left": null,
            "right": null,
            "value": 1
          }
        ],
        "root": "100"
      }
    },
    {
      "tree": {
        "nodes": [
          {
            "id": "10",
            "left": "5",
            "right": "15",
            "value": 10
          },
          {
            "id": "15",
            "left": null,
            "right": null,
            "value": 15
          },
          {
            "id": "5",
            "left": null,
            "right": "10-2",
            "value": 5
          },
          {
            "id": "10-2",
            "left": null,
            "right": null,
            "value": 10
          }
        ],
        "root": "10"
      }
    }
  ],
  "JSONAnswers": [
    [
      true,
      true,
      true,
      true,
      true,
      false,
      false,
      false,
      false,
      false,
      false
    ]
  ]
}