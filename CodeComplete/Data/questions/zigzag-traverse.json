{
  "Summary": {
    "Name": "Zigzag Traverse",
    "Category": "Arrays",
    "Difficulty": 3,
    "Available": true,
    "Metadata": {
      "date": "2019-09-01T00:00:00Z",
      "number": 463,
      "timeOne": 0,
      "timeTwo": 1261,
      "url": "https://player.vimeo.com/video/354934984"
    }
  },
  "Prompt": "",
  "Hints": "Don't overthink this question by trying to come up with a clever way of getting the zigzag order. Think about the simplest checks that need to be made to decide when and how to change direction throughout the zigzag traversal.\nStarting at the top left corner, iterate through the two-dimensional array by keeping track of the direction that you're moving in (up or down). If you're moving up, you know that you need to move in an up-right pattern and that you need to handle the case where you hit the top or the right borders of the array. If you're moving down, you know that you need to move in a down-left pattern and that you need to handle the case where you hit the left or the bottom borders of the array.\nWhen going up, if you hit the right border, you'll have to go down one element; if you hit the top border, you'll have to go right one element. Similarly, when going down, if you hit the left border, you'll have to go down one element; if you hit the bottom border, you'll have to go right one element.",
  "SpaceTime": "O(n) time | O(n) space - where n is the total number of elements in the two-dimensional array\n",
  "PromptHTML": "<p>\n  Write a function that takes in an n x m two-dimensional array (that can be\n  square-shaped when n === m) and returns a one-dimensional array of all the\n  array's elements in zigzag order.\n</p>\n<p>\n  Zigzag order starts at the top left corner of the two-dimensional array, goes\n  down by one element, and proceeds in a zigzag pattern all the way to the\n  bottom right corner.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">array</span> = [\n  [1, 3, 4, 10],\n  [2, 5, 9, 11],\n  [6, 8, 12, 15],\n  [7, 13, 14, 16],\n]\n</pre>\n<h3>Sample Output</h3>\n<pre>\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n</pre>\n",
  "Notes": "",
  "IsLongOutput": false,
  "Visualization": {
    "inputType": null,
    "outputType": null
  },
  "CustomInputLanguages": [
    "javascript",
    "cpp",
    "python",
    "java",
    "csharp",
    "go",
    "swift",
    "typescript"
  ],
  "CustomInputVars": [
    {
      "Name": "array",
      "Example": [
        [
          1,
          3,
          4,
          10
        ],
        [
          2,
          5,
          9,
          11
        ],
        [
          6,
          8,
          12,
          15
        ],
        [
          7,
          13,
          14,
          16
        ]
      ],
      "Schema": {
        "items": {
          "items": {
            "type": "integer"
          },
          "type": "array"
        },
        "type": "array"
      }
    }
  ],
  "Resources": {
    "cpp": {
      "Language": "cpp",
      "StartingCode": "#include <vector>\n\nusing namespace std;\n\nvector<int> zigzagTraverse(vector<vector<int>> array) {\n  // Write your code here.\n  return {};\n}\n",
      "StartingTest": "class ProgramTest : public TestSuite {\npublic:\n  void Run() {\n\n    RunTest(\"Test Case 1\", []() {\n      vector<vector<int>> test = {{1}};\n      vector<int> expected = {1};\n      assert(zigzagTraverse(test) == expected);\n    });\n\n    RunTest(\"Test Case 2\", []() {\n      vector<vector<int>> test = {{1, 2, 3, 4, 5}};\n      vector<int> expected = {1, 2, 3, 4, 5};\n      assert(zigzagTraverse(test) == expected);\n    });\n\n    RunTest(\"Test Case 3\", []() {\n      vector<vector<int>> test = {{1}, {2}, {3}, {4}, {5}};\n      vector<int> expected = {1, 2, 3, 4, 5};\n      assert(zigzagTraverse(test) == expected);\n    });\n\n    RunTest(\"Test Case 4\", []() {\n      vector<vector<int>> test = {{1, 3}, {2, 4}, {5, 7}, {6, 8}, {9, 10}};\n      vector<int> expected = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n      assert(zigzagTraverse(test) == expected);\n    });\n\n    RunTest(\"Test Case 5\", []() {\n      vector<vector<int>> test = {{1, 3, 4, 7, 8}, {2, 5, 6, 9, 10}};\n      vector<int> expected = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n      assert(zigzagTraverse(test) == expected);\n    });\n\n    RunTest(\"Test Case 6\", []() {\n      vector<vector<int>> test = {\n          {1, 3, 4, 10}, {2, 5, 9, 11}, {6, 8, 12, 15}, {7, 13, 14, 16}};\n      vector<int> expected = {1, 2,  3,  4,  5,  6,  7,  8,\n                              9, 10, 11, 12, 13, 14, 15, 16};\n      assert(zigzagTraverse(test) == expected);\n    });\n\n    RunTest(\"Test Case 7\", []() {\n      vector<vector<int>> test = {{1, 3, 4, 10, 11},\n                                  {2, 5, 9, 12, 19},\n                                  {6, 8, 13, 18, 20},\n                                  {7, 14, 17, 21, 24},\n                                  {15, 16, 22, 23, 25}};\n      vector<int> expected = {1,  2,  3,  4,  5,  6,  7,  8,  9,\n                              10, 11, 12, 13, 14, 15, 16, 17, 18,\n                              19, 20, 21, 22, 23, 24, 25};\n      assert(zigzagTraverse(test) == expected);\n    });\n\n    RunTest(\"Test Case 8\", []() {\n      vector<vector<int>> test = {{1, 3, 4, 10, 11, 20},\n                                  {2, 5, 9, 12, 19, 21},\n                                  {6, 8, 13, 18, 22, 27},\n                                  {7, 14, 17, 23, 26, 28},\n                                  {15, 16, 24, 25, 29, 30}};\n      vector<int> expected = {1,  2,  3,  4,  5,  6,  7,  8,  9,  10,\n                              11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n                              21, 22, 23, 24, 25, 26, 27, 28, 29, 30};\n      assert(zigzagTraverse(test) == expected);\n    });\n\n    RunTest(\"Test Case 9\", []() {\n      vector<vector<int>> test = {{1, 3, 4, 10, 11},    {2, 5, 9, 12, 20},\n                                  {6, 8, 13, 19, 21},   {7, 14, 18, 22, 27},\n                                  {15, 17, 23, 26, 28}, {16, 24, 25, 29, 30}};\n      vector<int> expected = {1,  2,  3,  4,  5,  6,  7,  8,  9,  10,\n                              11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n                              21, 22, 23, 24, 25, 26, 27, 28, 29, 30};\n      assert(zigzagTraverse(test) == expected);\n    });\n  }\n};\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\npublic:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<vector<int>> test = {\n          {1, 3, 4, 10}, {2, 5, 9, 11}, {6, 8, 12, 15}, {7, 13, 14, 16}};\n      vector<int> expected = {1, 2,  3,  4,  5,  6,  7,  8,\n                              9, 10, 11, 12, 13, 14, 15, 16};\n      assert(zigzagTraverse(test) == expected);\n    });\n  }\n};\n",
      "Solutions": [
        "// Copyright Â© 2020 Code Complete. All rights reserved.\n\n#include <vector>\n\nusing namespace std;\n\nbool isOutOfBounds(int row, int col, int height, int width);\n\n// O(n) time | O(n) space - where n is the total number of elements in the\n// two-dimensional array\nvector<int> zigzagTraverse(vector<vector<int>> array) {\n  int height = array.size() - 1;\n  int width = array[0].size() - 1;\n  vector<int> result = {};\n  int row = 0;\n  int col = 0;\n  bool goingDown = true;\n  while (!isOutOfBounds(row, col, height, width)) {\n    result.push_back(array[row][col]);\n    if (goingDown) {\n      if (col == 0 || row == height) {\n        goingDown = false;\n        if (row == height) {\n          col++;\n        } else {\n          row++;\n        }\n      } else {\n        row++;\n        col--;\n      }\n    } else {\n      if (row == 0 || col == width) {\n        goingDown = true;\n        if (col == width) {\n          row++;\n        } else {\n          col++;\n        }\n      } else {\n        row--;\n        col++;\n      }\n    }\n  }\n  return result;\n}\n\nbool isOutOfBounds(int row, int col, int height, int width) {\n  return row < 0 || row > height || col < 0 || col > width;\n}"
      ]
    },
    "csharp": {
      "Language": "csharp",
      "StartingCode": "using System.Collections.Generic;\n\npublic class Program {\n\tpublic static List<int> ZigzagTraverse(List<List<int> > array) {\n\t\t// Write your code here.\n\t\treturn null;\n\t}\n}\n",
      "StartingTest": "using System.Linq;\nusing System.Collections.Generic;\n\npublic class ProgramTest {\n\t[Test]\n\tpublic void TestCase1() {\n\t\tList<List<int> > test = new List<List<int> >();\n\t\ttest.Add(new List<int>(){\n\t\t\t1\n\t\t});\n\t\tList<int> expected = new List<int>(){\n\t\t\t1\n\t\t};\n\t\tUtils.AssertTrue(Program.ZigzagTraverse(test).SequenceEqual(expected));\n\t}\n\n\t[Test]\n\tpublic void TestCase2() {\n\t\tList<List<int> > test = new List<List<int> >();\n\t\ttest.Add(new List<int>(){\n\t\t\t1, 2, 3, 4, 5\n\t\t});\n\t\tList<int> expected = new List<int>(){\n\t\t\t1, 2, 3, 4, 5\n\t\t};\n\t\tUtils.AssertTrue(Program.ZigzagTraverse(test).SequenceEqual(expected));\n\t}\n\n\t[Test]\n\tpublic void TestCase3() {\n\t\tList<List<int> > test = new List<List<int> >();\n\t\ttest.Add(new List<int>(){\n\t\t\t1\n\t\t});\n\t\ttest.Add(new List<int>(){\n\t\t\t2\n\t\t});\n\t\ttest.Add(new List<int>(){\n\t\t\t3\n\t\t});\n\t\ttest.Add(new List<int>(){\n\t\t\t4\n\t\t});\n\t\ttest.Add(new List<int>(){\n\t\t\t5\n\t\t});\n\t\tList<int> expected = new List<int>(){\n\t\t\t1, 2, 3, 4, 5\n\t\t};\n\t\tUtils.AssertTrue(Program.ZigzagTraverse(test).SequenceEqual(expected));\n\t}\n\n\t[Test]\n\tpublic void TestCase4() {\n\t\tList<List<int> > test = new List<List<int> >();\n\t\ttest.Add(new List<int>(){\n\t\t\t1, 3\n\t\t});\n\t\ttest.Add(new List<int>(){\n\t\t\t2, 4\n\t\t});\n\t\ttest.Add(new List<int>(){\n\t\t\t5, 7\n\t\t});\n\t\ttest.Add(new List<int>(){\n\t\t\t6, 8\n\t\t});\n\t\ttest.Add(new List<int>(){\n\t\t\t9, 10\n\t\t});\n\t\tList<int> expected = new List<int>(){\n\t\t\t1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n\t\t};\n\t\tUtils.AssertTrue(Program.ZigzagTraverse(test).SequenceEqual(expected));\n\t}\n\n\t[Test]\n\tpublic void TestCase5() {\n\t\tList<List<int> > test = new List<List<int> >();\n\t\ttest.Add(new List<int>(){\n\t\t\t1, 3, 4, 7, 8\n\t\t});\n\t\ttest.Add(new List<int>(){\n\t\t\t2, 5, 6, 9, 10\n\t\t});\n\t\tList<int> expected = new List<int>(){\n\t\t\t1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n\t\t};\n\t\tUtils.AssertTrue(Program.ZigzagTraverse(test).SequenceEqual(expected));\n\t}\n\n\t[Test]\n\tpublic void TestCase6() {\n\t\tList<List<int> > test = new List<List<int> >();\n\t\ttest.Add(new List<int>(){\n\t\t\t1, 3, 4, 10\n\t\t});\n\t\ttest.Add(new List<int>(){\n\t\t\t2, 5, 9, 11\n\t\t});\n\t\ttest.Add(new List<int>(){\n\t\t\t6, 8, 12, 15\n\t\t});\n\t\ttest.Add(new List<int>(){\n\t\t\t7, 13, 14, 16\n\t\t});\n\t\tList<int> expected = new List<int>(){\n\t\t\t1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16\n\t\t};\n\t\tUtils.AssertTrue(Program.ZigzagTraverse(test).SequenceEqual(expected));\n\t}\n\n\t[Test]\n\tpublic void TestCase7() {\n\t\tList<List<int> > test = new List<List<int> >();\n\t\ttest.Add(new List<int>(){\n\t\t\t1, 3, 4, 10, 11\n\t\t});\n\t\ttest.Add(new List<int>(){\n\t\t\t2, 5, 9, 12, 19\n\t\t});\n\t\ttest.Add(new List<int>(){\n\t\t\t6, 8, 13, 18, 20\n\t\t});\n\t\ttest.Add(new List<int>(){\n\t\t\t7, 14, 17, 21, 24\n\t\t});\n\t\ttest.Add(new List<int>(){\n\t\t\t15, 16, 22, 23, 25\n\t\t});\n\t\tList<int> expected = new List<int>(){\n\t\t\t1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,\n\t\t\t22, 23, 24, 25\n\t\t};\n\t\tUtils.AssertTrue(Program.ZigzagTraverse(test).SequenceEqual(expected));\n\t}\n\n\t[Test]\n\tpublic void TestCase8() {\n\t\tList<List<int> > test = new List<List<int> >();\n\t\ttest.Add(new List<int>(){\n\t\t\t1, 3, 4, 10, 11, 20\n\t\t});\n\t\ttest.Add(new List<int>(){\n\t\t\t2, 5, 9, 12, 19, 21\n\t\t});\n\t\ttest.Add(new List<int>(){\n\t\t\t6, 8, 13, 18, 22, 27\n\t\t});\n\t\ttest.Add(new List<int>(){\n\t\t\t7, 14, 17, 23, 26, 28\n\t\t});\n\t\ttest.Add(new List<int>(){\n\t\t\t15, 16, 24, 25, 29, 30\n\t\t});\n\t\tList<int> expected = new List<int>(){\n\t\t\t1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,\n\t\t\t22, 23, 24, 25, 26, 27, 28, 29, 30\n\t\t};\n\t\tUtils.AssertTrue(Program.ZigzagTraverse(test).SequenceEqual(expected));\n\t}\n\n\t[Test]\n\tpublic void TestCase9() {\n\t\tList<List<int> > test = new List<List<int> >();\n\t\ttest.Add(new List<int>(){\n\t\t\t1, 3, 4, 10, 11\n\t\t});\n\t\ttest.Add(new List<int>(){\n\t\t\t2, 5, 9, 12, 20\n\t\t});\n\t\ttest.Add(new List<int>(){\n\t\t\t6, 8, 13, 19, 21\n\t\t});\n\t\ttest.Add(new List<int>(){\n\t\t\t7, 14, 18, 22, 27\n\t\t});\n\t\ttest.Add(new List<int>(){\n\t\t\t15, 17, 23, 26, 28\n\t\t});\n\t\ttest.Add(new List<int>(){\n\t\t\t16, 24, 25, 29, 30\n\t\t});\n\t\tList<int> expected = new List<int>(){\n\t\t\t1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,\n\t\t\t22, 23, 24, 25, 26, 27, 28, 29, 30\n\t\t};\n\t\tUtils.AssertTrue(Program.ZigzagTraverse(test).SequenceEqual(expected));\n\t}\n}\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nusing System.Linq;\nusing System.Collections.Generic;\n\npublic class ProgramTest {\n\t[Test]\n\tpublic void TestCase1() {\n\t\tList<List<int> > test = new List<List<int> >();\n\t\ttest.Add(new List<int>(){\n\t\t\t1, 3, 4, 10\n\t\t});\n\t\ttest.Add(new List<int>(){\n\t\t\t2, 5, 9, 11\n\t\t});\n\t\ttest.Add(new List<int>(){\n\t\t\t6, 8, 12, 15\n\t\t});\n\t\ttest.Add(new List<int>(){\n\t\t\t7, 13, 14, 16\n\t\t});\n\t\tList<int> expected = new List<int>(){\n\t\t\t1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16\n\t\t};\n\t\tUtils.AssertTrue(Program.ZigzagTraverse(test).SequenceEqual(expected));\n\t}\n}\n",
      "Solutions": [
        "// Copyright Â© 2020 Code Complete. All rights reserved.\n\nusing System.Collections.Generic;\n\n// O(n) time | O(n) space - where n is the total number of elements in the two-dimensional array\npublic class Program {\n\tpublic static List<int> ZigzagTraverse(List<List<int> > array) {\n\t\tint height = array.Count - 1;\n\t\tint width = array[0].Count - 1;\n\t\tList<int> result = new List<int>();\n\t\tint row = 0;\n\t\tint col = 0;\n\t\tbool goingDown = true;\n\t\twhile (!isOutOfBounds(row, col, height, width)) {\n\t\t\tresult.Add(array[row][col]);\n\t\t\tif (goingDown) {\n\t\t\t\tif (col == 0 || row == height) {\n\t\t\t\t\tgoingDown = false;\n\t\t\t\t\tif (row == height) {\n\t\t\t\t\t\tcol++;\n\t\t\t\t\t} else {\n\t\t\t\t\t\trow++;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\trow++;\n\t\t\t\t\tcol--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (row == 0 || col == width) {\n\t\t\t\t\tgoingDown = true;\n\t\t\t\t\tif (col == width) {\n\t\t\t\t\t\trow++;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcol++;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\trow--;\n\t\t\t\t\tcol++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic static bool isOutOfBounds(int row, int col, int height, int width) {\n\t\treturn row < 0 || row > height || col < 0 || col > width;\n\t}\n}\n"
      ]
    },
    "go": {
      "Language": "go",
      "StartingCode": "package main\n\nfunc ZigzagTraverse(array [][]int) []int {\n\t// Write your code here.\n\treturn nil\n}\n",
      "StartingTest": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tinput := [][]int{\n\t\t{1},\n\t}\n\texpected := []int{1}\n\toutput := ZigzagTraverse(input)\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase2(t *TestCase) {\n\tinput := [][]int{\n\t\t{1, 2, 3, 4, 5},\n\t}\n\texpected := []int{1, 2, 3, 4, 5}\n\toutput := ZigzagTraverse(input)\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase3(t *TestCase) {\n\tinput := [][]int{\n\t\t{1}, {2}, {3}, {4}, {5},\n\t}\n\texpected := []int{1, 2, 3, 4, 5}\n\toutput := ZigzagTraverse(input)\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase4(t *TestCase) {\n\tinput := [][]int{\n\t\t{1, 3}, {2, 4}, {5, 7}, {6, 8}, {9, 10},\n\t}\n\texpected := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n\toutput := ZigzagTraverse(input)\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase5(t *TestCase) {\n\tinput := [][]int{\n\t\t{1, 3, 4, 7, 8}, {2, 5, 6, 9, 10},\n\t}\n\texpected := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n\toutput := ZigzagTraverse(input)\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase6(t *TestCase) {\n\tinput := [][]int{\n\t\t{1, 3, 4, 10}, {2, 5, 9, 11}, {6, 8, 12, 15}, {7, 13, 14, 16},\n\t}\n\texpected := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}\n\toutput := ZigzagTraverse(input)\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase7(t *TestCase) {\n\tinput := [][]int{\n\t\t{1, 3, 4, 10, 11},\n\t\t{2, 5, 9, 12, 19},\n\t\t{6, 8, 13, 18, 20},\n\t\t{7, 14, 17, 21, 24},\n\t\t{15, 16, 22, 23, 25},\n\t}\n\texpected := []int{\n\t\t1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\n\t\t15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\n\t}\n\toutput := ZigzagTraverse(input)\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase8(t *TestCase) {\n\tinput := [][]int{\n\t\t{1, 3, 4, 10, 11, 20},\n\t\t{2, 5, 9, 12, 19, 21},\n\t\t{6, 8, 13, 18, 22, 27},\n\t\t{7, 14, 17, 23, 26, 28},\n\t\t{15, 16, 24, 25, 29, 30},\n\t}\n\texpected := []int{\n\t\t1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\n\t\t15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,\n\t\t28, 29, 30,\n\t}\n\toutput := ZigzagTraverse(input)\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase9(t *TestCase) {\n\tinput := [][]int{\n\t\t{1, 3, 4, 10, 11},\n\t\t{2, 5, 9, 12, 20},\n\t\t{6, 8, 13, 19, 21},\n\t\t{7, 14, 18, 22, 27},\n\t\t{15, 17, 23, 26, 28},\n\t\t{16, 24, 25, 29, 30},\n\t}\n\texpected := []int{\n\t\t1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\n\t\t18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,\n\t}\n\toutput := ZigzagTraverse(input)\n\trequire.Equal(t, expected, output)\n}\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tinput := [][]int{\n\t\t{1, 3, 4, 10},\n\t\t{2, 5, 9, 11},\n\t\t{6, 8, 12, 15},\n\t\t{7, 13, 14, 16},\n\t}\n\texpected := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}\n\toutput := ZigzagTraverse(input)\n\trequire.Equal(t, expected, output)\n}\n",
      "Solutions": [
        "// Copyright Â© 2020 Code Complete. All rights reserved.\n\npackage main\n\n// O(n) time | O(n) space - where n is the total number of elements in the two-dimensional array\nfunc ZigzagTraverse(array [][]int) []int {\n\tif len(array) == 0 {\n\t\treturn []int{}\n\t}\n\n\theight := len(array) - 1\n\twidth := len(array[0]) - 1\n\tresult := []int{}\n\trow := 0\n\tcol := 0\n\tgoingDown := true\n\tfor !isOutOfBounds(row, col, height, width) {\n\t\tresult = append(result, array[row][col])\n\t\tif goingDown {\n\t\t\tif col == 0 || row == height {\n\t\t\t\tgoingDown = false\n\t\t\t\tif row == height {\n\t\t\t\t\tcol++\n\t\t\t\t} else {\n\t\t\t\t\trow++\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\trow++\n\t\t\t\tcol--\n\t\t\t}\n\t\t} else {\n\t\t\tif row == 0 || col == width {\n\t\t\t\tgoingDown = true\n\t\t\t\tif col == width {\n\t\t\t\t\trow++\n\t\t\t\t} else {\n\t\t\t\t\tcol++\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\trow--\n\t\t\t\tcol++\n\t\t\t}\n\t\t}\n\t}\n\treturn result\n}\n\nfunc isOutOfBounds(row, col, height, width int) bool {\n\treturn row < 0 || row > height || col < 0 || col > width\n}\n"
      ]
    },
    "java": {
      "Language": "java",
      "StartingCode": "import java.util.*;\n\nclass Program {\n  public static List<Integer> zigzagTraverse(List<List<Integer>> array) {\n    // Write your code here.\n    return null;\n  }\n}\n",
      "StartingTest": "import java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    List<List<Integer>> test = new ArrayList<List<Integer>>();\n    test.add(new ArrayList<Integer>(Arrays.asList(1)));\n    List<Integer> expected = new ArrayList<Integer>(Arrays.asList(1));\n    Utils.assertTrue(Program.zigzagTraverse(test).equals(expected));\n  }\n\n  @Test\n  public void TestCase2() {\n    List<List<Integer>> test = new ArrayList<List<Integer>>();\n    test.add(new ArrayList<Integer>(Arrays.asList(1, 2, 3, 4, 5)));\n    List<Integer> expected = new ArrayList<Integer>(Arrays.asList(1, 2, 3, 4, 5));\n    Utils.assertTrue(Program.zigzagTraverse(test).equals(expected));\n  }\n\n  @Test\n  public void TestCase3() {\n    List<List<Integer>> test = new ArrayList<List<Integer>>();\n    test.add(new ArrayList<Integer>(Arrays.asList(1)));\n    test.add(new ArrayList<Integer>(Arrays.asList(2)));\n    test.add(new ArrayList<Integer>(Arrays.asList(3)));\n    test.add(new ArrayList<Integer>(Arrays.asList(4)));\n    test.add(new ArrayList<Integer>(Arrays.asList(5)));\n    List<Integer> expected = new ArrayList<Integer>(Arrays.asList(1, 2, 3, 4, 5));\n    Utils.assertTrue(Program.zigzagTraverse(test).equals(expected));\n  }\n\n  @Test\n  public void TestCase4() {\n    List<List<Integer>> test = new ArrayList<List<Integer>>();\n    test.add(new ArrayList<Integer>(Arrays.asList(1, 3)));\n    test.add(new ArrayList<Integer>(Arrays.asList(2, 4)));\n    test.add(new ArrayList<Integer>(Arrays.asList(5, 7)));\n    test.add(new ArrayList<Integer>(Arrays.asList(6, 8)));\n    test.add(new ArrayList<Integer>(Arrays.asList(9, 10)));\n    List<Integer> expected = new ArrayList<Integer>(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10));\n    Utils.assertTrue(Program.zigzagTraverse(test).equals(expected));\n  }\n\n  @Test\n  public void TestCase5() {\n    List<List<Integer>> test = new ArrayList<List<Integer>>();\n    test.add(new ArrayList<Integer>(Arrays.asList(1, 3, 4, 7, 8)));\n    test.add(new ArrayList<Integer>(Arrays.asList(2, 5, 6, 9, 10)));\n    List<Integer> expected = new ArrayList<Integer>(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10));\n    Utils.assertTrue(Program.zigzagTraverse(test).equals(expected));\n  }\n\n  @Test\n  public void TestCase6() {\n    List<List<Integer>> test = new ArrayList<List<Integer>>();\n    test.add(new ArrayList<Integer>(Arrays.asList(1, 3, 4, 10)));\n    test.add(new ArrayList<Integer>(Arrays.asList(2, 5, 9, 11)));\n    test.add(new ArrayList<Integer>(Arrays.asList(6, 8, 12, 15)));\n    test.add(new ArrayList<Integer>(Arrays.asList(7, 13, 14, 16)));\n    List<Integer> expected =\n        new ArrayList<Integer>(\n            Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16));\n    Utils.assertTrue(Program.zigzagTraverse(test).equals(expected));\n  }\n\n  @Test\n  public void TestCase7() {\n    List<List<Integer>> test = new ArrayList<List<Integer>>();\n    test.add(new ArrayList<Integer>(Arrays.asList(1, 3, 4, 10, 11)));\n    test.add(new ArrayList<Integer>(Arrays.asList(2, 5, 9, 12, 19)));\n    test.add(new ArrayList<Integer>(Arrays.asList(6, 8, 13, 18, 20)));\n    test.add(new ArrayList<Integer>(Arrays.asList(7, 14, 17, 21, 24)));\n    test.add(new ArrayList<Integer>(Arrays.asList(15, 16, 22, 23, 25)));\n    List<Integer> expected =\n        new ArrayList<Integer>(\n            Arrays.asList(\n                1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\n                24, 25));\n    Utils.assertTrue(Program.zigzagTraverse(test).equals(expected));\n  }\n\n  @Test\n  public void TestCase8() {\n    List<List<Integer>> test = new ArrayList<List<Integer>>();\n    test.add(new ArrayList<Integer>(Arrays.asList(1, 3, 4, 10, 11, 20)));\n    test.add(new ArrayList<Integer>(Arrays.asList(2, 5, 9, 12, 19, 21)));\n    test.add(new ArrayList<Integer>(Arrays.asList(6, 8, 13, 18, 22, 27)));\n    test.add(new ArrayList<Integer>(Arrays.asList(7, 14, 17, 23, 26, 28)));\n    test.add(new ArrayList<Integer>(Arrays.asList(15, 16, 24, 25, 29, 30)));\n    List<Integer> expected =\n        new ArrayList<Integer>(\n            Arrays.asList(\n                1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\n                24, 25, 26, 27, 28, 29, 30));\n    Utils.assertTrue(Program.zigzagTraverse(test).equals(expected));\n  }\n\n  @Test\n  public void TestCase9() {\n    List<List<Integer>> test = new ArrayList<List<Integer>>();\n    test.add(new ArrayList<Integer>(Arrays.asList(1, 3, 4, 10, 11)));\n    test.add(new ArrayList<Integer>(Arrays.asList(2, 5, 9, 12, 20)));\n    test.add(new ArrayList<Integer>(Arrays.asList(6, 8, 13, 19, 21)));\n    test.add(new ArrayList<Integer>(Arrays.asList(7, 14, 18, 22, 27)));\n    test.add(new ArrayList<Integer>(Arrays.asList(15, 17, 23, 26, 28)));\n    test.add(new ArrayList<Integer>(Arrays.asList(16, 24, 25, 29, 30)));\n    List<Integer> expected =\n        new ArrayList<Integer>(\n            Arrays.asList(\n                1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\n                24, 25, 26, 27, 28, 29, 30));\n    Utils.assertTrue(Program.zigzagTraverse(test).equals(expected));\n  }\n}\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    List<List<Integer>> test = new ArrayList<List<Integer>>();\n    test.add(new ArrayList<Integer>(Arrays.asList(1, 3, 4, 10)));\n    test.add(new ArrayList<Integer>(Arrays.asList(2, 5, 9, 11)));\n    test.add(new ArrayList<Integer>(Arrays.asList(6, 8, 12, 15)));\n    test.add(new ArrayList<Integer>(Arrays.asList(7, 13, 14, 16)));\n    List<Integer> expected =\n        new ArrayList<Integer>(\n            Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16));\n    Utils.assertTrue(Program.zigzagTraverse(test).equals(expected));\n  }\n}\n",
      "Solutions": [
        "// Copyright Â© 2020 Code Complete. All rights reserved.\n\nimport java.util.*;\n\n// O(n) time | O(n) space - where n is the total number of elements in the two-dimensional array\nclass Program {\n  public static List<Integer> zigzagTraverse(List<List<Integer>> array) {\n    int height = array.size() - 1;\n    int width = array.get(0).size() - 1;\n    List<Integer> result = new ArrayList<Integer>();\n    int row = 0;\n    int col = 0;\n    boolean goingDown = true;\n    while (!isOutOfBounds(row, col, height, width)) {\n      result.add(array.get(row).get(col));\n      if (goingDown) {\n        if (col == 0 || row == height) {\n          goingDown = false;\n          if (row == height) {\n            col++;\n          } else {\n            row++;\n          }\n        } else {\n          row++;\n          col--;\n        }\n      } else {\n        if (row == 0 || col == width) {\n          goingDown = true;\n          if (col == width) {\n            row++;\n          } else {\n            col++;\n          }\n        } else {\n          row--;\n          col++;\n        }\n      }\n    }\n    return result;\n  }\n\n  public static boolean isOutOfBounds(int row, int col, int height, int width) {\n    return row < 0 || row > height || col < 0 || col > width;\n  }\n}\n"
      ]
    },
    "javascript": {
      "Language": "javascript",
      "StartingCode": "function zigzagTraverse(array) {\n  // Write your code here.\n}\n\n// Do not edit the line below.\nexports.zigzagTraverse = zigzagTraverse;\n",
      "StartingTest": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const test = [[1]];\n  chai.expect(program.zigzagTraverse(test)).to.deep.equal([1]);\n});\n\nit('Test Case #2', function () {\n  const test = [[1, 2, 3, 4, 5]];\n  chai.expect(program.zigzagTraverse(test)).to.deep.equal([1, 2, 3, 4, 5]);\n});\n\nit('Test Case #3', function () {\n  const test = [[1], [2], [3], [4], [5]];\n  chai.expect(program.zigzagTraverse(test)).to.deep.equal([1, 2, 3, 4, 5]);\n});\n\nit('Test Case #4', function () {\n  const test = [\n    [1, 3],\n    [2, 4],\n    [5, 7],\n    [6, 8],\n    [9, 10],\n  ];\n  chai.expect(program.zigzagTraverse(test)).to.deep.equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n});\n\nit('Test Case #5', function () {\n  const test = [\n    [1, 3, 4, 7, 8],\n    [2, 5, 6, 9, 10],\n  ];\n  chai.expect(program.zigzagTraverse(test)).to.deep.equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n});\n\nit('Test Case #6', function () {\n  const test = [\n    [1, 3, 4, 10],\n    [2, 5, 9, 11],\n    [6, 8, 12, 15],\n    [7, 13, 14, 16],\n  ];\n  chai.expect(program.zigzagTraverse(test)).to.deep.equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]);\n});\n\nit('Test Case #7', function () {\n  const test = [\n    [1, 3, 4, 10, 11],\n    [2, 5, 9, 12, 19],\n    [6, 8, 13, 18, 20],\n    [7, 14, 17, 21, 24],\n    [15, 16, 22, 23, 25],\n  ];\n  chai\n    .expect(program.zigzagTraverse(test))\n    .to.deep.equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]);\n});\n\nit('Test Case #8', function () {\n  const test = [\n    [1, 3, 4, 10, 11, 20],\n    [2, 5, 9, 12, 19, 21],\n    [6, 8, 13, 18, 22, 27],\n    [7, 14, 17, 23, 26, 28],\n    [15, 16, 24, 25, 29, 30],\n  ];\n  chai\n    .expect(program.zigzagTraverse(test))\n    .to.deep.equal([\n      1,\n      2,\n      3,\n      4,\n      5,\n      6,\n      7,\n      8,\n      9,\n      10,\n      11,\n      12,\n      13,\n      14,\n      15,\n      16,\n      17,\n      18,\n      19,\n      20,\n      21,\n      22,\n      23,\n      24,\n      25,\n      26,\n      27,\n      28,\n      29,\n      30,\n    ]);\n});\n\nit('Test Case #9', function () {\n  const test = [\n    [1, 3, 4, 10, 11],\n    [2, 5, 9, 12, 20],\n    [6, 8, 13, 19, 21],\n    [7, 14, 18, 22, 27],\n    [15, 17, 23, 26, 28],\n    [16, 24, 25, 29, 30],\n  ];\n  chai\n    .expect(program.zigzagTraverse(test))\n    .to.deep.equal([\n      1,\n      2,\n      3,\n      4,\n      5,\n      6,\n      7,\n      8,\n      9,\n      10,\n      11,\n      12,\n      13,\n      14,\n      15,\n      16,\n      17,\n      18,\n      19,\n      20,\n      21,\n      22,\n      23,\n      24,\n      25,\n      26,\n      27,\n      28,\n      29,\n      30,\n    ]);\n});\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const test = [\n    [1, 3, 4, 10],\n    [2, 5, 9, 11],\n    [6, 8, 12, 15],\n    [7, 13, 14, 16],\n  ];\n  chai.expect(program.zigzagTraverse(test)).to.deep.equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]);\n});\n",
      "Solutions": [
        "// Copyright Â© 2020 Code Complete. All rights reserved.\n\n// O(n) time | O(n) space - where n is the total number of elements in the two-dimensional array\nfunction zigzagTraverse(array) {\n  const height = array.length - 1;\n  const width = array[0].length - 1;\n  const result = [];\n  let row = 0;\n  let col = 0;\n  let goingDown = true;\n  while (!isOutOfBounds(row, col, height, width)) {\n    result.push(array[row][col]);\n    if (goingDown) {\n      if (col === 0 || row === height) {\n        goingDown = false;\n        if (row === height) {\n          col++;\n        } else {\n          row++;\n        }\n      } else {\n        row++;\n        col--;\n      }\n    } else {\n      if (row === 0 || col === width) {\n        goingDown = true;\n        if (col === width) {\n          row++;\n        } else {\n          col++;\n        }\n      } else {\n        row--;\n        col++;\n      }\n    }\n  }\n  return result;\n}\n\nfunction isOutOfBounds(row, col, height, width) {\n  return row < 0 || row > height || col < 0 || col > width;\n}\n\nexports.zigzagTraverse = zigzagTraverse;\n"
      ]
    },
    "python": {
      "Language": "python",
      "StartingCode": "def zigzagTraverse(array):\n    # Write your code here.\n    pass\n",
      "StartingTest": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        test = [[1]]\n        self.assertEqual(program.zigzagTraverse(test), [1])\n\n    def test_case_2(self):\n        test = [[1, 2, 3, 4, 5]]\n        self.assertEqual(program.zigzagTraverse(test), [1, 2, 3, 4, 5])\n\n    def test_case_3(self):\n        test = [[1], [2], [3], [4], [5]]\n        self.assertEqual(program.zigzagTraverse(test), [1, 2, 3, 4, 5])\n\n    def test_case_4(self):\n        test = [[1, 3], [2, 4], [5, 7], [6, 8], [9, 10]]\n        self.assertEqual(program.zigzagTraverse(test), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\n    def test_case_5(self):\n        test = [[1, 3, 4, 7, 8], [2, 5, 6, 9, 10]]\n        self.assertEqual(program.zigzagTraverse(test), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\n    def test_case_6(self):\n        test = [[1, 3, 4, 10], [2, 5, 9, 11], [6, 8, 12, 15], [7, 13, 14, 16]]\n        self.assertEqual(program.zigzagTraverse(test), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n\n    def test_case_7(self):\n        test = [[1, 3, 4, 10, 11], [2, 5, 9, 12, 19], [6, 8, 13, 18, 20], [7, 14, 17, 21, 24], [15, 16, 22, 23, 25]]\n        self.assertEqual(\n            program.zigzagTraverse(test),\n            [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],\n        )\n\n    def test_case_8(self):\n        test = [\n            [1, 3, 4, 10, 11, 20],\n            [2, 5, 9, 12, 19, 21],\n            [6, 8, 13, 18, 22, 27],\n            [7, 14, 17, 23, 26, 28],\n            [15, 16, 24, 25, 29, 30],\n        ]\n        self.assertEqual(\n            program.zigzagTraverse(test),\n            [\n                1,\n                2,\n                3,\n                4,\n                5,\n                6,\n                7,\n                8,\n                9,\n                10,\n                11,\n                12,\n                13,\n                14,\n                15,\n                16,\n                17,\n                18,\n                19,\n                20,\n                21,\n                22,\n                23,\n                24,\n                25,\n                26,\n                27,\n                28,\n                29,\n                30,\n            ],\n        )\n\n    def test_case_9(self):\n        test = [\n            [1, 3, 4, 10, 11],\n            [2, 5, 9, 12, 20],\n            [6, 8, 13, 19, 21],\n            [7, 14, 18, 22, 27],\n            [15, 17, 23, 26, 28],\n            [16, 24, 25, 29, 30],\n        ]\n        self.assertEqual(\n            program.zigzagTraverse(test),\n            [\n                1,\n                2,\n                3,\n                4,\n                5,\n                6,\n                7,\n                8,\n                9,\n                10,\n                11,\n                12,\n                13,\n                14,\n                15,\n                16,\n                17,\n                18,\n                19,\n                20,\n                21,\n                22,\n                23,\n                24,\n                25,\n                26,\n                27,\n                28,\n                29,\n                30,\n            ],\n        )\n",
      "SandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        test = [[1, 3, 4, 10], [2, 5, 9, 11], [6, 8, 12, 15], [7, 13, 14, 16]]\n        self.assertEqual(program.zigzagTraverse(test), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n",
      "Solutions": [
        "# Copyright Â© 2020 Code Complete. All rights reserved.\n\n# O(n) time | O(n) space - where n is the total number of elements in the two-dimensional array\ndef zigzagTraverse(array):\n    height = len(array) - 1\n    width = len(array[0]) - 1\n    result = []\n    row, col = 0, 0\n    goingDown = True\n    while not isOutOfBounds(row, col, height, width):\n        result.append(array[row][col])\n        if goingDown:\n            if col == 0 or row == height:\n                goingDown = False\n                if row == height:\n                    col += 1\n                else:\n                    row += 1\n            else:\n                row += 1\n                col -= 1\n        else:\n            if row == 0 or col == width:\n                goingDown = True\n                if col == width:\n                    row += 1\n                else:\n                    col += 1\n            else:\n                row -= 1\n                col += 1\n    return result\n\n\ndef isOutOfBounds(row, col, height, width):\n    return row < 0 or row > height or col < 0 or col > width\n"
      ]
    },
    "swift": {
      "Language": "swift",
      "StartingCode": "class Program {\n  func zigZagTraverse(array: [[Int]]) -> [Int] {\n    // Write your code here.\n    return []\n  }\n}\n",
      "StartingTest": "class ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      let test = [[1]]\n      try assertEqual([1], program.zigZagTraverse(array: test))\n    }\n    runTest(\"Test Case 2\") { () throws -> Void in\n      let test = [[1, 2, 3, 4, 5]]\n      try assertEqual([1, 2, 3, 4, 5], program.zigZagTraverse(array: test))\n    }\n    runTest(\"Test Case 3\") { () throws -> Void in\n      let test = [[1], [2], [3], [4], [5]]\n      try assertEqual([1, 2, 3, 4, 5], program.zigZagTraverse(array: test))\n    }\n    runTest(\"Test Case 4\") { () throws -> Void in\n      let test = [\n        [1, 3],\n        [2, 4],\n        [5, 7],\n        [6, 8],\n        [9, 10],\n      ]\n      try assertEqual([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], program.zigZagTraverse(array: test))\n    }\n    runTest(\"Test Case 5\") { () throws -> Void in\n      let test = [\n        [1, 3, 4, 7, 8],\n        [2, 5, 6, 9, 10],\n      ]\n      try assertEqual([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], program.zigZagTraverse(array: test))\n    }\n    runTest(\"Test Case 6\") { () throws -> Void in\n      let test = [\n        [1, 3, 4, 10],\n        [2, 5, 9, 11],\n        [6, 8, 12, 15],\n        [7, 13, 14, 16],\n      ]\n      try assertEqual([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], program.zigZagTraverse(array: test))\n    }\n    runTest(\"Test Case 7\") { () throws -> Void in\n      let test = [\n        [1, 3, 4, 10, 11],\n        [2, 5, 9, 12, 19],\n        [6, 8, 13, 18, 20],\n        [7, 14, 17, 21, 24],\n        [15, 16, 22, 23, 25],\n      ]\n      try assertEqual([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], program.zigZagTraverse(array: test))\n    }\n    runTest(\"Test Case 8\") { () throws -> Void in\n      let test = [\n        [1, 3, 4, 10, 11, 20],\n        [2, 5, 9, 12, 19, 21],\n        [6, 8, 13, 18, 22, 27],\n        [7, 14, 17, 23, 26, 28],\n        [15, 16, 24, 25, 29, 30],\n      ]\n      try assertEqual([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], program.zigZagTraverse(array: test))\n    }\n    runTest(\"Test Case 9\") { () throws -> Void in\n      let test = [\n        [1, 3, 4, 10, 11],\n        [2, 5, 9, 12, 20],\n        [6, 8, 13, 19, 21],\n        [7, 14, 18, 22, 27],\n        [15, 17, 23, 26, 28],\n        [16, 24, 25, 29, 30],\n      ]\n      try assertEqual([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], program.zigZagTraverse(array: test))\n    }\n  }\n}\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      let test = [\n        [1, 3, 4, 10],\n        [2, 5, 9, 11],\n        [6, 8, 12, 15],\n        [7, 13, 14, 16],\n      ]\n      try assertEqual([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], program.zigZagTraverse(array: test))\n    }\n  }\n}\n",
      "Solutions": [
        "// Copyright Â© 2020 Code Complete. All rights reserved.\n\nclass Program {\n  // O(n) time | O(n) space\n  func zigZagTraverse(array: [[Int]]) -> [Int] {\n    var result = [Int]()\n\n    var goingDown = true\n    var currentRow = 0\n    var currentColumn = 0\n\n    while currentRow < array.count, currentColumn < array[0].count {\n      result.append(array[currentRow][currentColumn])\n\n      if goingDown {\n        if currentColumn == 0 || currentRow == array.count - 1 {\n          goingDown = false\n          if currentRow == array.count - 1 {\n            currentColumn += 1\n          } else {\n            currentRow += 1\n          }\n        } else {\n          currentRow += 1\n          currentColumn -= 1\n        }\n      } else {\n        if currentRow == 0 || currentColumn == array[0].count - 1 {\n          goingDown = true\n          if currentColumn == array[0].count - 1 {\n            currentRow += 1\n          } else {\n            currentColumn += 1\n          }\n        } else {\n          currentRow -= 1\n          currentColumn += 1\n        }\n      }\n    }\n\n    return result\n  }\n}\n"
      ]
    },
    "typescript": {
      "Language": "typescript",
      "StartingCode": "export function zigzagTraverse(array: number[][]) {\n  // Write your code here.\n  return [-1];\n}\n",
      "StartingTest": "",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const test = [\n    [1, 3, 4, 10],\n    [2, 5, 9, 11],\n    [6, 8, 12, 15],\n    [7, 13, 14, 16],\n  ];\n  chai.expect(program.zigzagTraverse(test)).to.deep.equal([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]);\n});\n",
      "Solutions": [
        "// Copyright Â© 2020 Code Complete. All rights reserved.\n\n// O(n) time | O(n) space - where n is the total number of elements in the two-dimensional array\nexport function zigzagTraverse(array: number[][]) {\n  const height = array.length - 1;\n  const width = array[0].length - 1;\n  const result = [];\n  let row = 0;\n  let col = 0;\n  let goingDown = true;\n  while (!isOutOfBounds(row, col, height, width)) {\n    result.push(array[row][col]);\n    if (goingDown) {\n      if (col === 0 || row === height) {\n        goingDown = false;\n        if (row === height) {\n          col++;\n        } else {\n          row++;\n        }\n      } else {\n        row++;\n        col--;\n      }\n    } else {\n      if (row === 0 || col === width) {\n        goingDown = true;\n        if (col === width) {\n          row++;\n        } else {\n          col++;\n        }\n      } else {\n        row--;\n        col++;\n      }\n    }\n  }\n  return result;\n}\n\nfunction isOutOfBounds(row: number, col: number, height: number, width: number) {\n  return row < 0 || row > height || col < 0 || col > width;\n}\n"
      ]
    }
  },
  "JSONTestLanguages": [
    "javascript",
    "cpp",
    "python",
    "java",
    "csharp",
    "go",
    "swift",
    "typescript"
  ],
  "JSONTests": [
    {
      "array": [
        [
          1,
          3,
          4,
          10
        ],
        [
          2,
          5,
          9,
          11
        ],
        [
          6,
          8,
          12,
          15
        ],
        [
          7,
          13,
          14,
          16
        ]
      ]
    },
    {
      "array": [
        [
          1
        ]
      ]
    },
    {
      "array": [
        [
          1,
          2,
          3,
          4,
          5
        ]
      ]
    },
    {
      "array": [
        [
          1
        ],
        [
          2
        ],
        [
          3
        ],
        [
          4
        ],
        [
          5
        ]
      ]
    },
    {
      "array": [
        [
          1,
          3
        ],
        [
          2,
          4
        ],
        [
          5,
          7
        ],
        [
          6,
          8
        ],
        [
          9,
          10
        ]
      ]
    },
    {
      "array": [
        [
          1,
          3,
          4,
          7,
          8
        ],
        [
          2,
          5,
          6,
          9,
          10
        ]
      ]
    },
    {
      "array": [
        [
          1,
          3,
          4,
          10,
          11
        ],
        [
          2,
          5,
          9,
          12,
          19
        ],
        [
          6,
          8,
          13,
          18,
          20
        ],
        [
          7,
          14,
          17,
          21,
          24
        ],
        [
          15,
          16,
          22,
          23,
          25
        ]
      ]
    },
    {
      "array": [
        [
          1,
          3,
          4,
          10,
          11,
          20
        ],
        [
          2,
          5,
          9,
          12,
          19,
          21
        ],
        [
          6,
          8,
          13,
          18,
          22,
          27
        ],
        [
          7,
          14,
          17,
          23,
          26,
          28
        ],
        [
          15,
          16,
          24,
          25,
          29,
          30
        ]
      ]
    },
    {
      "array": [
        [
          1,
          3,
          4,
          10,
          11
        ],
        [
          2,
          5,
          9,
          12,
          20
        ],
        [
          6,
          8,
          13,
          19,
          21
        ],
        [
          7,
          14,
          18,
          22,
          27
        ],
        [
          15,
          17,
          23,
          26,
          28
        ],
        [
          16,
          24,
          25,
          29,
          30
        ]
      ]
    }
  ],
  "JSONAnswers": [
    [
      [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16
      ],
      [
        1
      ],
      [
        1,
        2,
        3,
        4,
        5
      ],
      [
        1,
        2,
        3,
        4,
        5
      ],
      [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10
      ],
      [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10
      ],
      [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25
      ],
      [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30
      ],
      [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30
      ]
    ]
  ]
}