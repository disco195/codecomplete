{
  "Summary": {
    "Name": "Monotonic Array",
    "Category": "Arrays",
    "Difficulty": 2,
    "Available": true,
    "Metadata": {
      "date": "2020-03-29T00:00:00Z",
      "number": 467,
      "timeOne": 0,
      "timeTwo": 1303,
      "url": "https://player.vimeo.com/video/400775043"
    }
  },
  "Prompt": "",
  "Hints": "You can solve this question by iterating through the input array from left to right once.\nTry iterating through the input array from left to right, in search of two adjacent integers that can indicate whether the array is trending upward or downward. Once you've found the tentative trend of the array, at each element thereafter, compare the element to the previous one; if this comparison breaks the previously identified trend, the array isn't monotonic.\nAlternatively, you can start by assuming that the array is both entirely non-decreasing and entirely non-increasing. As you iterate through each element, perform a check to see if you can invalidate one or both of your assumptions.",
  "SpaceTime": "O(n) time | O(1) space - where n is the length of the array\n",
  "PromptHTML": "<p>\n  Write a function that takes in an array of integers and returns a boolean\n  representing whether the array is monotonic.\n</p>\n<p>\n  An array is said to be monotonic if its elements, from left to right, are\n  entirely non-increasing or entirely non-decreasing.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">array</span> = [-1, -5, -10, -1100, -1100, -1101, -1102, -9001]\n</pre>\n<h3>Sample Output</h3>\n<pre>\ntrue\n</pre>\n",
  "Notes": "",
  "IsLongOutput": false,
  "Visualization": {
    "inputType": null,
    "outputType": null
  },
  "CustomInputLanguages": [
    "javascript",
    "cpp",
    "python",
    "java",
    "csharp",
    "go",
    "swift",
    "typescript"
  ],
  "CustomInputVars": [
    {
      "Name": "array",
      "Example": [
        -1,
        -5,
        -10,
        -1100,
        -1100,
        -1101,
        -1102,
        -9001
      ],
      "Schema": {
        "items": {
          "type": "integer"
        },
        "type": "array"
      }
    }
  ],
  "Resources": {
    "cpp": {
      "Language": "cpp",
      "StartingCode": "using namespace std;\n\nbool isMonotonic(vector<int> array) {\n  // Write your code here.\n  return false;\n}\n",
      "StartingTest": "class ProgramTest : public TestSuite {\npublic:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<int> input = {};\n      bool expected = true;\n      bool actual = isMonotonic(input);\n      assert(expected == actual);\n    });\n    RunTest(\"Test Case 2\", []() {\n      vector<int> input = {1};\n      bool expected = true;\n      bool actual = isMonotonic(input);\n      assert(expected == actual);\n    });\n    RunTest(\"Test Case 3\", []() {\n      vector<int> input = {1, 2};\n      bool expected = true;\n      bool actual = isMonotonic(input);\n      assert(expected == actual);\n    });\n    RunTest(\"Test Case 4\", []() {\n      vector<int> input = {2, 1};\n      bool expected = true;\n      bool actual = isMonotonic(input);\n      assert(expected == actual);\n    });\n    RunTest(\"Test Case 5\", []() {\n      vector<int> input = {1, 5, 10, 1100, 1101, 1102, 9001};\n      bool expected = true;\n      bool actual = isMonotonic(input);\n      assert(expected == actual);\n    });\n    RunTest(\"Test Case 6\", []() {\n      vector<int> input = {-1, -5, -10, -1100, -1101, -1102, -9001};\n      bool expected = true;\n      bool actual = isMonotonic(input);\n      assert(expected == actual);\n    });\n    RunTest(\"Test Case 7\", []() {\n      vector<int> input = {-1, -5, -10, -1100, -1100, -1101, -1102, -9001};\n      bool expected = true;\n      bool actual = isMonotonic(input);\n      assert(expected == actual);\n    });\n    RunTest(\"Test Case 8\", []() {\n      vector<int> input = {-1, -5, -10, -1100, -900, -1101, -1102, -9001};\n      bool expected = false;\n      bool actual = isMonotonic(input);\n      assert(expected == actual);\n    });\n    RunTest(\"Test Case 9\", []() {\n      vector<int> input = {1, 2, 0};\n      bool expected = false;\n      bool actual = isMonotonic(input);\n      assert(expected == actual);\n    });\n    RunTest(\"Test Case 10\", []() {\n      vector<int> input = {1, 1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 7, 9, 10, 11};\n      bool expected = false;\n      bool actual = isMonotonic(input);\n      assert(expected == actual);\n    });\n    RunTest(\"Test Case 11\", []() {\n      vector<int> input = {1, 1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 8, 9, 10, 11};\n      bool expected = true;\n      bool actual = isMonotonic(input);\n      assert(expected == actual);\n    });\n    RunTest(\"Test Case 12\", []() {\n      vector<int> input = {-1, -1, -2, -3, -4, -5,  -5, -5,\n                           -6, -7, -8, -7, -9, -10, -11};\n      bool expected = false;\n      bool actual = isMonotonic(input);\n      assert(expected == actual);\n    });\n    RunTest(\"Test Case 13\", []() {\n      vector<int> input = {-1, -1, -2, -3, -4, -5,  -5, -5,\n                           -6, -7, -8, -8, -9, -10, -11};\n      bool expected = true;\n      bool actual = isMonotonic(input);\n      assert(expected == actual);\n    });\n    RunTest(\"Test Case 14\", []() {\n      vector<int> input = {-1, -1, -1, -1, -1, -1, -1, -1};\n      bool expected = true;\n      bool actual = isMonotonic(input);\n      assert(expected == actual);\n    });\n  }\n};\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\npublic:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<int> input = {-1, -5, -10, -1100, -1100, -1101, -1102, -9001};\n      bool expected = true;\n      bool actual = isMonotonic(input);\n      assert(expected == actual);\n    });\n  }\n};\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nusing namespace std;\n\nbool breaksDirection(int direction, int previousInt, int currentInt) {\n  int difference = currentInt - previousInt;\n  if (direction > 0)\n    return difference < 0;\n  return difference > 0;\n}\n\n// O(n) time | O(1) space - where n is the length of the array\nbool isMonotonic(vector<int> array) {\n  if (array.size() <= 2)\n    return true;\n\n  int direction = array[1] - array[0];\n  for (int i = 2; i < array.size(); i++) {\n    if (direction == 0) {\n      direction = array[i] - array[i - 1];\n      continue;\n    }\n\n    if (breaksDirection(direction, array[i - 1], array[i]))\n      return false;\n  }\n\n  return true;\n}\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nusing namespace std;\n\n// O(n) time | O(1) space - where n is the length of the array\nbool isMonotonic(vector<int> array) {\n  bool is_non_decreasing = true;\n  bool is_non_increasing = true;\n  for (int i = 1; i < array.size(); i++) {\n    if (array[i] < array[i - 1]) {\n      is_non_decreasing = false;\n    }\n    if (array[i] > array[i - 1]) {\n      is_non_increasing = false;\n    }\n  }\n  return is_non_decreasing || is_non_increasing;\n}\n"
      ]
    },
    "csharp": {
      "Language": "csharp",
      "StartingCode": "public class Program {\n\tpublic static bool IsMonotonic(int[] array) {\n\t\t// Write your code here.\n\t\treturn false;\n\t}\n}\n",
      "StartingTest": "public class ProgramTest {\n\t[Test]\n\tpublic void TestCase1() {\n\t\tvar input = new int[] {};\n\t\tvar expected = true;\n\t\tvar actual = Program.IsMonotonic(input);\n\t\tUtils.AssertEquals(expected, actual);\n\t}\n\n\t[Test]\n\tpublic void TestCase2() {\n\t\tvar input = new int[] {1};\n\t\tvar expected = true;\n\t\tvar actual = Program.IsMonotonic(input);\n\t\tUtils.AssertEquals(expected, actual);\n\t}\n\n\t[Test]\n\tpublic void TestCase3() {\n\t\tvar input = new int[] {1, 2};\n\t\tvar expected = true;\n\t\tvar actual = Program.IsMonotonic(input);\n\t\tUtils.AssertEquals(expected, actual);\n\t}\n\n\t[Test]\n\tpublic void TestCase4() {\n\t\tvar input = new int[] {2, 1};\n\t\tvar expected = true;\n\t\tvar actual = Program.IsMonotonic(input);\n\t\tUtils.AssertEquals(expected, actual);\n\t}\n\n\t[Test]\n\tpublic void TestCase5() {\n\t\tvar input = new int[] {1, 5, 10, 1100, 1101, 1102, 9001};\n\t\tvar expected = true;\n\t\tvar actual = Program.IsMonotonic(input);\n\t\tUtils.AssertEquals(expected, actual);\n\t}\n\n\t[Test]\n\tpublic void TestCase6() {\n\t\tvar input = new int[] {-1, -5, -10, -1100, -1101, -1102, -9001};\n\t\tvar expected = true;\n\t\tvar actual = Program.IsMonotonic(input);\n\t\tUtils.AssertEquals(expected, actual);\n\t}\n\n\t[Test]\n\tpublic void TestCase7() {\n\t\tvar input = new int[] {-1, -5, -10, -1100, -1100, -1101, -1102, -9001};\n\t\tvar expected = true;\n\t\tvar actual = Program.IsMonotonic(input);\n\t\tUtils.AssertEquals(expected, actual);\n\t}\n\n\t[Test]\n\tpublic void TestCase8() {\n\t\tvar input = new int[] {-1, -5, -10, -1100, -900, -1101, -1102, -9001};\n\t\tvar expected = false;\n\t\tvar actual = Program.IsMonotonic(input);\n\t\tUtils.AssertEquals(expected, actual);\n\t}\n\n\t[Test]\n\tpublic void TestCase9() {\n\t\tvar input = new int[] {1, 2, 0};\n\t\tvar expected = false;\n\t\tvar actual = Program.IsMonotonic(input);\n\t\tUtils.AssertEquals(expected, actual);\n\t}\n\n\t[Test]\n\tpublic void TestCase10() {\n\t\tvar input = new int[] {1, 1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 7, 9, 10, 11};\n\t\tvar expected = false;\n\t\tvar actual = Program.IsMonotonic(input);\n\t\tUtils.AssertEquals(expected, actual);\n\t}\n\n\t[Test]\n\tpublic void TestCase11() {\n\t\tvar input = new int[] {1, 1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 8, 9, 10, 11};\n\t\tvar expected = true;\n\t\tvar actual = Program.IsMonotonic(input);\n\t\tUtils.AssertEquals(expected, actual);\n\t}\n\n\t[Test]\n\tpublic void TestCase12() {\n\t\tvar input =\n\t\t  new int[] {-1, -1, -2, -3, -4, -5, -5, -5, -6, -7, -8, -7, -9, -10, -11};\n\t\tvar expected = false;\n\t\tvar actual = Program.IsMonotonic(input);\n\t\tUtils.AssertEquals(expected, actual);\n\t}\n\n\t[Test]\n\tpublic void TestCase13() {\n\t\tvar input =\n\t\t  new int[] {-1, -1, -2, -3, -4, -5, -5, -5, -6, -7, -8, -8, -9, -10, -11};\n\t\tvar expected = true;\n\t\tvar actual = Program.IsMonotonic(input);\n\t\tUtils.AssertEquals(expected, actual);\n\t}\n\n\t[Test]\n\tpublic void TestCase14() {\n\t\tvar input = new int[] {-1, -1, -1, -1, -1, -1, -1, -1};\n\t\tvar expected = true;\n\t\tvar actual = Program.IsMonotonic(input);\n\t\tUtils.AssertEquals(expected, actual);\n\t}\n}\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npublic class ProgramTest {\n\t[Test]\n\tpublic void TestCase1() {\n\t\tvar array = new int[] {-1, -5, -10, -1100, -1100, -1101, -1102, -9001};\n\t\tvar expected = true;\n\t\tvar actual = Program.IsMonotonic(array);\n\t\tUtils.AssertEquals(expected, actual);\n\t}\n}",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\npublic class Program {\n\t// O(n) time | O(1) space - where n is the length of the array\n\tpublic static bool IsMonotonic(int[] array) {\n\t\tif (array.Length <= 2) return true;\n\n\t\tvar direction = array[1] - array[0];\n\t\tfor (int i = 2; i < array.Length; i++) {\n\t\t\tif (direction == 0) {\n\t\t\t\tdirection = array[i] - array[i - 1];\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (breaksDirection(direction, array[i - 1], array[i])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic static bool breaksDirection(int direction, int previous, int current) {\n\t\tvar difference = current - previous;\n\t\tif (direction > 0) return difference < 0;\n\t\treturn difference > 0;\n\t}\n}\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\npublic class Program {\n\t// O(n) time | O(1) space - where n is the length of the array\n\tpublic static bool IsMonotonic(int[] array) {\n\t\tvar isNonDecreasing = true;\n\t\tvar isNonIncreasing = true;\n\t\tfor (int i = 1; i < array.Length; i++) {\n\t\t\tif (array[i] < array[i - 1]) {\n\t\t\t\tisNonDecreasing = false;\n\t\t\t}\n\t\t\tif (array[i] > array[i - 1]) {\n\t\t\t\tisNonIncreasing = false;\n\t\t\t}\n\t\t}\n\n\t\treturn isNonDecreasing || isNonIncreasing;\n\t}\n}\n"
      ]
    },
    "go": {
      "Language": "go",
      "StartingCode": "package main\n\nfunc IsMonotonic(array []int) bool {\n\t// Write your code here.\n\treturn false\n}\n",
      "StartingTest": "package main\n\nimport \"github.com/stretchr/testify/require\"\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tarray := []int{}\n\tactual := IsMonotonic(array)\n\trequire.True(t, actual)\n}\n\nfunc (s *TestSuite) TestCase2(t *TestCase) {\n\tarray := []int{1}\n\tactual := IsMonotonic(array)\n\trequire.True(t, actual)\n}\n\nfunc (s *TestSuite) TestCase3(t *TestCase) {\n\tarray := []int{1, 2}\n\tactual := IsMonotonic(array)\n\trequire.True(t, actual)\n}\n\nfunc (s *TestSuite) TestCase4(t *TestCase) {\n\tarray := []int{2, 1}\n\tactual := IsMonotonic(array)\n\trequire.True(t, actual)\n}\n\nfunc (s *TestSuite) TestCase5(t *TestCase) {\n\tarray := []int{1, 5, 10, 1100, 1101, 1102, 9001}\n\tactual := IsMonotonic(array)\n\trequire.True(t, actual)\n}\n\nfunc (s *TestSuite) TestCase6(t *TestCase) {\n\tarray := []int{-1, -5, -10, -1100, -1101, -1102, -9001}\n\tactual := IsMonotonic(array)\n\trequire.True(t, actual)\n}\n\nfunc (s *TestSuite) TestCase7(t *TestCase) {\n\tarray := []int{-1, -5, -10, -1100, -1100, -1101, -1102, -9001}\n\tactual := IsMonotonic(array)\n\trequire.True(t, actual)\n}\n\nfunc (s *TestSuite) TestCase8(t *TestCase) {\n\tarray := []int{-1, -5, -10, -1100, -900, -1101, -1102, -9001}\n\tactual := IsMonotonic(array)\n\trequire.False(t, actual)\n}\n\nfunc (s *TestSuite) TestCase9(t *TestCase) {\n\tarray := []int{1, 2, 0}\n\tactual := IsMonotonic(array)\n\trequire.False(t, actual)\n}\n\nfunc (s *TestSuite) TestCase10(t *TestCase) {\n\tarray := []int{1, 1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 7, 9, 10, 11}\n\tactual := IsMonotonic(array)\n\trequire.False(t, actual)\n}\n\nfunc (s *TestSuite) TestCase11(t *TestCase) {\n\tarray := []int{1, 1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 8, 9, 10, 11}\n\tactual := IsMonotonic(array)\n\trequire.True(t, actual)\n}\n\nfunc (s *TestSuite) TestCase12(t *TestCase) {\n\tarray := []int{-1, -1, -2, -3, -4, -5, -5, -5, -6, -7, -8, -7, -9, -10, -11}\n\tactual := IsMonotonic(array)\n\trequire.False(t, actual)\n}\n\nfunc (s *TestSuite) TestCase13(t *TestCase) {\n\tarray := []int{-1, -1, -2, -3, -4, -5, -5, -5, -6, -7, -8, -8, -9, -10, -11}\n\tactual := IsMonotonic(array)\n\trequire.True(t, actual)\n}\n\nfunc (s *TestSuite) TestCase14(t *TestCase) {\n\tarray := []int{-1, -1, -1, -1, -1, -1, -1, -1}\n\tactual := IsMonotonic(array)\n\trequire.True(t, actual)\n}\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport \"github.com/stretchr/testify/require\"\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\tarray := []int{-1, -5, -10, -1100, -1100, -1101, -1102, -9001}\n\tactual := IsMonotonic(array)\n\trequire.True(t, actual)\n}",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\npackage main\n\n// O(n) time | O(1) space - where n is the length of the array\nfunc IsMonotonic(array []int) bool {\n\tif len(array) <= 2 {\n\t\treturn true\n\t}\n\n\tdirection := array[1] - array[0]\n\tfor i := 2; i < len(array); i++ {\n\t\tif direction == 0 {\n\t\t\tdirection = array[i] - array[i-1]\n\t\t\tcontinue\n\t\t}\n\n\t\tif breaksDirection(direction, array[i-1], array[i]) {\n\t\t\treturn false\n\t\t}\n\t}\n\n\treturn true\n}\n\nfunc breaksDirection(direction, previousInt, currentInt int) bool {\n\tdifference := currentInt - previousInt\n\tif direction > 0 {\n\t\treturn difference < 0\n\t}\n\treturn difference > 0\n}\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\npackage main\n\n// O(n) time | O(1) space - where n is the length of the array\nfunc IsMonotonic(array []int) bool {\n\tisNonDecreasing := true\n\tisNonIncreasing := true\n\tfor i := 1; i < len(array); i++ {\n\t\tif array[i] < array[i-1] {\n\t\t\tisNonDecreasing = false\n\t\t}\n\t\tif array[i] > array[i-1] {\n\t\t\tisNonIncreasing = false\n\t\t}\n\t}\n\n\treturn isNonDecreasing || isNonIncreasing\n}\n"
      ]
    },
    "java": {
      "Language": "java",
      "StartingCode": "import java.util.*;\n\nclass Program {\n  public static boolean isMonotonic(int[] array) {\n    // Write your code here.\n    return false;\n  }\n}\n",
      "StartingTest": "class ProgramTest {\n  @Test\n  public void TestCase1() {\n    var input = new int[] {};\n    var expected = true;\n    var actual = Program.isMonotonic(input);\n    Utils.assertEquals(expected, actual);\n  }\n\n  @Test\n  public void TestCase2() {\n    var input = new int[] {1};\n    var expected = true;\n    var actual = Program.isMonotonic(input);\n    Utils.assertEquals(expected, actual);\n  }\n\n  @Test\n  public void TestCase3() {\n    var input = new int[] {1, 2};\n    var expected = true;\n    var actual = Program.isMonotonic(input);\n    Utils.assertEquals(expected, actual);\n  }\n\n  @Test\n  public void TestCase4() {\n    var input = new int[] {2, 1};\n    var expected = true;\n    var actual = Program.isMonotonic(input);\n    Utils.assertEquals(expected, actual);\n  }\n\n  @Test\n  public void TestCase5() {\n    var input = new int[] {1, 5, 10, 1100, 1101, 1102, 9001};\n    var expected = true;\n    var actual = Program.isMonotonic(input);\n    Utils.assertEquals(expected, actual);\n  }\n\n  @Test\n  public void TestCase6() {\n    var input = new int[] {-1, -5, -10, -1100, -1101, -1102, -9001};\n    var expected = true;\n    var actual = Program.isMonotonic(input);\n    Utils.assertEquals(expected, actual);\n  }\n\n  @Test\n  public void TestCase7() {\n    var input = new int[] {-1, -5, -10, -1100, -1100, -1101, -1102, -9001};\n    var expected = true;\n    var actual = Program.isMonotonic(input);\n    Utils.assertEquals(expected, actual);\n  }\n\n  @Test\n  public void TestCase8() {\n    var input = new int[] {-1, -5, -10, -1100, -900, -1101, -1102, -9001};\n    var expected = false;\n    var actual = Program.isMonotonic(input);\n    Utils.assertEquals(expected, actual);\n  }\n\n  @Test\n  public void TestCase9() {\n    var input = new int[] {1, 2, 0};\n    var expected = false;\n    var actual = Program.isMonotonic(input);\n    Utils.assertEquals(expected, actual);\n  }\n\n  @Test\n  public void TestCase10() {\n    var input = new int[] {1, 1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 7, 9, 10, 11};\n    var expected = false;\n    var actual = Program.isMonotonic(input);\n    Utils.assertEquals(expected, actual);\n  }\n\n  @Test\n  public void TestCase11() {\n    var input = new int[] {1, 1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 8, 9, 10, 11};\n    var expected = true;\n    var actual = Program.isMonotonic(input);\n    Utils.assertEquals(expected, actual);\n  }\n\n  @Test\n  public void TestCase12() {\n    var input = new int[] {-1, -1, -2, -3, -4, -5, -5, -5, -6, -7, -8, -7, -9, -10, -11};\n    var expected = false;\n    var actual = Program.isMonotonic(input);\n    Utils.assertEquals(expected, actual);\n  }\n\n  @Test\n  public void TestCase13() {\n    var input = new int[] {-1, -1, -2, -3, -4, -5, -5, -5, -6, -7, -8, -8, -9, -10, -11};\n    var expected = true;\n    var actual = Program.isMonotonic(input);\n    Utils.assertEquals(expected, actual);\n  }\n\n  @Test\n  public void TestCase14() {\n    var input = new int[] {-1, -1, -1, -1, -1, -1, -1, -1};\n    var expected = true;\n    var actual = Program.isMonotonic(input);\n    Utils.assertEquals(expected, actual);\n  }\n}\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    var array = new int[] {-1, -5, -10, -1100, -1100, -1101, -1102, -9001};\n    var expected = true;\n    var actual = Program.isMonotonic(array);\n    Utils.assertEquals(expected, actual);\n  }\n}\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nclass Program {\n  // O(n) time | O(1) space - where n is the length of the array\n  public static boolean isMonotonic(int[] array) {\n    if (array.length <= 2) return true;\n\n    var direction = array[1] - array[0];\n    for (int i = 2; i < array.length; i++) {\n      if (direction == 0) {\n        direction = array[i] - array[i - 1];\n        continue;\n      }\n\n      if (breaksDirection(direction, array[i - 1], array[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean breaksDirection(int direction, int previous, int current) {\n    var difference = current - previous;\n    if (direction > 0) return difference < 0;\n    return difference > 0;\n  }\n}\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nclass Program {\n  // O(n) time | O(1) space - where n is the length of the array\n  public static boolean isMonotonic(int[] array) {\n    var isNonDecreasing = true;\n    var isNonIncreasing = true;\n    for (int i = 1; i < array.length; i++) {\n      if (array[i] < array[i - 1]) {\n        isNonDecreasing = false;\n      }\n      if (array[i] > array[i - 1]) {\n        isNonIncreasing = false;\n      }\n    }\n\n    return isNonDecreasing || isNonIncreasing;\n  }\n}\n"
      ]
    },
    "javascript": {
      "Language": "javascript",
      "StartingCode": "function isMonotonic(array) {\n  // Write your code here.\n}\n\n// Do not edit the line below.\nexports.isMonotonic = isMonotonic;\n",
      "StartingTest": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const array = [];\n  const actual = program.isMonotonic(array);\n  chai.expect(actual).to.deep.equal(true);\n});\n\nit('Test Case #2', function () {\n  const array = [1];\n  const actual = program.isMonotonic(array);\n  chai.expect(actual).to.deep.equal(true);\n});\n\nit('Test Case #3', function () {\n  const array = [1, 2];\n  const actual = program.isMonotonic(array);\n  chai.expect(actual).to.deep.equal(true);\n});\n\nit('Test Case #4', function () {\n  const array = [2, 1];\n  const actual = program.isMonotonic(array);\n  chai.expect(actual).to.deep.equal(true);\n});\n\nit('Test Case #5', function () {\n  const array = [1, 5, 10, 1100, 1101, 1102, 9001];\n  const actual = program.isMonotonic(array);\n  chai.expect(actual).to.deep.equal(true);\n});\n\nit('Test Case #6', function () {\n  const array = [-1, -5, -10, -1100, -1101, -1102, -9001];\n  const actual = program.isMonotonic(array);\n  chai.expect(actual).to.deep.equal(true);\n});\n\nit('Test Case #7', function () {\n  const array = [-1, -5, -10, -1100, -1100, -1101, -1102, -9001];\n  const actual = program.isMonotonic(array);\n  chai.expect(actual).to.deep.equal(true);\n});\n\nit('Test Case #8', function () {\n  const array = [-1, -5, -10, -1100, -900, -1101, -1102, -9001];\n  const actual = program.isMonotonic(array);\n  chai.expect(actual).to.deep.equal(false);\n});\n\nit('Test Case #9', function () {\n  const array = [1, 2, 0];\n  const actual = program.isMonotonic(array);\n  chai.expect(actual).to.deep.equal(false);\n});\n\nit('Test Case #10', function () {\n  const array = [1, 1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 7, 9, 10, 11];\n  chai.expect(program.isMonotonic(array)).to.deep.equal(false);\n});\n\nit('Test Case #11', function () {\n  const array = [1, 1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 8, 9, 10, 11];\n  chai.expect(program.isMonotonic(array)).to.deep.equal(true);\n});\n\nit('Test Case #12', function () {\n  const array = [-1, -1, -2, -3, -4, -5, -5, -5, -6, -7, -8, -7, -9, -10, -11];\n  chai.expect(program.isMonotonic(array)).to.deep.equal(false);\n});\n\nit('Test Case #13', function () {\n  const array = [-1, -1, -2, -3, -4, -5, -5, -5, -6, -7, -8, -8, -9, -10, -11];\n  chai.expect(program.isMonotonic(array)).to.deep.equal(true);\n});\n\nit('Test Case #14', function () {\n  const array = [-1, -1, -1, -1, -1, -1, -1, -1];\n  chai.expect(program.isMonotonic(array)).to.deep.equal(true);\n});\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const array = [-1, -5, -10, -1100, -1100, -1101, -1102, -9001];\n  const expected = true;\n  const actual = program.isMonotonic(array);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\n// O(n) time | O(1) space - where n is the length of the array\nfunction isMonotonic(array) {\n  if (array.length <= 2) return true;\n\n  let direction = array[1] - array[0];\n  for (let i = 2; i < array.length; i++) {\n    if (direction === 0) {\n      direction = array[i] - array[i - 1];\n      continue;\n    }\n    if (breaksDirection(direction, array[i - 1], array[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction breaksDirection(direction, previousInt, currentInt) {\n  const difference = currentInt - previousInt;\n  if (direction > 0) return difference < 0;\n  return difference > 0;\n}\n\nexports.isMonotonic = isMonotonic;\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\n// O(n) time | O(1) space - where n is the length of the array\nfunction isMonotonic(array) {\n  let isNonDecreasing = true;\n  let isNonIncreasing = true;\n  for (let i = 1; i < array.length; i++) {\n    if (array[i] < array[i - 1]) isNonDecreasing = false;\n    if (array[i] > array[i - 1]) isNonIncreasing = false;\n  }\n\n  return isNonDecreasing || isNonIncreasing;\n}\n\nexports.isMonotonic = isMonotonic;\n"
      ]
    },
    "python": {
      "Language": "python",
      "StartingCode": "def isMonotonic(array):\n    # Write your code here.\n    pass\n",
      "StartingTest": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        array = []\n        self.assertEqual(program.isMonotonic(array), True)\n\n    def test_case_2(self):\n        array = [1]\n        self.assertEqual(program.isMonotonic(array), True)\n\n    def test_case_3(self):\n        array = [1, 2]\n        self.assertEqual(program.isMonotonic(array), True)\n\n    def test_case_4(self):\n        array = [2, 1]\n        self.assertEqual(program.isMonotonic(array), True)\n\n    def test_case_5(self):\n        array = [1, 5, 10, 1100, 1101, 1102, 9001]\n        self.assertEqual(program.isMonotonic(array), True)\n\n    def test_case_6(self):\n        array = [-1, -5, -10, -1100, -1101, -1102, -9001]\n        self.assertEqual(program.isMonotonic(array), True)\n\n    def test_case_7(self):\n        array = [-1, -5, -10, -1100, -1100, -1101, -1102, -9001]\n        self.assertEqual(program.isMonotonic(array), True)\n\n    def test_case_8(self):\n        array = [-1, -5, -10, -1100, -900, -1101, -1102, -9001]\n        self.assertEqual(program.isMonotonic(array), False)\n\n    def test_case_9(self):\n        array = [1, 2, 0]\n        self.assertEqual(program.isMonotonic(array), False)\n\n    def test_case_10(self):\n        array = [1, 1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 7, 9, 10, 11]\n        self.assertEqual(program.isMonotonic(array), False)\n\n    def test_case_11(self):\n        array = [1, 1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 8, 9, 10, 11]\n        self.assertEqual(program.isMonotonic(array), True)\n\n    def test_case_12(self):\n        array = [-1, -1, -2, -3, -4, -5, -5, -5, -6, -7, -8, -7, -9, -10, -11]\n        self.assertEqual(program.isMonotonic(array), False)\n\n    def test_case_13(self):\n        array = [-1, -1, -2, -3, -4, -5, -5, -5, -6, -7, -8, -8, -9, -10, -11]\n        self.assertEqual(program.isMonotonic(array), True)\n\n    def test_case_14(self):\n        array = [-1, -1, -1, -1, -1, -1, -1, -1]\n        self.assertEqual(program.isMonotonic(array), True)\n",
      "SandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        array = [-1, -5, -10, -1100, -1100, -1101, -1102, -9001]\n        expected = True\n        actual = program.isMonotonic(array)\n        self.assertEqual(actual, expected)\n",
      "Solutions": [
        "# Copyright © 2020 Code Complete. All rights reserved.\n\n# O(n) time | O(1) space - where n is the length of the array\ndef isMonotonic(array):\n    if len(array) <= 2:\n        return True\n\n    direction = array[1] - array[0]\n    for i in range(2, len(array)):\n        if direction == 0:\n            direction = array[i] - array[i - 1]\n            continue\n        if breaksDirection(direction, array[i - 1], array[i]):\n            return False\n\n    return True\n\n\ndef breaksDirection(direction, previousInt, currentInt):\n    difference = currentInt - previousInt\n    if direction > 0:\n        return difference < 0\n    return difference > 0\n",
        "# Copyright © 2020 Code Complete. All rights reserved.\n\n# O(n) time | O(1) space - where n is the length of the array\ndef isMonotonic(array):\n    isNonDecreasing = True\n    isNonIncreasing = True\n    for i in range(1, len(array)):\n        if array[i] < array[i - 1]:\n            isNonDecreasing = False\n        if array[i] > array[i - 1]:\n            isNonIncreasing = False\n\n    return isNonDecreasing or isNonIncreasing\n"
      ]
    },
    "swift": {
      "Language": "swift",
      "StartingCode": "class Program {\n  func isMonotonic(array: [Int]) -> Bool {\n    // Write your code here.\n    return false\n  }\n}\n",
      "StartingTest": "class ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      let array = [Int]()\n      let expected = true\n      let actual = program.isMonotonic(array: array)\n      try assertEqual(expected, actual)\n    }\n    runTest(\"Test Case 2\") { () throws -> Void in\n      let array = [1]\n      let expected = true\n      let actual = program.isMonotonic(array: array)\n      try assertEqual(expected, actual)\n    }\n    runTest(\"Test Case 3\") { () throws -> Void in\n      let array = [1, 2]\n      let expected = true\n      let actual = program.isMonotonic(array: array)\n      try assertEqual(expected, actual)\n    }\n    runTest(\"Test Case 4\") { () throws -> Void in\n      let array = [2, 1]\n      let expected = true\n      let actual = program.isMonotonic(array: array)\n      try assertEqual(expected, actual)\n    }\n    runTest(\"Test Case 5\") { () throws -> Void in\n      let array = [1, 5, 10, 1100, 1101, 1102, 9001]\n      let expected = true\n      let actual = program.isMonotonic(array: array)\n      try assertEqual(expected, actual)\n    }\n    runTest(\"Test Case 6\") { () throws -> Void in\n      let array = [-1, -5, -10, -1100, -1101, -1102, -9001]\n      let expected = true\n      let actual = program.isMonotonic(array: array)\n      try assertEqual(expected, actual)\n    }\n    runTest(\"Test Case 7\") { () throws -> Void in\n      let array = [-1, -5, -10, -1100, -1100, -1101, -1102, -9001]\n      let expected = true\n      let actual = program.isMonotonic(array: array)\n      try assertEqual(expected, actual)\n    }\n    runTest(\"Test Case 8\") { () throws -> Void in\n      let array = [-1, -5, -10, -1100, -900, -1101, -1102, -9001]\n      let expected = false\n      let actual = program.isMonotonic(array: array)\n      try assertEqual(expected, actual)\n    }\n    runTest(\"Test Case 9\") { () throws -> Void in\n      let array = [1, 2, 0]\n      let expected = false\n      let actual = program.isMonotonic(array: array)\n      try assertEqual(expected, actual)\n    }\n    runTest(\"Test Case 10\") { () throws -> Void in\n      let array = [1, 1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 7, 9, 10, 11]\n      let expected = false\n      let actual = program.isMonotonic(array: array)\n      try assertEqual(expected, actual)\n    }\n    runTest(\"Test Case 11\") { () throws -> Void in\n      let array = [1, 1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 8, 9, 10, 11]\n      let expected = true\n      let actual = program.isMonotonic(array: array)\n      try assertEqual(expected, actual)\n    }\n    runTest(\"Test Case 12\") { () throws -> Void in\n      let array = [-1, -1, -2, -3, -4, -5, -5, -5, -6, -7, -8, -7, -9, -10, -11]\n      let expected = false\n      let actual = program.isMonotonic(array: array)\n      try assertEqual(expected, actual)\n    }\n    runTest(\"Test Case 13\") { () throws -> Void in\n      let array = [-1, -1, -2, -3, -4, -5, -5, -5, -6, -7, -8, -8, -9, -10, -11]\n      let expected = true\n      let actual = program.isMonotonic(array: array)\n      try assertEqual(expected, actual)\n    }\n    runTest(\"Test Case 14\") { () throws -> Void in\n      let array = [-1, -1, -1, -1, -1, -1, -1, -1]\n      let expected = true\n      let actual = program.isMonotonic(array: array)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      let array = [-1, -5, -10, -1100, -1100, -1101, -1102, -9001]\n      let expected = true\n      let actual = program.isMonotonic(array: array)\n      try assertEqual(expected, actual)\n    }\n  }\n}\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nclass Program {\n  // O(n) time | O(1) space - where n is the length of the array\n  func isMonotonic(array: [Int]) -> Bool {\n    if array.count <= 2 {\n      return true\n    }\n\n    var direction = array[1] - array[0]\n    for i in 2 ..< array.count {\n      if direction == 0 {\n        direction = array[i] - array[i - 1]\n        continue\n      }\n\n      if breaksDirection(direction: direction, previousInt: array[i - 1], currentInt: array[i]) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  func breaksDirection(direction: Int, previousInt: Int, currentInt: Int) -> Bool {\n    let difference = currentInt - previousInt\n    if direction > 0 {\n      return difference < 0\n    }\n    return difference > 0\n  }\n}\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nclass Program {\n  // O(n) time | O(1) space - where n is the length of the array\n  func isMonotonic(array: [Int]) -> Bool {\n    if array.count <= 2 {\n      return true\n    }\n\n    var isNonDecreasing = true\n    var isNonIncreasing = true\n    for i in 1 ..< array.count {\n      if array[i] < array[i - 1] {\n        isNonDecreasing = false\n      }\n      if array[i] > array[i - 1] {\n        isNonIncreasing = false\n      }\n    }\n\n    return isNonDecreasing || isNonIncreasing\n  }\n}\n"
      ]
    },
    "typescript": {
      "Language": "typescript",
      "StartingCode": "export function isMonotonic(array: number[]) {\n  // Write your code here.\n  return false;\n}\n",
      "StartingTest": "",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  const array = [-1, -5, -10, -1100, -1100, -1101, -1102, -9001];\n  const expected = true;\n  const actual = program.isMonotonic(array);\n  chai.expect(actual).to.deep.equal(expected);\n});\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\n// O(n) time | O(1) space - where n is the length of the array\nexport function isMonotonic(array: number[]) {\n  if (array.length <= 2) return true;\n\n  let direction = array[1] - array[0];\n  for (let i = 2; i < array.length; i++) {\n    if (direction === 0) {\n      direction = array[i] - array[i - 1];\n      continue;\n    }\n    if (breaksDirection(direction, array[i - 1], array[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction breaksDirection(direction: number, previousInt: number, currentInt: number) {\n  const difference = currentInt - previousInt;\n  if (direction > 0) return difference < 0;\n  return difference > 0;\n}\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\n// O(n) time | O(1) space - where n is the length of the array\nexport function isMonotonic(array: number[]) {\n  let isNonDecreasing = true;\n  let isNonIncreasing = true;\n  for (let i = 1; i < array.length; i++) {\n    if (array[i] < array[i - 1]) isNonDecreasing = false;\n    if (array[i] > array[i - 1]) isNonIncreasing = false;\n  }\n\n  return isNonDecreasing || isNonIncreasing;\n}\n"
      ]
    }
  },
  "JSONTestLanguages": [
    "javascript",
    "cpp",
    "python",
    "java",
    "csharp",
    "go",
    "swift",
    "typescript"
  ],
  "JSONTests": [
    {
      "array": [
        -1,
        -5,
        -10,
        -1100,
        -1100,
        -1101,
        -1102,
        -9001
      ]
    },
    {
      "array": []
    },
    {
      "array": [
        1
      ]
    },
    {
      "array": [
        1,
        2
      ]
    },
    {
      "array": [
        2,
        1
      ]
    },
    {
      "array": [
        1,
        5,
        10,
        1100,
        1101,
        1102,
        9001
      ]
    },
    {
      "array": [
        -1,
        -5,
        -10,
        -1100,
        -1101,
        -1102,
        -9001
      ]
    },
    {
      "array": [
        -1,
        -5,
        -10,
        -1100,
        -900,
        -1101,
        -1102,
        -9001
      ]
    },
    {
      "array": [
        1,
        2,
        0
      ]
    },
    {
      "array": [
        1,
        1,
        2,
        3,
        4,
        5,
        5,
        5,
        6,
        7,
        8,
        7,
        9,
        10,
        11
      ]
    },
    {
      "array": [
        1,
        1,
        2,
        3,
        4,
        5,
        5,
        5,
        6,
        7,
        8,
        8,
        9,
        10,
        11
      ]
    },
    {
      "array": [
        -1,
        -1,
        -2,
        -3,
        -4,
        -5,
        -5,
        -5,
        -6,
        -7,
        -8,
        -7,
        -9,
        -10,
        -11
      ]
    },
    {
      "array": [
        -1,
        -1,
        -2,
        -3,
        -4,
        -5,
        -5,
        -5,
        -6,
        -7,
        -8,
        -8,
        -9,
        -10,
        -11
      ]
    },
    {
      "array": [
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
      ]
    }
  ],
  "JSONAnswers": [
    [
      true,
      true,
      true,
      true,
      true,
      true,
      true,
      false,
      false,
      false,
      true,
      false,
      true,
      true
    ]
  ]
}