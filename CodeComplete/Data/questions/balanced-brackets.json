{
  "Summary": {
    "Name": "Balanced Brackets",
    "Category": "Stacks",
    "Difficulty": 2,
    "Available": true,
    "Metadata": {
      "number": 153,
      "timeOne": 0,
      "timeTwo": 921,
      "url": "https://player.vimeo.com/video/227727657"
    }
  },
  "Prompt": "",
  "Hints": "If you iterate through the input string one character at a time, there are two scenarios in which the string will be unbalanced: either you run into a closing bracket with no prior matching opening bracket or you get to the end of the string with some opening brackets that haven't been matched. Can you use an auxiliary data structure to keep track of all the brackets and efficiently check if you run into a unbalanced scenario at every iteration?\nConsider using a stack to store opening brackets as you traverse the string. The Last-In-First-Out property of the stack should allow you to match any closing brackets that you run into against the most recent opening bracket, if one exists, in which case you can simply pop it out of the stack. How can you check that there are no unmatched opening bracket once you've finished traversing through the string?\n",
  "SpaceTime": "O(n) time | O(n) space - where n is the length of the input array\n",
  "PromptHTML": "<p>\n  Write a function that takes in a string made up of brackets (<span>(</span>,\n  <span>[</span>, <span>{</span>, <span>)</span>, <span>]</span>, and\n  <span>}</span>) and other optional characters. The function should return a\n  boolean representing whether the string is balanced with regards to brackets.\n</p>\n<p>\n  A string is said to be balanced if it has as many opening brackets of a\n  certain type as it has closing brackets of that type and if no bracket is\n  unmatched. Note that an opening bracket can't match a corresponding closing\n  bracket that comes before it, and similarly, a closing bracket can't match a\n  corresponding opening bracket that comes after it. Also, brackets can't\n  overlap each other as in\n  <span>[(])</span>.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">string</span> = \"([])(){}(())()()\"\n</pre>\n<h3>Sample Output</h3>\n<pre>\ntrue <span class=\"CodeEditor-promptComment\">// it's balanced</span>\n</pre>\n",
  "Notes": "",
  "IsLongOutput": false,
  "Visualization": {
    "inputType": null,
    "outputType": null
  },
  "CustomInputLanguages": [
    "javascript",
    "cpp",
    "python",
    "java",
    "csharp",
    "go",
    "swift",
    "typescript"
  ],
  "CustomInputVars": [
    {
      "Name": "string",
      "Example": "([])(){}(())()()",
      "Schema": {
        "type": "string"
      }
    }
  ],
  "Resources": {
    "cpp": {
      "Language": "cpp",
      "StartingCode": "using namespace std;\n\nbool balancedBrackets(string str) {\n  // Write your code here.\n  return false;\n}\n",
      "StartingTest": "class ProgramTest : public TestSuite {\npublic:\n  void Run() {\n\n    RunTest(\"Test Case 1\", []() { assert(balancedBrackets(\"()[]{}{\") == 0); });\n\n    RunTest(\"Test Case 2\", []() {\n      assert(balancedBrackets(\"(((((({{{{{[[[[[([)])]]]]]}}}}}))))))\") == 0);\n    });\n\n    RunTest(\"Test Case 3\",\n            []() { assert(balancedBrackets(\"()()[{()})]\") == 0); });\n\n    RunTest(\"Test Case 4\",\n            []() { assert(balancedBrackets(\"(()())((()()()))\") == 1); });\n\n    RunTest(\"Test Case 5\", []() { assert(balancedBrackets(\"{}()\") == 1); });\n\n    RunTest(\"Test Case 6\", []() { assert(balancedBrackets(\"()([])\") == 1); });\n\n    RunTest(\"Test Case 7\",\n            []() { assert(balancedBrackets(\"((){{{{[]}}}})\") == 1); });\n\n    RunTest(\"Test Case 8\",\n            []() { assert(balancedBrackets(\"([])(){}(())()()\") == 1); });\n\n    RunTest(\"Test Case 9\",\n            []() { assert(balancedBrackets(\"((({})()))\") == 1); });\n\n    RunTest(\"Test Case 10\",\n            []() { assert(balancedBrackets(\"(([]()()){})\") == 1); });\n\n    RunTest(\"Test Case 11\", []() {\n      assert(\n          balancedBrackets(\"(((((([[[[[[{{{{{{{{{{{{()}}}}}}}}}}}}]]]]]])))))\"\n                           \")((([])({})[])[])[]([]){}(())\") == 1);\n    });\n\n    RunTest(\"Test Case 12\",\n            []() { assert(balancedBrackets(\"{[[[[({(}))]]]]}\") == 0); });\n\n    RunTest(\"Test Case 13\", []() {\n      assert(balancedBrackets(\"[((([])([]){}){}){}([])[]((())\") == 0);\n    });\n\n    RunTest(\"Test Case 14\", []() { assert(balancedBrackets(\")[]}\") == 0); });\n  }\n};\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\npublic:\n  void Run() {\n    RunTest(\"Test Case 1\",\n            []() { assert(balancedBrackets(\"([])(){}(())()()\") == true); });\n  }\n};\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n\n// O(n) time | O(n) space\nbool balancedBrackets(string str) {\n  string openingBrackets = \"([{\";\n  string closingBrackets = \")]}\";\n  unordered_map<char, char> matchingBrackets{\n      {')', '('}, {']', '['}, {'}', '{'}};\n  vector<char> stack;\n  for (char character : str) {\n    if (openingBrackets.find(character) != string::npos) {\n      stack.push_back(character);\n    } else if (closingBrackets.find(character) != string::npos) {\n      if (stack.size() == 0) {\n        return false;\n      }\n      if (stack[stack.size() - 1] == matchingBrackets[character]) {\n        stack.pop_back();\n      } else {\n        return false;\n      }\n    }\n  }\n  return stack.size() == 0;\n}"
      ]
    },
    "csharp": {
      "Language": "csharp",
      "StartingCode": "public class Program {\n\tpublic static bool BalancedBrackets(string str) {\n\t\t// Write your code here.\n\t\treturn false;\n\t}\n}\n",
      "StartingTest": "public class ProgramTest {\n\t[Test]\n\tpublic void TestCase1() {\n\t\tstring input = \"()[]{}{\";\n\t\tUtils.AssertTrue(!Program.BalancedBrackets(input));\n\t}\n\n\t[Test]\n\tpublic void TestCase2() {\n\t\tstring input = \"(((((({{{{{[[[[[([)])]]]]]}}}}}))))))\";\n\t\tUtils.AssertTrue(!Program.BalancedBrackets(input));\n\t}\n\n\t[Test]\n\tpublic void TestCase3() {\n\t\tstring input = \"()()[{()})]\";\n\t\tUtils.AssertTrue(!Program.BalancedBrackets(input));\n\t}\n\n\t[Test]\n\tpublic void TestCase4() {\n\t\tstring input = \"(()())((()()()))\";\n\t\tUtils.AssertTrue(Program.BalancedBrackets(input));\n\t}\n\n\t[Test]\n\tpublic void TestCase5() {\n\t\tstring input = \"{}()\";\n\t\tUtils.AssertTrue(Program.BalancedBrackets(input));\n\t}\n\n\t[Test]\n\tpublic void TestCase6() {\n\t\tstring input = \"()([])\";\n\t\tUtils.AssertTrue(Program.BalancedBrackets(input));\n\t}\n\n\t[Test]\n\tpublic void TestCase7() {\n\t\tstring input = \"((){{{{[]}}}})\";\n\t\tUtils.AssertTrue(Program.BalancedBrackets(input));\n\t}\n\n\t[Test]\n\tpublic void TestCase8() {\n\t\tstring input = \"([])(){}(())()()\";\n\t\tUtils.AssertTrue(Program.BalancedBrackets(input));\n\t}\n\n\t[Test]\n\tpublic void TestCase9() {\n\t\tstring input = \"((({})()))\";\n\t\tUtils.AssertTrue(Program.BalancedBrackets(input));\n\t}\n\n\t[Test]\n\tpublic void TestCase10() {\n\t\tstring input = \"(([]()()){})\";\n\t\tUtils.AssertTrue(Program.BalancedBrackets(input));\n\t}\n\n\t[Test]\n\tpublic void TestCase11() {\n\t\tstring input =\n\t\t  \"(((((([[[[[[{{{{{{{{{{{{()}}}}}}}}}}}}]]]]]]))))))((([])({})[])[])[]([]){}(())\";\n\t\tUtils.AssertTrue(Program.BalancedBrackets(input));\n\t}\n\n\t[Test]\n\tpublic void TestCase12() {\n\t\tstring input = \"{[[[[({(}))]]]]}\";\n\t\tUtils.AssertTrue(!Program.BalancedBrackets(input));\n\t}\n\n\t[Test]\n\tpublic void TestCase13() {\n\t\tstring input = \"[((([])([]){}){}){}([])[]((())\";\n\t\tUtils.AssertTrue(!Program.BalancedBrackets(input));\n\t}\n\n\t[Test]\n\tpublic void TestCase14() {\n\t\tstring input = \")[]}\";\n\t\tUtils.AssertTrue(!Program.BalancedBrackets(input));\n\t}\n}\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npublic class ProgramTest {\n\t[Test]\n\tpublic void TestCase1() {\n\t\tstring input = \"([])(){}(())()()\";\n\t\tUtils.AssertTrue(Program.BalancedBrackets(input));\n\t}\n}\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nusing System.Collections.Generic;\n\npublic class Program {\n\t// O(n) time | O(n) space\n\tpublic static bool BalancedBrackets(string str) {\n\t\tstring openingBrackets = \"([{\";\n\t\tstring closingBrackets = \")]}\";\n\t\tDictionary<char, char> matchingBrackets = new Dictionary<char, char>();\n\t\tmatchingBrackets.Add(')', '(');\n\t\tmatchingBrackets.Add(']', '[');\n\t\tmatchingBrackets.Add('}', '{');\n\t\tList<char> stack = new List<char>();\n\t\tfor (int i = 0; i < str.Length; i++) {\n\t\t\tchar letter = str[i];\n\t\t\tif (openingBrackets.IndexOf(letter) != -1) {\n\t\t\t\tstack.Add(letter);\n\t\t\t} else if (closingBrackets.IndexOf(letter) != -1) {\n\t\t\t\tif (stack.Count == 0) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif (stack[stack.Count - 1] == matchingBrackets[letter]) {\n\t\t\t\t\tstack.RemoveAt(stack.Count - 1);\n\t\t\t\t} else {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn stack.Count == 0;\n\t}\n}\n"
      ]
    },
    "go": {
      "Language": "go",
      "StartingCode": "package main\n\nfunc BalancedBrackets(s string) bool {\n\t// Write your code here.\n\treturn false\n}\n",
      "StartingTest": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\texpected := false\n\toutput := BalancedBrackets(\"()[]{}{\")\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase2(t *TestCase) {\n\texpected := false\n\toutput := BalancedBrackets(\"(((((({{{{{[[[[[([)])]]]]]}}}}}))))))\")\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase3(t *TestCase) {\n\texpected := false\n\toutput := BalancedBrackets(\"()()[{()})]\")\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase4(t *TestCase) {\n\texpected := true\n\toutput := BalancedBrackets(\"(()())((()()()))\")\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase5(t *TestCase) {\n\texpected := true\n\toutput := BalancedBrackets(\"{}()\")\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase6(t *TestCase) {\n\texpected := true\n\toutput := BalancedBrackets(\"()([])\")\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase7(t *TestCase) {\n\texpected := true\n\toutput := BalancedBrackets(\"((){{{{[]}}}})\")\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase8(t *TestCase) {\n\texpected := true\n\toutput := BalancedBrackets(\"([])(){}(())()()\")\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase9(t *TestCase) {\n\texpected := true\n\toutput := BalancedBrackets(\"((({})()))\")\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase10(t *TestCase) {\n\texpected := true\n\toutput := BalancedBrackets(\"(([]()()){})\")\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase11(t *TestCase) {\n\texpected := true\n\toutput := BalancedBrackets(\"(((((([[[[[[{{{{{{{{{{{{()}}}}}}}}}}}}]]]]]]))))))((([])({})[])[])[]([]){}(())\")\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase12(t *TestCase) {\n\texpected := false\n\toutput := BalancedBrackets(\"{[[[[({(}))]]]]}\")\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase13(t *TestCase) {\n\texpected := false\n\toutput := BalancedBrackets(\"[((([])([]){}){}){}([])[]((())\")\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase14(t *TestCase) {\n\texpected := false\n\toutput := BalancedBrackets(\")[]}\")\n\trequire.Equal(t, expected, output)\n}\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\texpected := true\n\toutput := BalancedBrackets(\"([])(){}(())()()\")\n\trequire.Equal(t, expected, output)\n}\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\npackage main\n\nvar opening = map[rune]bool{\n\t'(': true,\n\t'[': true,\n\t'{': true,\n}\n\nvar closing = map[rune]bool{\n\t')': true,\n\t']': true,\n\t'}': true,\n}\n\nvar matching = map[rune]rune{\n\t')': '(',\n\t']': '[',\n\t'}': '{',\n}\n\n// O(n) time | O(n) space\nfunc BalancedBrackets(s string) bool {\n\tstack := []rune{}\n\tfor _, char := range s {\n\t\tif _, found := opening[char]; found {\n\t\t\tstack = append(stack, char)\n\t\t\tcontinue\n\t\t}\n\t\tif _, found := closing[char]; found {\n\t\t\tif len(stack) == 0 {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\tif stack[len(stack)-1] == matching[char] {\n\t\t\t\tstack = stack[0 : len(stack)-1]\n\t\t\t} else {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t}\n\treturn len(stack) == 0\n}\n"
      ]
    },
    "java": {
      "Language": "java",
      "StartingCode": "import java.util.*;\n\nclass Program {\n  public static boolean balancedBrackets(String str) {\n    // Write your code here.\n    return false;\n  }\n}\n",
      "StartingTest": "class ProgramTest {\n  @Test\n  public void TestCase1() {\n    String input = \"()[]{}{\";\n    Utils.assertTrue(!Program.balancedBrackets(input));\n  }\n\n  @Test\n  public void TestCase2() {\n    String input = \"(((((({{{{{[[[[[([)])]]]]]}}}}}))))))\";\n    Utils.assertTrue(!Program.balancedBrackets(input));\n  }\n\n  @Test\n  public void TestCase3() {\n    String input = \"()()[{()})]\";\n    Utils.assertTrue(!Program.balancedBrackets(input));\n  }\n\n  @Test\n  public void TestCase4() {\n    String input = \"(()())((()()()))\";\n    Utils.assertTrue(Program.balancedBrackets(input));\n  }\n\n  @Test\n  public void TestCase5() {\n    String input = \"{}()\";\n    Utils.assertTrue(Program.balancedBrackets(input));\n  }\n\n  @Test\n  public void TestCase6() {\n    String input = \"()([])\";\n    Utils.assertTrue(Program.balancedBrackets(input));\n  }\n\n  @Test\n  public void TestCase7() {\n    String input = \"((){{{{[]}}}})\";\n    Utils.assertTrue(Program.balancedBrackets(input));\n  }\n\n  @Test\n  public void TestCase8() {\n    String input = \"([])(){}(())()()\";\n    Utils.assertTrue(Program.balancedBrackets(input));\n  }\n\n  @Test\n  public void TestCase9() {\n    String input = \"((({})()))\";\n    Utils.assertTrue(Program.balancedBrackets(input));\n  }\n\n  @Test\n  public void TestCase10() {\n    String input = \"(([]()()){})\";\n    Utils.assertTrue(Program.balancedBrackets(input));\n  }\n\n  @Test\n  public void TestCase11() {\n    String input = \"(((((([[[[[[{{{{{{{{{{{{()}}}}}}}}}}}}]]]]]]))))))((([])({})[])[])[]([]){}(())\";\n    Utils.assertTrue(Program.balancedBrackets(input));\n  }\n\n  @Test\n  public void TestCase12() {\n    String input = \"{[[[[({(}))]]]]}\";\n    Utils.assertTrue(!Program.balancedBrackets(input));\n  }\n\n  @Test\n  public void TestCase13() {\n    String input = \"[((([])([]){}){}){}([])[]((())\";\n    Utils.assertTrue(!Program.balancedBrackets(input));\n  }\n\n  @Test\n  public void TestCase14() {\n    String input = \")[]}\";\n    Utils.assertTrue(!Program.balancedBrackets(input));\n  }\n}\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    String input = \"([])(){}(())()()\";\n    Utils.assertTrue(Program.balancedBrackets(input));\n  }\n}\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(n) time | O(n) space\n  public static boolean balancedBrackets(String str) {\n    String openingBrackets = \"([{\";\n    String closingBrackets = \")]}\";\n    Map<Character, Character> matchingBrackets = new HashMap<Character, Character>();\n    matchingBrackets.put(')', '(');\n    matchingBrackets.put(']', '[');\n    matchingBrackets.put('}', '{');\n    List<Character> stack = new ArrayList<Character>();\n    for (int i = 0; i < str.length(); i++) {\n      char letter = str.charAt(i);\n      if (openingBrackets.indexOf(letter) != -1) {\n        stack.add(letter);\n      } else if (closingBrackets.indexOf(letter) != -1) {\n        if (stack.size() == 0) {\n          return false;\n        }\n        if (stack.get(stack.size() - 1) == matchingBrackets.get(letter)) {\n          stack.remove(stack.size() - 1);\n        } else {\n          return false;\n        }\n      }\n    }\n    return stack.size() == 0;\n  }\n}\n"
      ]
    },
    "javascript": {
      "Language": "javascript",
      "StartingCode": "function balancedBrackets(string) {\n  // Write your code here.\n}\n\n// Do not edit the line below.\nexports.balancedBrackets = balancedBrackets;\n",
      "StartingTest": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai.expect(program.balancedBrackets('()[]{}{')).to.deep.equal(false);\n});\n\nit('Test Case #2', function () {\n  chai.expect(program.balancedBrackets('(((((({{{{{[[[[[([)])]]]]]}}}}}))))))')).to.deep.equal(false);\n});\n\nit('Test Case #3', function () {\n  chai.expect(program.balancedBrackets('()()[{()})]')).to.deep.equal(false);\n});\n\nit('Test Case #4', function () {\n  chai.expect(program.balancedBrackets('(()())((()()()))')).to.deep.equal(true);\n});\n\nit('Test Case #5', function () {\n  chai.expect(program.balancedBrackets('{}()')).to.deep.equal(true);\n});\n\nit('Test Case #6', function () {\n  chai.expect(program.balancedBrackets('()([])')).to.deep.equal(true);\n});\n\nit('Test Case #7', function () {\n  chai.expect(program.balancedBrackets('((){{{{[]}}}})')).to.deep.equal(true);\n});\n\nit('Test Case #8', function () {\n  chai.expect(program.balancedBrackets('([])(){}(())()()')).to.deep.equal(true);\n});\n\nit('Test Case #9', function () {\n  chai.expect(program.balancedBrackets('((({})()))')).to.deep.equal(true);\n});\n\nit('Test Case #10', function () {\n  chai.expect(program.balancedBrackets('(([]()()){})')).to.deep.equal(true);\n});\n\nit('Test Case #11', function () {\n  chai\n    .expect(program.balancedBrackets('(((((([[[[[[{{{{{{{{{{{{()}}}}}}}}}}}}]]]]]]))))))((([])({})[])[])[]([]){}(())'))\n    .to.deep.equal(true);\n});\n\nit('Test Case #12', function () {\n  chai.expect(program.balancedBrackets('{[[[[({(}))]]]]}')).to.deep.equal(false);\n});\n\nit('Test Case #13', function () {\n  chai.expect(program.balancedBrackets('[((([])([]){}){}){}([])[]((())')).to.deep.equal(false);\n});\n\nit('Test Case #14', function () {\n  chai.expect(program.balancedBrackets(')[]}')).to.deep.equal(false);\n});\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai.expect(program.balancedBrackets('([])(){}(())()()')).to.deep.equal(true);\n});\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\n// O(n) time | O(n) space\nfunction balancedBrackets(string) {\n  const openingBrackets = '([{';\n  const closingBrackets = ')]}';\n  const matchingBrackets = {')': '(', ']': '[', '}': '{'};\n  const stack = [];\n  for (const char of string) {\n    if (openingBrackets.includes(char)) {\n      stack.push(char);\n    } else if (closingBrackets.includes(char)) {\n      if (stack.length == 0) {\n        return false;\n      }\n      if (stack[stack.length - 1] === matchingBrackets[char]) {\n        stack.pop();\n      } else {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n}\n\nexports.balancedBrackets = balancedBrackets;\n"
      ]
    },
    "python": {
      "Language": "python",
      "StartingCode": "def balancedBrackets(string):\n    # Write your code here.\n    pass\n",
      "StartingTest": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(program.balancedBrackets(\"()[]{}{\"), False)\n\n    def test_case_2(self):\n        self.assertEqual(program.balancedBrackets(\"(((((({{{{{[[[[[([)])]]]]]}}}}}))))))\"), False)\n\n    def test_case_3(self):\n        self.assertEqual(program.balancedBrackets(\"()()[{()})]\"), False)\n\n    def test_case_4(self):\n        self.assertEqual(program.balancedBrackets(\"(()())((()()()))\"), True)\n\n    def test_case_5(self):\n        self.assertEqual(program.balancedBrackets(\"{}()\"), True)\n\n    def test_case_6(self):\n        self.assertEqual(program.balancedBrackets(\"()([])\"), True)\n\n    def test_case_7(self):\n        self.assertEqual(program.balancedBrackets(\"((){{{{[]}}}})\"), True)\n\n    def test_case_8(self):\n        self.assertEqual(program.balancedBrackets(\"([])(){}(())()()\"), True)\n\n    def test_case_9(self):\n        self.assertEqual(program.balancedBrackets(\"((({})()))\"), True)\n\n    def test_case_10(self):\n        self.assertEqual(program.balancedBrackets(\"(([]()()){})\"), True)\n\n    def test_case_11(self):\n        self.assertEqual(\n            program.balancedBrackets(\"(((((([[[[[[{{{{{{{{{{{{()}}}}}}}}}}}}]]]]]]))))))((([])({})[])[])[]([]){}(())\"),\n            True,\n        )\n\n    def test_case_12(self):\n        self.assertEqual(program.balancedBrackets(\"{[[[[({(}))]]]]}\"), False)\n\n    def test_case_13(self):\n        self.assertEqual(program.balancedBrackets(\"[((([])([]){}){}){}([])[]((())\"), False)\n\n    def test_case_14(self):\n        self.assertEqual(program.balancedBrackets(\")[]}\"), False)\n",
      "SandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(program.balancedBrackets(\"([])(){}(())()()\"), True)\n",
      "Solutions": [
        "# Copyright © 2020 Code Complete. All rights reserved.\n\n# O(n) time | O(n) space\ndef balancedBrackets(string):\n    openingBrackets = \"([{\"\n    closingBrackets = \")]}\"\n    matchingBrackets = {\")\": \"(\", \"]\": \"[\", \"}\": \"{\"}\n    stack = []\n    for char in string:\n        if char in openingBrackets:\n            stack.append(char)\n        elif char in closingBrackets:\n            if len(stack) == 0:\n                return False\n            if stack[-1] == matchingBrackets[char]:\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n"
      ]
    },
    "swift": {
      "Language": "swift",
      "StartingCode": "class Program {\n  func balancedBrackets(string: String) -> Bool {\n    // Write your code here.\n    return false\n  }\n}\n",
      "StartingTest": "class ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      try assertEqual(false, program.balancedBrackets(string: \"()[]{}{\"))\n    }\n    runTest(\"Test Case 2\") { () throws -> Void in\n      try assertEqual(false, program.balancedBrackets(string: \"(((((({{{{{[[[[[([)])]]]]]}}}}}))))))\"))\n    }\n    runTest(\"Test Case 3\") { () throws -> Void in\n      try assertEqual(false, program.balancedBrackets(string: \"()()[{()})]\"))\n    }\n    runTest(\"Test Case 4\") { () throws -> Void in\n      try assertEqual(true, program.balancedBrackets(string: \"(()())((()()()))\"))\n    }\n    runTest(\"Test Case 5\") { () throws -> Void in\n      try assertEqual(true, program.balancedBrackets(string: \"{}()\"))\n    }\n    runTest(\"Test Case 6\") { () throws -> Void in\n      try assertEqual(true, program.balancedBrackets(string: \"()([])\"))\n    }\n    runTest(\"Test Case 7\") { () throws -> Void in\n      try assertEqual(true, program.balancedBrackets(string: \"((){{{{[]}}}})\"))\n    }\n    runTest(\"Test Case 8\") { () throws -> Void in\n      try assertEqual(true, program.balancedBrackets(string: \"([])(){}(())()()\"))\n    }\n    runTest(\"Test Case 9\") { () throws -> Void in\n      try assertEqual(true, program.balancedBrackets(string: \"((({})()))\"))\n    }\n    runTest(\"Test Case 10\") { () throws -> Void in\n      try assertEqual(true, program.balancedBrackets(string: \"(([]()()){})\"))\n    }\n    runTest(\"Test Case 11\") { () throws -> Void in\n      try assertEqual(true, program.balancedBrackets(string: \"(((((([[[[[[{{{{{{{{{{{{()}}}}}}}}}}}}]]]]]]))))))((([])({})[])[])[]([]){}(())\"))\n    }\n    runTest(\"Test Case 12\") { () throws -> Void in\n      try assertEqual(false, program.balancedBrackets(string: \"{[[[[({(}))]]]]}\"))\n    }\n    runTest(\"Test Case 13\") { () throws -> Void in\n      try assertEqual(false, program.balancedBrackets(string: \"[((([])([]){}){}){}([])[]((())\"))\n    }\n    runTest(\"Test Case 14\") { () throws -> Void in\n      try assertEqual(false, program.balancedBrackets(string: \")[]}\"))\n    }\n  }\n}\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      try assertEqual(true, program.balancedBrackets(string: \"([])(){}(())()()\"))\n    }\n  }\n}\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nclass Program {\n  // O(n) time | O(n) space\n  func balancedBrackets(string: String) -> Bool {\n    let openingBrackets = \"([{\"\n    let matchingBrackets: [Character: Character] = [\")\": \"(\", \"]\": \"[\", \"}\": \"{\"]\n\n    var stack = [Character]()\n\n    for character in string {\n      if openingBrackets.contains(character) {\n        stack.append(character)\n      } else {\n        if stack.count == 0 {\n          return false\n        } else {\n          if let lastCharacter = stack.last, lastCharacter == matchingBrackets[character] {\n            stack.popLast()\n          } else {\n            return false\n          }\n        }\n      }\n    }\n\n    return stack.count == 0\n  }\n}\n"
      ]
    },
    "typescript": {
      "Language": "typescript",
      "StartingCode": "export function balancedBrackets(string: string) {\n  // Write your code here.\n  return false;\n}\n",
      "StartingTest": "",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  chai.expect(program.balancedBrackets('([])(){}(())()()')).to.deep.equal(true);\n});\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\n// O(n) time | O(n) space\nexport function balancedBrackets(string: string) {\n  const openingBrackets = '([{';\n  const closingBrackets = ')]}';\n  const matchingBrackets: {[key: string]: string} = {')': '(', ']': '[', '}': '{'};\n  const stack: string[] = [];\n  for (const char of string) {\n    if (openingBrackets.includes(char)) {\n      stack.push(char);\n    } else if (closingBrackets.includes(char)) {\n      if (stack.length == 0) {\n        return false;\n      }\n      if (stack[stack.length - 1] === matchingBrackets[char]) {\n        stack.pop();\n      } else {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n}\n"
      ]
    }
  },
  "JSONTestLanguages": [
    "javascript",
    "cpp",
    "python",
    "java",
    "csharp",
    "go",
    "swift",
    "typescript"
  ],
  "JSONTests": [
    {
      "string": "([])(){}(())()()"
    },
    {
      "string": "()[]{}{"
    },
    {
      "string": "(((((({{{{{[[[[[([)])]]]]]}}}}}))))))"
    },
    {
      "string": "()()[{()})]"
    },
    {
      "string": "(()())((()()()))"
    },
    {
      "string": "{}()"
    },
    {
      "string": "()([])"
    },
    {
      "string": "((){{{{[]}}}})"
    },
    {
      "string": "((({})()))"
    },
    {
      "string": "(([]()()){})"
    },
    {
      "string": "(((((([[[[[[{{{{{{{{{{{{()}}}}}}}}}}}}]]]]]]))))))((([])({})[])[])[]([]){}(())"
    },
    {
      "string": "{[[[[({(}))]]]]}"
    },
    {
      "string": "[((([])([]){}){}){}([])[]((())"
    },
    {
      "string": ")[]}"
    }
  ],
  "JSONAnswers": [
    [
      true,
      false,
      false,
      false,
      true,
      true,
      true,
      true,
      true,
      true,
      true,
      false,
      false,
      false
    ]
  ]
}