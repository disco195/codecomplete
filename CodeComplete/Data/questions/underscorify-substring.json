{
  "Summary": {
    "Name": "Underscorify Substring",
    "Category": "Strings",
    "Difficulty": 3,
    "Available": true,
    "Metadata": {
      "number": 5,
      "timeOne": 0,
      "timeTwo": 2434,
      "url": "https://player.vimeo.com/video/226841994"
    }
  },
  "Prompt": "",
  "Hints": "The first thing you need to do to solve this question is to get the locations of all instances of the substring in the main string. Try traversing the main string one character at a time and calling whatever substring-matching function is built into the language you're working in. Store a 2D array of locations, where each subarray holds the starting and ending indices of a specific instance of the substring in the main string.\nThe second thing you need to do is to \"collapse\" the 2D array mentioned in Hint #1. In essence, you need to merge the locations of substrings that overlap each other or sit next to each other. Traverse the 2D array mentioned in Hint #1 and build a new 2D array that holds these \"collapsed\" locations.\nFinally, you need to create a new string with underscores added in the correct positions. Construct this new string by traversing the main string and the 2D array mentioned in Hint #2 at the same time. You might have to keep track of when you are \"in between\" underscores in order to correctly traverse the 2D array.\n",
  "SpaceTime": "O(n*m) | O(n) space - where n is the length of the main string and m is the length of the substring\n",
  "PromptHTML": "<p>\n  Write a function that takes in two strings: a main string and a potential\n  substring of the main string. The function should return a version of the main\n  string with every instance of the substring in it wrapped between underscores.\n</p>\n<p>\n  If two or more instances of the substring in the main string overlap each\n  other or sit side by side, the underscores relevant to these substrings should\n  only appear on the far left of the leftmost substring and on the far right of\n  the rightmost substring. If the main string doesn't contain the other string\n  at all, the function should return the main string intact.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">string</span> = \"testthis is a testtest to see if testestest it works\"\n<span class=\"CodeEditor-promptParameter\">substring</span> = \"test\"\n</pre>\n<h3>Sample Output</h3>\n<pre>\n\"_test_this is a _testtest_ to see if _testestest_ it works\"\n</pre>\n",
  "Notes": "",
  "IsLongOutput": false,
  "Visualization": {
    "inputType": null,
    "outputType": null
  },
  "CustomInputLanguages": [
    "javascript",
    "cpp",
    "python",
    "java",
    "csharp",
    "go",
    "swift",
    "typescript"
  ],
  "CustomInputVars": [
    {
      "Name": "string",
      "Example": "testthis is a testtest to see if testestest it works",
      "Schema": {
        "type": "string"
      }
    },
    {
      "Name": "substring",
      "Example": "test",
      "Schema": {
        "type": "string"
      }
    }
  ],
  "Resources": {
    "cpp": {
      "Language": "cpp",
      "StartingCode": "using namespace std;\n\nstring underscorifySubstring(string str, string subStr) {\n  // Write your code here.\n  return \"\";\n}\n",
      "StartingTest": "class ProgramTest : public TestSuite {\npublic:\n  void Run() {\n\n    RunTest(\"Test Case 1\", []() {\n      assert(\n          underscorifySubstring(\"this is a test to see if it works\", \"test\") ==\n          \"this is a _test_ to see if it works\");\n    });\n\n    RunTest(\"Test Case 2\", []() {\n      assert(underscorifySubstring(\"test this is a test to see if it works\",\n                                   \"test\") ==\n             \"_test_ this is a _test_ to see if it works\");\n    });\n\n    RunTest(\"Test Case 3\", []() {\n      assert(underscorifySubstring(\"testthis is a test to see if it works\",\n                                   \"test\") ==\n             \"_test_this is a _test_ to see if it works\");\n    });\n\n    RunTest(\"Test Case 4\", []() {\n      assert(\n          underscorifySubstring(\n              \"testthis is a testest to see if testestes it works\", \"test\") ==\n          \"_test_this is a _testest_ to see if _testest_es it works\");\n    });\n\n    RunTest(\"Test Case 5\", []() {\n      assert(\n          underscorifySubstring(\n              \"testthis is a testtest to see if testestest it works\", \"test\") ==\n          \"_test_this is a _testtest_ to see if _testestest_ it works\");\n    });\n\n    RunTest(\"Test Case 6\", []() {\n      assert(underscorifySubstring(\"this is a test to see if it works and test\",\n                                   \"test\") ==\n             \"this is a _test_ to see if it works and _test_\");\n    });\n\n    RunTest(\"Test Case 7\", []() {\n      assert(underscorifySubstring(\"this is a test to see if it works and test\",\n                                   \"bfjawkfja\") ==\n             \"this is a test to see if it works and test\");\n    });\n\n    RunTest(\"Test Case 8\", []() {\n      assert(underscorifySubstring(\"ttttttttttttttbtttttctatawtatttttastvb\",\n                                   \"ttt\") ==\n             \"_tttttttttttttt_b_ttttt_ctatawta_ttttt_astvb\");\n    });\n\n    RunTest(\"Test Case 9\", []() {\n      assert(underscorifySubstring(\"tzttztttz\", \"ttt\") == \"tzttz_ttt_z\");\n    });\n\n    RunTest(\"Test Case 10\", []() {\n      assert(\n          underscorifySubstring(\"abababababababababababababaababaaabbababaa\",\n                                \"a\") ==\n          \"_a_b_a_b_a_b_a_b_a_b_a_b_a_b_a_b_a_b_a_b_a_b_a_b_a_b_aa_b_a_b_aaa_\"\n          \"bb_a_b_a_b_aa_\");\n    });\n\n    RunTest(\"Test Case 11\", []() {\n      assert(underscorifySubstring(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabc\",\n                                   \"abc\") ==\n             \"_abcabcabcabcabcabcabcabcabcabcabcabcabcabc_\");\n    });\n  }\n};\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\npublic:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      assert(\n          underscorifySubstring(\n              \"testthis is a testtest to see if testestest it works\", \"test\") ==\n          \"_test_this is a _testtest_ to see if _testestest_ it works\");\n    });\n  }\n};\n",
      "Solutions": [
        "// Copyright Â© 2020 Code Complete. All rights reserved.\n\n#include <vector>\n#include <numeric>\nusing namespace std;\n\nvector<vector<int>> getLocations(string str, string subStr);\nvector<vector<int>> collapse(vector<vector<int>> locations);\nstring underscorify(string str, vector<vector<int>> locations);\n\n// O(n*m) | O(n) space\nstring underscorifySubstring(string str, string subStr) {\n  vector<vector<int>> locations = collapse(getLocations(str, subStr));\n  return underscorify(str, locations);\n}\n\nvector<vector<int>> getLocations(string str, string subStr) {\n  vector<vector<int>> locations{};\n  int startIdx = 0;\n  while (startIdx < str.length()) {\n    int nextIdx = str.find(subStr, startIdx);\n    if (nextIdx != string::npos) {\n      locations.push_back(vector<int>{nextIdx, int(nextIdx + subStr.length())});\n      startIdx = nextIdx + 1;\n    } else {\n      break;\n    }\n  }\n  return locations;\n}\n\nvector<vector<int>> collapse(vector<vector<int>> locations) {\n  if (locations.empty()) {\n    return locations;\n  }\n  vector<vector<int>> newLocations{locations[0]};\n  vector<int> *previous = &newLocations[0];\n  for (int i = 1; i < locations.size(); i++) {\n    vector<int> *current = &locations[i];\n    if (current->at(0) <= previous->at(1)) {\n      previous->at(1) = current->at(1);\n    } else {\n      newLocations.push_back(*current);\n      previous = &newLocations[newLocations.size() - 1];\n    }\n  }\n  return newLocations;\n}\n\nstring underscorify(string str, vector<vector<int>> locations) {\n  int locationsIdx = 0;\n  int stringIdx = 0;\n  bool inBetweenUnderscores = false;\n  vector<string> finalChars{};\n  int i = 0;\n  while (stringIdx < str.length() && locationsIdx < locations.size()) {\n    if (stringIdx == locations[locationsIdx][i]) {\n      finalChars.push_back(\"_\");\n      inBetweenUnderscores = !inBetweenUnderscores;\n      if (!inBetweenUnderscores) {\n        locationsIdx++;\n      }\n      i = i == 1 ? 0 : 1;\n    }\n    string s(1, str[stringIdx]);\n    finalChars.push_back(s);\n    stringIdx++;\n  }\n  if (locationsIdx < locations.size()) {\n    finalChars.push_back(\"_\");\n  } else if (stringIdx < str.length()) {\n    finalChars.push_back(str.substr(stringIdx));\n  }\n  return accumulate(finalChars.begin(), finalChars.end(), string());\n}\n"
      ]
    },
    "csharp": {
      "Language": "csharp",
      "StartingCode": "public class Program {\n\tpublic static string UnderscorifySubstring(string str, string substring) {\n\t\t// Write your code here.\n\t\treturn null;\n\t}\n}\n",
      "StartingTest": "public class ProgramTest {\n\t[Test]\n\tpublic void TestCase1() {\n\t\tstring expected = \"this is a _test_ to see if it works\";\n\t\tstring output = Program.UnderscorifySubstring(\"this is a test to see if it works\",\n\t\t    \"test\");\n\t\tUtils.AssertTrue(expected.Equals(output));\n\t}\n\n\t[Test]\n\tpublic void TestCase2() {\n\t\tstring expected = \"_test_ this is a _test_ to see if it works\";\n\t\tstring output = Program.UnderscorifySubstring(\n\t\t\t\"test this is a test to see if it works\", \"test\");\n\t\tUtils.AssertTrue(expected.Equals(output));\n\t}\n\n\t[Test]\n\tpublic void TestCase3() {\n\t\tstring expected = \"_test_this is a _test_ to see if it works\";\n\t\tstring output = Program.UnderscorifySubstring(\n\t\t\t\"testthis is a test to see if it works\", \"test\");\n\t\tUtils.AssertTrue(expected.Equals(output));\n\t}\n\n\t[Test]\n\tpublic void TestCase4() {\n\t\tstring expected = \"_test_this is a _testest_ to see if _testest_es it works\";\n\t\tstring output = Program.UnderscorifySubstring(\n\t\t\t\"testthis is a testest to see if testestes it works\", \"test\");\n\t\tUtils.AssertTrue(expected.Equals(output));\n\t}\n\n\t[Test]\n\tpublic void TestCase5() {\n\t\tstring expected = \"_test_this is a _testtest_ to see if _testestest_ it works\";\n\t\tstring output = Program.UnderscorifySubstring(\n\t\t\t\"testthis is a testtest to see if testestest it works\", \"test\");\n\t\tUtils.AssertTrue(expected.Equals(output));\n\t}\n\n\t[Test]\n\tpublic void TestCase6() {\n\t\tstring expected = \"this is a _test_ to see if it works and _test_\";\n\t\tstring output = Program.UnderscorifySubstring(\n\t\t\t\"this is a test to see if it works and test\", \"test\");\n\t\tUtils.AssertTrue(expected.Equals(output));\n\t}\n\n\t[Test]\n\tpublic void TestCase7() {\n\t\tstring expected = \"this is a test to see if it works and test\";\n\t\tstring output = Program.UnderscorifySubstring(\n\t\t\t\"this is a test to see if it works and test\", \"bfjawkfja\");\n\t\tUtils.AssertTrue(expected.Equals(output));\n\t}\n\n\t[Test]\n\tpublic void TestCase8() {\n\t\tstring expected = \"_tttttttttttttt_b_ttttt_ctatawta_ttttt_astvb\";\n\t\tstring output = Program.UnderscorifySubstring(\n\t\t\t\"ttttttttttttttbtttttctatawtatttttastvb\", \"ttt\");\n\t\tUtils.AssertTrue(expected.Equals(output));\n\t}\n\n\t[Test]\n\tpublic void TestCase9() {\n\t\tstring expected = \"tzttz_ttt_z\";\n\t\tstring output = Program.UnderscorifySubstring(\"tzttztttz\", \"ttt\");\n\t\tUtils.AssertTrue(expected.Equals(output));\n\t}\n\n\t[Test]\n\tpublic void TestCase10() {\n\t\tstring expected =\n\t\t  \"_a_b_a_b_a_b_a_b_a_b_a_b_a_b_a_b_a_b_a_b_a_b_a_b_a_b_aa_b_a_b_aaa_bb_a_b_a_b_aa_\";\n\t\tstring output = Program.UnderscorifySubstring(\n\t\t\t\"abababababababababababababaababaaabbababaa\", \"a\");\n\t\tUtils.AssertTrue(expected.Equals(output));\n\t}\n\n\t[Test]\n\tpublic void TestCase11() {\n\t\tstring expected = \"_abcabcabcabcabcabcabcabcabcabcabcabcabcabc_\";\n\t\tstring output = Program.UnderscorifySubstring(\n\t\t\t\"abcabcabcabcabcabcabcabcabcabcabcabcabcabc\", \"abc\");\n\t\tUtils.AssertTrue(expected.Equals(output));\n\t}\n}\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npublic class ProgramTest {\n\t[Test]\n\tpublic void TestCase1() {\n\t\tstring expected = \"_test_this is a _testtest_ to see if _testestest_ it works\";\n\t\tstring output = Program.UnderscorifySubstring(\n\t\t\t\"testthis is a testtest to see if testestest it works\", \"test\");\n\t\tUtils.AssertTrue(expected.Equals(output));\n\t}\n}\n",
      "Solutions": [
        "// Copyright Â© 2020 Code Complete. All rights reserved.\n\nusing System;\nusing System.Collections.Generic;\n\npublic class Program {\n\t// O(n*m) | O(n) space\n\tpublic static string UnderscorifySubstring(string str, string substring) {\n\t\tList<int[]> locations = collapse(getLocations(str, substring));\n\t\treturn underscorify(str, locations);\n\t}\n\n\tpublic static List<int[]> getLocations(string str, string substring) {\n\t\tList<int[]> locations = new List<int[]>();\n\t\tint startIdx = 0;\n\t\twhile (startIdx < str.Length) {\n\t\t\tint nextIdx = str.IndexOf(substring, startIdx);\n\t\t\tif (nextIdx != -1) {\n\t\t\t\tlocations.Add(new int[] {nextIdx, nextIdx + substring.Length});\n\t\t\t\tstartIdx = nextIdx + 1;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn locations;\n\t}\n\n\tpublic static List<int[]> collapse(List<int[]> locations) {\n\t\tif (locations.Count == 0) {\n\t\t\treturn locations;\n\t\t}\n\t\tList<int[]> newLocations = new List<int[]>();\n\t\tnewLocations.Add(locations[0]);\n\t\tint[] previous = newLocations[0];\n\t\tfor (int i = 1; i < locations.Count; i++) {\n\t\t\tint[] current = locations[i];\n\t\t\tif (current[0] <= previous[1]) {\n\t\t\t\tprevious[1] = current[1];\n\t\t\t} else {\n\t\t\t\tnewLocations.Add(current);\n\t\t\t\tprevious = current;\n\t\t\t}\n\t\t}\n\t\treturn newLocations;\n\t}\n\n\tpublic static string underscorify(string str, List<int[]> locations) {\n\t\tint locationsIdx = 0;\n\t\tint stringIdx = 0;\n\t\tbool inBetweenUnderscores = false;\n\t\tList<string> finalChars = new List<string>();\n\t\tint i = 0;\n\t\twhile (stringIdx < str.Length && locationsIdx < locations.Count) {\n\t\t\tif (stringIdx == locations[locationsIdx][i]) {\n\t\t\t\tfinalChars.Add(\"_\");\n\t\t\t\tinBetweenUnderscores = !inBetweenUnderscores;\n\t\t\t\tif (!inBetweenUnderscores) {\n\t\t\t\t\tlocationsIdx++;\n\t\t\t\t}\n\t\t\t\ti = i == 1 ? 0 : 1;\n\t\t\t}\n\t\t\tfinalChars.Add(str[stringIdx].ToString());\n\t\t\tstringIdx += 1;\n\t\t}\n\t\tif (locationsIdx < locations.Count) {\n\t\t\tfinalChars.Add(\"_\");\n\t\t} else if (stringIdx < str.Length) {\n\t\t\tfinalChars.Add(str.Substring(stringIdx));\n\t\t}\n\t\treturn String.Join(\"\", finalChars);\n\t}\n}\n"
      ]
    },
    "go": {
      "Language": "go",
      "StartingCode": "package main\n\nfunc UnderscorifySubstring(str string, substring string) string {\n\t// Write your code here.\n\treturn \"\"\n}\n",
      "StartingTest": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\texpected := \"this is a _test_ to see if it works\"\n\toutput := UnderscorifySubstring(\"this is a test to see if it works\", \"test\")\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase2(t *TestCase) {\n\texpected := \"_test_ this is a _test_ to see if it works\"\n\toutput := UnderscorifySubstring(\"test this is a test to see if it works\", \"test\")\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase3(t *TestCase) {\n\texpected := \"_test_this is a _test_ to see if it works\"\n\toutput := UnderscorifySubstring(\"testthis is a test to see if it works\", \"test\")\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase4(t *TestCase) {\n\texpected := \"_test_this is a _testest_ to see if _testest_es it works\"\n\toutput := UnderscorifySubstring(\"testthis is a testest to see if testestes it works\", \"test\")\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase5(t *TestCase) {\n\texpected := \"_test_this is a _testtest_ to see if _testestest_ it works\"\n\toutput := UnderscorifySubstring(\"testthis is a testtest to see if testestest it works\", \"test\")\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase6(t *TestCase) {\n\texpected := \"this is a _test_ to see if it works and _test_\"\n\toutput := UnderscorifySubstring(\"this is a test to see if it works and test\", \"test\")\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase7(t *TestCase) {\n\texpected := \"this is a test to see if it works and test\"\n\toutput := UnderscorifySubstring(\"this is a test to see if it works and test\", \"bfjawkfja\")\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase8(t *TestCase) {\n\texpected := \"_tttttttttttttt_b_ttttt_ctatawta_ttttt_astvb\"\n\toutput := UnderscorifySubstring(\"ttttttttttttttbtttttctatawtatttttastvb\", \"ttt\")\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase9(t *TestCase) {\n\texpected := \"tzttz_ttt_z\"\n\toutput := UnderscorifySubstring(\"tzttztttz\", \"ttt\")\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase10(t *TestCase) {\n\texpected := \"_a_b_a_b_a_b_a_b_a_b_a_b_a_b_a_b_a_b_a_b_a_b_a_b_a_b_aa_b_a_b_aaa_bb_a_b_a_b_aa_\"\n\toutput := UnderscorifySubstring(\"abababababababababababababaababaaabbababaa\", \"a\")\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase11(t *TestCase) {\n\texpected := \"_abcabcabcabcabcabcabcabcabcabcabcabcabcabc_\"\n\toutput := UnderscorifySubstring(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabc\", \"abc\")\n\trequire.Equal(t, expected, output)\n}\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\texpected := \"_test_this is a _testtest_ to see if _testestest_ it works\"\n\toutput := UnderscorifySubstring(\"testthis is a testtest to see if testestest it works\", \"test\")\n\trequire.Equal(t, expected, output)\n}\n",
      "Solutions": [
        "// Copyright Â© 2020 Code Complete. All rights reserved.\n\npackage main\n\nimport \"strings\"\n\ntype intervals []*interval\ntype interval struct {\n\tleft  int\n\tright int\n}\n\n// O(n*m) | O(n) space\nfunc UnderscorifySubstring(str string, substring string) string {\n\tlocations := getLocations(str, substring)\n\tlocations = locations.collapse()\n\treturn underscorify(str, locations)\n}\n\nfunc getLocations(str, substring string) intervals {\n\tresult := intervals{}\n\tfor start := 0; start < len(str); {\n\t\tnextIndex := strings.Index(str[start:], substring)\n\t\tif nextIndex == -1 {\n\t\t\tbreak\n\t\t}\n\t\tnextIndex += start\n\t\tresult = append(result, &interval{nextIndex, nextIndex + len(substring)})\n\t\tstart = nextIndex + 1\n\t}\n\treturn result\n}\n\nfunc (array intervals) collapse() intervals {\n\t// If the array is empty, nothing to do\n\tif len(array) == 0 {\n\t\treturn array\n\t}\n\n\tresult := intervals{array[0]}\n\tprevious := array[0]\n\tfor i := 1; i < len(array); i++ {\n\t\tcurrent := array[i]\n\t\tif current.left <= previous.right {\n\t\t\t// Collapse the two intervals\n\t\t\tprevious.right = current.right\n\t\t} else {\n\t\t\tresult = append(result, current)\n\t\t\tprevious = current\n\t\t}\n\t}\n\treturn result\n}\n\nfunc underscorify(str string, locations intervals) string {\n\tif len(locations) == 0 {\n\t\treturn str\n\t}\n\n\t// We know the resulting string will have an additional 2*len(intervals)\n\t// characters\n\tresult := make([]rune, len(str)+2*len(locations))\n\tresultIndex := 0\n\tlocationIndex := 0\n\tfor i, r := range str {\n\t\tlocation := locations[locationIndex]\n\t\tif i == location.left {\n\t\t\tresult[resultIndex] = '_'\n\t\t\tresultIndex += 1\n\t\t} else if i == location.right {\n\t\t\tresult[resultIndex] = '_'\n\t\t\tresultIndex += 1\n\t\t\tif locationIndex+1 < len(locations) {\n\t\t\t\tlocationIndex += 1\n\t\t\t}\n\t\t}\n\t\tresult[resultIndex] = r\n\t\tresultIndex += 1\n\t}\n\n\tif locations[locationIndex].right == len(str) {\n\t\tresult[len(result)-1] = '_'\n\t}\n\treturn string(result)\n}\n"
      ]
    },
    "java": {
      "Language": "java",
      "StartingCode": "import java.util.*;\n\nclass Program {\n  public static String underscorifySubstring(String str, String substring) {\n    // Write your code here.\n    return null;\n  }\n}\n",
      "StartingTest": "class ProgramTest {\n  @Test\n  public void TestCase1() {\n    String expected = \"this is a _test_ to see if it works\";\n    String output = Program.underscorifySubstring(\"this is a test to see if it works\", \"test\");\n    Utils.assertTrue(expected.equals(output));\n  }\n\n  @Test\n  public void TestCase2() {\n    String expected = \"_test_ this is a _test_ to see if it works\";\n    String output = Program.underscorifySubstring(\"test this is a test to see if it works\", \"test\");\n    Utils.assertTrue(expected.equals(output));\n  }\n\n  @Test\n  public void TestCase3() {\n    String expected = \"_test_this is a _test_ to see if it works\";\n    String output = Program.underscorifySubstring(\"testthis is a test to see if it works\", \"test\");\n    Utils.assertTrue(expected.equals(output));\n  }\n\n  @Test\n  public void TestCase4() {\n    String expected = \"_test_this is a _testest_ to see if _testest_es it works\";\n    String output =\n        Program.underscorifySubstring(\"testthis is a testest to see if testestes it works\", \"test\");\n    Utils.assertTrue(expected.equals(output));\n  }\n\n  @Test\n  public void TestCase5() {\n    String expected = \"_test_this is a _testtest_ to see if _testestest_ it works\";\n    String output =\n        Program.underscorifySubstring(\n            \"testthis is a testtest to see if testestest it works\", \"test\");\n    Utils.assertTrue(expected.equals(output));\n  }\n\n  @Test\n  public void TestCase6() {\n    String expected = \"this is a _test_ to see if it works and _test_\";\n    String output =\n        Program.underscorifySubstring(\"this is a test to see if it works and test\", \"test\");\n    Utils.assertTrue(expected.equals(output));\n  }\n\n  @Test\n  public void TestCase7() {\n    String expected = \"this is a test to see if it works and test\";\n    String output =\n        Program.underscorifySubstring(\"this is a test to see if it works and test\", \"bfjawkfja\");\n    Utils.assertTrue(expected.equals(output));\n  }\n\n  @Test\n  public void TestCase8() {\n    String expected = \"_tttttttttttttt_b_ttttt_ctatawta_ttttt_astvb\";\n    String output = Program.underscorifySubstring(\"ttttttttttttttbtttttctatawtatttttastvb\", \"ttt\");\n    Utils.assertTrue(expected.equals(output));\n  }\n\n  @Test\n  public void TestCase9() {\n    String expected = \"tzttz_ttt_z\";\n    String output = Program.underscorifySubstring(\"tzttztttz\", \"ttt\");\n    Utils.assertTrue(expected.equals(output));\n  }\n\n  @Test\n  public void TestCase10() {\n    String expected =\n        \"_a_b_a_b_a_b_a_b_a_b_a_b_a_b_a_b_a_b_a_b_a_b_a_b_a_b_aa_b_a_b_aaa_bb_a_b_a_b_aa_\";\n    String output =\n        Program.underscorifySubstring(\"abababababababababababababaababaaabbababaa\", \"a\");\n    Utils.assertTrue(expected.equals(output));\n  }\n\n  @Test\n  public void TestCase11() {\n    String expected = \"_abcabcabcabcabcabcabcabcabcabcabcabcabcabc_\";\n    String output =\n        Program.underscorifySubstring(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabc\", \"abc\");\n    Utils.assertTrue(expected.equals(output));\n  }\n}\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    String expected = \"_test_this is a _testtest_ to see if _testestest_ it works\";\n    String output =\n        Program.underscorifySubstring(\n            \"testthis is a testtest to see if testestest it works\", \"test\");\n    Utils.assertTrue(expected.equals(output));\n  }\n}\n",
      "Solutions": [
        "// Copyright Â© 2020 Code Complete. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(n*m) | O(n) space\n  public static String underscorifySubstring(String str, String substring) {\n    List<Integer[]> locations = collapse(getLocations(str, substring));\n    return underscorify(str, locations);\n  }\n\n  public static List<Integer[]> getLocations(String str, String substring) {\n    List<Integer[]> locations = new ArrayList<Integer[]>();\n    int startIdx = 0;\n    while (startIdx < str.length()) {\n      int nextIdx = str.indexOf(substring, startIdx);\n      if (nextIdx != -1) {\n        locations.add(new Integer[] {nextIdx, nextIdx + substring.length()});\n        startIdx = nextIdx + 1;\n      } else {\n        break;\n      }\n    }\n    return locations;\n  }\n\n  public static List<Integer[]> collapse(List<Integer[]> locations) {\n    if (locations.size() == 0) {\n      return locations;\n    }\n    List<Integer[]> newLocations = new ArrayList<Integer[]>();\n    newLocations.add(locations.get(0));\n    Integer[] previous = newLocations.get(0);\n    for (int i = 1; i < locations.size(); i++) {\n      Integer[] current = locations.get(i);\n      if (current[0] <= previous[1]) {\n        previous[1] = current[1];\n      } else {\n        newLocations.add(current);\n        previous = current;\n      }\n    }\n    return newLocations;\n  }\n\n  public static String underscorify(String str, List<Integer[]> locations) {\n    int locationsIdx = 0;\n    int stringIdx = 0;\n    boolean inBetweenUnderscores = false;\n    List<String> finalChars = new ArrayList<String>();\n    int i = 0;\n    while (stringIdx < str.length() && locationsIdx < locations.size()) {\n      if (stringIdx == locations.get(locationsIdx)[i]) {\n        finalChars.add(\"_\");\n        inBetweenUnderscores = !inBetweenUnderscores;\n        if (!inBetweenUnderscores) {\n          locationsIdx++;\n        }\n        i = i == 1 ? 0 : 1;\n      }\n      finalChars.add(String.valueOf(str.charAt(stringIdx)));\n      stringIdx += 1;\n    }\n    if (locationsIdx < locations.size()) {\n      finalChars.add(\"_\");\n    } else if (stringIdx < str.length()) {\n      finalChars.add(str.substring(stringIdx));\n    }\n    return String.join(\"\", finalChars);\n  }\n}\n"
      ]
    },
    "javascript": {
      "Language": "javascript",
      "StartingCode": "function underscorifySubstring(string, substring) {\n  // Write your code here.\n}\n\n// Do not edit the line below.\nexports.underscorifySubstring = underscorifySubstring;\n",
      "StartingTest": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai\n    .expect(program.underscorifySubstring('this is a test to see if it works', 'test'))\n    .to.deep.equal('this is a _test_ to see if it works');\n});\n\nit('Test Case #2', function () {\n  chai\n    .expect(program.underscorifySubstring('test this is a test to see if it works', 'test'))\n    .to.deep.equal('_test_ this is a _test_ to see if it works');\n});\n\nit('Test Case #3', function () {\n  chai\n    .expect(program.underscorifySubstring('testthis is a test to see if it works', 'test'))\n    .to.deep.equal('_test_this is a _test_ to see if it works');\n});\n\nit('Test Case #4', function () {\n  chai\n    .expect(program.underscorifySubstring('testthis is a testest to see if testestes it works', 'test'))\n    .to.deep.equal('_test_this is a _testest_ to see if _testest_es it works');\n});\n\nit('Test Case #5', function () {\n  chai\n    .expect(program.underscorifySubstring('testthis is a testtest to see if testestest it works', 'test'))\n    .to.deep.equal('_test_this is a _testtest_ to see if _testestest_ it works');\n});\n\nit('Test Case #6', function () {\n  chai\n    .expect(program.underscorifySubstring('this is a test to see if it works and test', 'test'))\n    .to.deep.equal('this is a _test_ to see if it works and _test_');\n});\n\nit('Test Case #7', function () {\n  chai\n    .expect(program.underscorifySubstring('this is a test to see if it works and test', 'bfjawkfja'))\n    .to.deep.equal('this is a test to see if it works and test');\n});\n\nit('Test Case #8', function () {\n  chai\n    .expect(program.underscorifySubstring('ttttttttttttttbtttttctatawtatttttastvb', 'ttt'))\n    .to.deep.equal('_tttttttttttttt_b_ttttt_ctatawta_ttttt_astvb');\n});\n\nit('Test Case #9', function () {\n  chai.expect(program.underscorifySubstring('tzttztttz', 'ttt')).to.deep.equal('tzttz_ttt_z');\n});\n\nit('Test Case #10', function () {\n  chai\n    .expect(program.underscorifySubstring('abababababababababababababaababaaabbababaa', 'a'))\n    .to.deep.equal('_a_b_a_b_a_b_a_b_a_b_a_b_a_b_a_b_a_b_a_b_a_b_a_b_a_b_aa_b_a_b_aaa_bb_a_b_a_b_aa_');\n});\n\nit('Test Case #11', function () {\n  chai\n    .expect(program.underscorifySubstring('abcabcabcabcabcabcabcabcabcabcabcabcabcabc', 'abc'))\n    .to.deep.equal('_abcabcabcabcabcabcabcabcabcabcabcabcabcabc_');\n});\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai\n    .expect(program.underscorifySubstring('testthis is a testtest to see if testestest it works', 'test'))\n    .to.deep.equal('_test_this is a _testtest_ to see if _testestest_ it works');\n});\n",
      "Solutions": [
        "// Copyright Â© 2020 Code Complete. All rights reserved.\n\n// O(n*m) | O(n) space\nfunction underscorifySubstring(string, substring) {\n  const locations = collapse(getLocations(string, substring));\n  return underscorify(string, locations);\n}\n\nfunction getLocations(string, substring) {\n  const locations = [];\n  let startIdx = 0;\n  while (startIdx < string.length) {\n    const nextIdx = string.indexOf(substring, startIdx);\n    if (nextIdx !== -1) {\n      locations.push([nextIdx, nextIdx + substring.length]);\n      startIdx = nextIdx + 1;\n    } else {\n      break;\n    }\n  }\n  return locations;\n}\n\nfunction collapse(locations) {\n  if (!locations.length) return locations;\n  const newLocations = [locations[0]];\n  let previous = newLocations[0];\n  for (let i = 1; i < locations.length; i++) {\n    const current = locations[i];\n    if (current[0] <= previous[1]) {\n      previous[1] = current[1];\n    } else {\n      newLocations.push(current);\n      previous = current;\n    }\n  }\n  return newLocations;\n}\n\nfunction underscorify(string, locations) {\n  let locationsIdx = 0;\n  let stringIdx = 0;\n  let inBetweenUnderscores = false;\n  const finalChars = [];\n  let i = 0;\n  while (stringIdx < string.length && locationsIdx < locations.length) {\n    if (stringIdx === locations[locationsIdx][i]) {\n      finalChars.push('_');\n      inBetweenUnderscores = !inBetweenUnderscores;\n      if (!inBetweenUnderscores) locationsIdx++;\n      i = i === 1 ? 0 : 1;\n    }\n    finalChars.push(string[stringIdx]);\n    stringIdx++;\n  }\n  if (locationsIdx < locations.length) {\n    finalChars.push('_');\n  } else if (stringIdx < string.length) {\n    finalChars.push(string.slice(stringIdx));\n  }\n  return finalChars.join('');\n}\n\nexports.underscorifySubstring = underscorifySubstring;\n"
      ]
    },
    "python": {
      "Language": "python",
      "StartingCode": "def underscorifySubstring(string, substring):\n    # Write your code here.\n    pass\n",
      "StartingTest": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(\n            program.underscorifySubstring(\"this is a test to see if it works\", \"test\"),\n            \"this is a _test_ to see if it works\",\n        )\n\n    def test_case_2(self):\n        self.assertEqual(\n            program.underscorifySubstring(\"test this is a test to see if it works\", \"test\"),\n            \"_test_ this is a _test_ to see if it works\",\n        )\n\n    def test_case_3(self):\n        self.assertEqual(\n            program.underscorifySubstring(\"testthis is a test to see if it works\", \"test\"),\n            \"_test_this is a _test_ to see if it works\",\n        )\n\n    def test_case_4(self):\n        self.assertEqual(\n            program.underscorifySubstring(\"testthis is a testest to see if testestes it works\", \"test\"),\n            \"_test_this is a _testest_ to see if _testest_es it works\",\n        )\n\n    def test_case_5(self):\n        self.assertEqual(\n            program.underscorifySubstring(\"testthis is a testtest to see if testestest it works\", \"test\"),\n            \"_test_this is a _testtest_ to see if _testestest_ it works\",\n        )\n\n    def test_case_6(self):\n        self.assertEqual(\n            program.underscorifySubstring(\"this is a test to see if it works and test\", \"test\"),\n            \"this is a _test_ to see if it works and _test_\",\n        )\n\n    def test_case_7(self):\n        self.assertEqual(\n            program.underscorifySubstring(\"this is a test to see if it works and test\", \"bfjawkfja\"),\n            \"this is a test to see if it works and test\",\n        )\n\n    def test_case_8(self):\n        self.assertEqual(\n            program.underscorifySubstring(\"ttttttttttttttbtttttctatawtatttttastvb\", \"ttt\"),\n            \"_tttttttttttttt_b_ttttt_ctatawta_ttttt_astvb\",\n        )\n\n    def test_case_9(self):\n        self.assertEqual(program.underscorifySubstring(\"tzttztttz\", \"ttt\"), \"tzttz_ttt_z\")\n\n    def test_case_10(self):\n        self.assertEqual(\n            program.underscorifySubstring(\"abababababababababababababaababaaabbababaa\", \"a\"),\n            \"_a_b_a_b_a_b_a_b_a_b_a_b_a_b_a_b_a_b_a_b_a_b_a_b_a_b_aa_b_a_b_aaa_bb_a_b_a_b_aa_\",\n        )\n\n    def test_case_11(self):\n        self.assertEqual(\n            program.underscorifySubstring(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabc\", \"abc\"),\n            \"_abcabcabcabcabcabcabcabcabcabcabcabcabcabc_\",\n        )\n",
      "SandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(\n            program.underscorifySubstring(\"testthis is a testtest to see if testestest it works\", \"test\"),\n            \"_test_this is a _testtest_ to see if _testestest_ it works\",\n        )\n",
      "Solutions": [
        "# Copyright Â© 2020 Code Complete. All rights reserved.\n\n# O(n*m) | O(n) space\ndef underscorifySubstring(string, substring):\n    locations = collapse(getLocations(string, substring))\n    return underscorify(string, locations)\n\n\ndef getLocations(string, substring):\n    locations = []\n    startIdx = 0\n    while startIdx < len(string):\n        nextIdx = string.find(substring, startIdx)\n        if nextIdx != -1:\n            locations.append([nextIdx, nextIdx + len(substring)])\n            startIdx = nextIdx + 1\n        else:\n            break\n    return locations\n\n\ndef collapse(locations):\n    if not len(locations):\n        return locations\n    newLocations = [locations[0]]\n    previous = newLocations[0]\n    for i in range(1, len(locations)):\n        current = locations[i]\n        if current[0] <= previous[1]:\n            previous[1] = current[1]\n        else:\n            newLocations.append(current)\n            previous = current\n    return newLocations\n\n\ndef underscorify(string, locations):\n    locationsIdx = 0\n    stringIdx = 0\n    inBetweenUnderscores = False\n    finalChars = []\n    i = 0\n    while stringIdx < len(string) and locationsIdx < len(locations):\n        if stringIdx == locations[locationsIdx][i]:\n            finalChars.append(\"_\")\n            inBetweenUnderscores = not inBetweenUnderscores\n            if not inBetweenUnderscores:\n                locationsIdx += 1\n            i = 0 if i == 1 else 1\n        finalChars.append(string[stringIdx])\n        stringIdx += 1\n    if locationsIdx < len(locations):\n        finalChars.append(\"_\")\n    elif stringIdx < len(string):\n        finalChars.append(string[stringIdx:])\n    return \"\".join(finalChars)\n"
      ]
    },
    "swift": {
      "Language": "swift",
      "StartingCode": "class Program {\n  func underscorifySubstring(_ string: String, _ substring: String) -> String {\n    // Write your code here.\n    return \"\"\n  }\n}\n",
      "StartingTest": "class ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      try assertEqual(\"this is a _test_ to see if it works\", program.underscorifySubstring(\"this is a test to see if it works\", \"test\"))\n    }\n    runTest(\"Test Case 2\") { () throws -> Void in\n      try assertEqual(\"_test_ this is a _test_ to see if it works\", program.underscorifySubstring(\"test this is a test to see if it works\", \"test\"))\n    }\n    runTest(\"Test Case 3\") { () throws -> Void in\n      try assertEqual(\"_test_this is a _test_ to see if it works\", program.underscorifySubstring(\"testthis is a test to see if it works\", \"test\"))\n    }\n    runTest(\"Test Case 4\") { () throws -> Void in\n      try assertEqual(\"_test_this is a _testest_ to see if _testest_es it works\", program.underscorifySubstring(\"testthis is a testest to see if testestes it works\", \"test\"))\n    }\n    runTest(\"Test Case 5\") { () throws -> Void in\n      try assertEqual(\"_test_this is a _testtest_ to see if _testestest_ it works\", program.underscorifySubstring(\"testthis is a testtest to see if testestest it works\", \"test\"))\n    }\n    runTest(\"Test Case 6\") { () throws -> Void in\n      try assertEqual(\"this is a _test_ to see if it works and _test_\", program.underscorifySubstring(\"this is a test to see if it works and test\", \"test\"))\n    }\n    runTest(\"Test Case 7\") { () throws -> Void in\n      try assertEqual(\"this is a test to see if it works and test\", program.underscorifySubstring(\"this is a test to see if it works and test\", \"bfjawkfja\"))\n    }\n    runTest(\"Test Case 8\") { () throws -> Void in\n      try assertEqual(\"_tttttttttttttt_b_ttttt_ctatawta_ttttt_astvb\", program.underscorifySubstring(\"ttttttttttttttbtttttctatawtatttttastvb\", \"ttt\"))\n    }\n    runTest(\"Test Case 9\") { () throws -> Void in\n      try assertEqual(\"tzttz_ttt_z\", program.underscorifySubstring(\"tzttztttz\", \"ttt\"))\n    }\n    runTest(\"Test Case 10\") { () throws -> Void in\n      try assertEqual(\"_a_b_a_b_a_b_a_b_a_b_a_b_a_b_a_b_a_b_a_b_a_b_a_b_a_b_aa_b_a_b_aaa_bb_a_b_a_b_aa_\", program.underscorifySubstring(\"abababababababababababababaababaaabbababaa\", \"a\"))\n    }\n    runTest(\"Test Case 11\") { () throws -> Void in\n      try assertEqual(\"_abcabcabcabcabcabcabcabcabcabcabcabcabcabc_\", program.underscorifySubstring(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabc\", \"abc\"))\n    }\n  }\n}\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      try assertEqual(\"_test_this is a _testtest_ to see if _testestest_ it works\", program.underscorifySubstring(\"testthis is a testtest to see if testestest it works\", \"test\"))\n    }\n  }\n}\n",
      "Solutions": [
        "// Copyright Â© 2020 Code Complete. All rights reserved.\n\nclass Program {\n  // O(n + m) time | O(n) space\n  func underscorifySubstring(_ string: String, _ substring: String) -> String {\n    let locations = getLocations(string, substring)\n    let collapsedLocations = collapse(locations)\n\n    return underscorify(string, collapsedLocations)\n  }\n\n  func getLocations(_ string: String, _ substring: String) -> [[String.Index]] {\n    var locations = [[String.Index]]()\n\n    var start = 0\n    var startIndex = string.index(string.startIndex, offsetBy: start)\n\n    while start < string.count {\n      if let rangeOfSubstring = string.range(of: substring, options: [], range: startIndex ..< string.endIndex, locale: nil) {\n        locations.append([rangeOfSubstring.lowerBound, rangeOfSubstring.upperBound])\n\n        let startPos = string.distance(from: string.startIndex, to: rangeOfSubstring.lowerBound)\n        start = startPos + 1\n        startIndex = string.index(string.startIndex, offsetBy: start)\n      } else {\n        break\n      }\n    }\n\n    return locations\n  }\n\n  func collapse(_ locations: [[String.Index]]) -> [[String.Index]] {\n    if locations.count == 0 {\n      return locations\n    }\n\n    var newLocations = [locations[0]]\n    var previousLocationIndex = 0\n    for i in 1 ..< locations.count {\n      let currentLocation = locations[i]\n\n      if currentLocation[0] <= newLocations[previousLocationIndex][1] {\n        newLocations[previousLocationIndex][1] = currentLocation[1]\n      } else {\n        newLocations.append(currentLocation)\n        previousLocationIndex += 1\n      }\n    }\n\n    return newLocations\n  }\n\n  func underscorify(_ string: String, _ locations: [[String.Index]]) -> String {\n    var subIndex = 0\n    var stringIndex = 0\n    var locationIndex = 0\n    var isInBetweenUnderscres = false\n    var currentIndex = string.index(string.startIndex, offsetBy: stringIndex)\n\n    var finalCharacters = [Character]()\n\n    while stringIndex < string.count, locationIndex < locations.count {\n      currentIndex = string.index(string.startIndex, offsetBy: stringIndex)\n\n      if currentIndex == locations[locationIndex][subIndex] {\n        finalCharacters.append(\"_\")\n\n        isInBetweenUnderscres = !isInBetweenUnderscres\n\n        if !isInBetweenUnderscres {\n          locationIndex += 1\n        }\n\n        if subIndex == 0 {\n          subIndex = 1\n        } else {\n          subIndex = 0\n        }\n      }\n\n      finalCharacters.append(string[currentIndex])\n      stringIndex += 1\n    }\n\n    if locationIndex < locations.count {\n      finalCharacters.append(\"_\")\n    } else if stringIndex < string.count {\n      currentIndex = string.index(string.startIndex, offsetBy: stringIndex)\n      let restOfCharacters = Array(string[currentIndex ..< string.endIndex])\n      finalCharacters.append(contentsOf: restOfCharacters)\n    }\n\n    let result = finalCharacters.compactMap { String($0) }.joined()\n    return result\n  }\n}\n"
      ]
    },
    "typescript": {
      "Language": "typescript",
      "StartingCode": "export function underscorifySubstring(string: string, substring: string) {\n  // Write your code here.\n  return '';\n}\n",
      "StartingTest": "",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  chai\n    .expect(program.underscorifySubstring('testthis is a testtest to see if testestest it works', 'test'))\n    .to.deep.equal('_test_this is a _testtest_ to see if _testestest_ it works');\n});\n",
      "Solutions": [
        "// Copyright Â© 2020 Code Complete. All rights reserved.\n\n// O(n*m) | O(n) space\nexport function underscorifySubstring(string: string, substring: string) {\n  const locations = collapse(getLocations(string, substring));\n  return underscorify(string, locations);\n}\n\nfunction getLocations(string: string, substring: string) {\n  const locations: number[][] = [];\n  let startIdx = 0;\n  while (startIdx < string.length) {\n    const nextIdx = string.indexOf(substring, startIdx);\n    if (nextIdx !== -1) {\n      locations.push([nextIdx, nextIdx + substring.length]);\n      startIdx = nextIdx + 1;\n    } else {\n      break;\n    }\n  }\n  return locations;\n}\n\nfunction collapse(locations: number[][]) {\n  if (!locations.length) return locations;\n  const newLocations = [locations[0]];\n  let previous = newLocations[0];\n  for (let i = 1; i < locations.length; i++) {\n    const current = locations[i];\n    if (current[0] <= previous[1]) {\n      previous[1] = current[1];\n    } else {\n      newLocations.push(current);\n      previous = current;\n    }\n  }\n  return newLocations;\n}\n\nfunction underscorify(string: string, locations: number[][]) {\n  let locationsIdx = 0;\n  let stringIdx = 0;\n  let inBetweenUnderscores = false;\n  const finalChars = [];\n  let i = 0;\n  while (stringIdx < string.length && locationsIdx < locations.length) {\n    if (stringIdx === locations[locationsIdx][i]) {\n      finalChars.push('_');\n      inBetweenUnderscores = !inBetweenUnderscores;\n      if (!inBetweenUnderscores) locationsIdx++;\n      i = i === 1 ? 0 : 1;\n    }\n    finalChars.push(string[stringIdx]);\n    stringIdx++;\n  }\n  if (locationsIdx < locations.length) {\n    finalChars.push('_');\n  } else if (stringIdx < string.length) {\n    finalChars.push(string.slice(stringIdx));\n  }\n  return finalChars.join('');\n}\n"
      ]
    }
  },
  "JSONTestLanguages": [
    "javascript",
    "cpp",
    "python",
    "java",
    "csharp",
    "go",
    "swift",
    "typescript"
  ],
  "JSONTests": [
    {
      "string": "testthis is a testtest to see if testestest it works",
      "substring": "test"
    },
    {
      "string": "this is a test to see if it works",
      "substring": "test"
    },
    {
      "string": "test this is a test to see if it works",
      "substring": "test"
    },
    {
      "string": "testthis is a test to see if it works",
      "substring": "test"
    },
    {
      "string": "testthis is a testest to see if testestes it works",
      "substring": "test"
    },
    {
      "string": "this is a test to see if it works and test",
      "substring": "test"
    },
    {
      "string": "this is a test to see if it works and test",
      "substring": "bfjawkfja"
    },
    {
      "string": "ttttttttttttttbtttttctatawtatttttastvb",
      "substring": "ttt"
    },
    {
      "string": "tzttztttz",
      "substring": "ttt"
    },
    {
      "string": "abababababababababababababaababaaabbababaa",
      "substring": "a"
    },
    {
      "string": "abcabcabcabcabcabcabcabcabcabcabcabcabcabc",
      "substring": "abc"
    }
  ],
  "JSONAnswers": [
    [
      "_test_this is a _testtest_ to see if _testestest_ it works",
      "this is a _test_ to see if it works",
      "_test_ this is a _test_ to see if it works",
      "_test_this is a _test_ to see if it works",
      "_test_this is a _testest_ to see if _testest_es it works",
      "this is a _test_ to see if it works and _test_",
      "this is a test to see if it works and test",
      "_tttttttttttttt_b_ttttt_ctatawta_ttttt_astvb",
      "tzttz_ttt_z",
      "_a_b_a_b_a_b_a_b_a_b_a_b_a_b_a_b_a_b_a_b_a_b_a_b_a_b_aa_b_a_b_aaa_bb_a_b_a_b_aa_",
      "_abcabcabcabcabcabcabcabcabcabcabcabcabcabc_"
    ]
  ]
}