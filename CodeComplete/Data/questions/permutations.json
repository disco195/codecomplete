{
  "Summary": {
    "Name": "Permutations",
    "Category": "Recursion",
    "Difficulty": 2,
    "Available": true,
    "Metadata": {
      "number": 602,
      "timeOne": 0,
      "timeTwo": 2271,
      "url": "https://player.vimeo.com/video/263747711"
    }
  },
  "Prompt": "",
  "Hints": "A permutation is defined as a way in which a set of things can be ordered. Thus, for the list [1, 2, 3], there exist some permutations starting with 1, some starting with 2, and some starting with 3. For the permutations starting with 1, there will be a permutation where 2 is the second number and one where 3 is the second number. For permutations starting with 3, there will be a permutation where 1 is the second number and one where 2 is the second number. The idea is that, in order to construct a permutation, we can pick a random number from our list to be the first number, then we can pick a random number from the remaining list (without the first number) to be the second number, then we can pick a random number from the remaining list (without the first and second numbers) to be the third number, and we can repeat the process until we exhaust all of our list of numbers. At that point, we will have constructed a valid permutation. How can we implement this construction algorithmically, without picking numbers at random?\nIterate through the list of numbers, and begin constructing new permutations starting with each number. For each permutation that you've begun constructing, remove the number already used (the first number of each permutation) from the list of numbers - you'll likely have to make copies of the original list. Repeat this process by recursively iterating through the mutated lists of numbers, appending numbers to the corresponding permutations you've already begun constructing and then removing those numbers from the respective mutated lists; repeat this until your mutated lists are empty, at which point your constructed permutations will be as big as the original list and will be valid permutations.\nDo you have to create so many mutated lists of numbers? Can you come up with an alternative approach that would allow you to only rely on the original list of numbers, without ever copying it and without removing numbers from it?\n",
  "SpaceTime": "O(n*n!) time | O(n*n!) space - where n is the length of the input array\n",
  "PromptHTML": "<p>\n  Write a function that takes in an array of unique integers and returns an\n  array of all permutations of those integers in no particular order.\n</p>\n<p>If the input array is empty, the function should return an empty array.</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">array</span> = [1, 2, 3]\n</pre>\n<h3>Sample Output</h3>\n<pre>\n[[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n</pre>\n",
  "Notes": "",
  "IsLongOutput": false,
  "Visualization": {
    "inputType": null,
    "outputType": null
  },
  "CustomInputLanguages": [
    "javascript",
    "cpp",
    "python",
    "java",
    "csharp",
    "go",
    "swift",
    "typescript"
  ],
  "CustomInputVars": [
    {
      "Name": "array",
      "Example": [
        1,
        2,
        3
      ],
      "Schema": {
        "items": {
          "type": "integer"
        },
        "type": "array",
        "uniqueItems": true
      }
    }
  ],
  "Resources": {
    "cpp": {
      "Language": "cpp",
      "StartingCode": "#include <vector>\nusing namespace std;\n\nvector<vector<int>> getPermutations(vector<int> array) {\n  // Write your code here.\n  return {};\n}\n",
      "StartingTest": "bool contains(vector<vector<int>> array1, vector<int> array2) {\n  for (vector<int> subArray : array1) {\n    if (array2 == subArray) {\n      return true;\n    }\n  }\n  return false;\n}\n\nclass ProgramTest : public TestSuite {\npublic:\n  void Run() {\n\n    RunTest(\"Test Case 1\", []() {\n      vector<vector<int>> perms = getPermutations({});\n      assert(perms.size() == 0);\n    });\n\n    RunTest(\"Test Case 2\", []() {\n      vector<vector<int>> perms = getPermutations({1});\n      assert(perms.size() == 1);\n      assert(contains(perms, {1}));\n    });\n\n    RunTest(\"Test Case 3\", []() {\n      vector<vector<int>> perms = getPermutations({1, 2});\n      assert(perms.size() == 2);\n      assert(contains(perms, {1, 2}));\n      assert(contains(perms, {2, 1}));\n    });\n\n    RunTest(\"Test Case 4\", []() {\n      vector<vector<int>> perms = getPermutations({1, 2, 3});\n      assert(perms.size() == 6);\n      assert(contains(perms, {1, 2, 3}));\n      assert(contains(perms, {1, 3, 2}));\n      assert(contains(perms, {2, 1, 3}));\n      assert(contains(perms, {2, 3, 1}));\n      assert(contains(perms, {3, 1, 2}));\n      assert(contains(perms, {3, 2, 1}));\n    });\n\n    RunTest(\"Test Case 5\", []() {\n      vector<vector<int>> perms = getPermutations({1, 2, 3, 4});\n      assert(perms.size() == 24);\n      assert(contains(perms, {1, 2, 3, 4}));\n      assert(contains(perms, {1, 2, 4, 3}));\n      assert(contains(perms, {1, 3, 2, 4}));\n      assert(contains(perms, {1, 3, 4, 2}));\n      assert(contains(perms, {1, 4, 3, 2}));\n      assert(contains(perms, {1, 4, 2, 3}));\n      assert(contains(perms, {2, 1, 3, 4}));\n      assert(contains(perms, {2, 1, 4, 3}));\n      assert(contains(perms, {2, 3, 1, 4}));\n      assert(contains(perms, {2, 3, 4, 1}));\n      assert(contains(perms, {2, 4, 1, 3}));\n      assert(contains(perms, {2, 4, 3, 1}));\n      assert(contains(perms, {3, 1, 2, 4}));\n      assert(contains(perms, {3, 1, 4, 2}));\n      assert(contains(perms, {3, 2, 1, 4}));\n      assert(contains(perms, {3, 2, 4, 1}));\n      assert(contains(perms, {3, 4, 1, 2}));\n      assert(contains(perms, {3, 4, 2, 1}));\n      assert(contains(perms, {4, 1, 2, 3}));\n      assert(contains(perms, {4, 1, 3, 2}));\n      assert(contains(perms, {4, 2, 1, 3}));\n      assert(contains(perms, {4, 2, 3, 1}));\n      assert(contains(perms, {4, 3, 1, 2}));\n      assert(contains(perms, {4, 3, 2, 1}));\n    });\n  }\n};\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nbool contains(vector<vector<int>> array1, vector<int> array2) {\n  for (vector<int> subArray : array1) {\n    if (array2 == subArray) {\n      return true;\n    }\n  }\n  return false;\n}\n\nclass ProgramTest : public TestSuite {\npublic:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      vector<vector<int>> perms = getPermutations({1, 2, 3});\n      assert(perms.size() == 6);\n      assert(contains(perms, {1, 2, 3}));\n      assert(contains(perms, {1, 3, 2}));\n      assert(contains(perms, {2, 1, 3}));\n      assert(contains(perms, {2, 3, 1}));\n      assert(contains(perms, {3, 1, 2}));\n      assert(contains(perms, {3, 2, 1}));\n    });\n  }\n};\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\n#include <vector>\nusing namespace std;\n\nvoid permutationsHelper(vector<int> array, vector<int> currentPermutation,\n                        vector<vector<int>> *permutations);\n\n// Upper Bound: O(n^2*n!) time | O(n*n!) space\n// Roughly: O(n*n!) time | O(n*n!) space\nvector<vector<int>> getPermutations(vector<int> array) {\n  vector<vector<int>> permutations;\n  permutationsHelper(array, {}, &permutations);\n  return permutations;\n}\n\nvoid permutationsHelper(vector<int> array, vector<int> currentPermutation,\n                        vector<vector<int>> *permutations) {\n  if (array.size() == 0 && currentPermutation.size() > 0) {\n    permutations->push_back(currentPermutation);\n  } else {\n    for (int i = 0; i < array.size(); i++) {\n      vector<int> newArray;\n      newArray.insert(newArray.end(), array.begin(), array.begin() + i);\n      newArray.insert(newArray.end(), array.begin() + i + 1, array.end());\n      vector<int> newPermutation = currentPermutation;\n      newPermutation.push_back(array[i]);\n      permutationsHelper(newArray, newPermutation, permutations);\n    }\n  }\n}\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\n#include <vector>\nusing namespace std;\n\nvoid permutationsHelper(int i, vector<int> *array,\n                        vector<vector<int>> *permutations);\nvoid swap(vector<int> *array, int i, int j);\n\n// O(n*n!) time | O(n*n!) space\nvector<vector<int>> getPermutations(vector<int> array) {\n  vector<vector<int>> permutations;\n  permutationsHelper(0, &array, &permutations);\n  return permutations;\n}\n\nvoid permutationsHelper(int i, vector<int> *array,\n                        vector<vector<int>> *permutations) {\n  if (i == array->size() - 1) {\n    permutations->push_back(*array);\n  } else {\n    for (int j = i; j < array->size(); j++) {\n      swap(array, i, j);\n      permutationsHelper(i + 1, array, permutations);\n      swap(array, i, j);\n    }\n  }\n}\n\nvoid swap(vector<int> *array, int i, int j) {\n  int tmp = array->at(i);\n  array->at(i) = array->at(j);\n  array->at(j) = tmp;\n}\n"
      ]
    },
    "csharp": {
      "Language": "csharp",
      "StartingCode": "using System.Collections.Generic;\n\npublic class Program {\n\tpublic static List<List<int> > GetPermutations(List<int> array) {\n\t\t// Write your code here.\n\t\treturn null;\n\t}\n}\n",
      "StartingTest": "using System;\nusing System.Linq;\nusing System.Collections.Generic;\n\npublic class ProgramTest {\n\t[Test]\n\tpublic void TestCase1() {\n\t\tList<int> input = new List<int>();\n\t\tList<List<int> > perms = Program.GetPermutations(input);\n\t\tUtils.AssertTrue(perms.Count == 0);\n\t}\n\n\t[Test]\n\tpublic void TestCase2() {\n\t\tList<int> input = new List<int>(){\n\t\t\t1\n\t\t};\n\t\tList<List<int> > perms = Program.GetPermutations(input);\n\t\tUtils.AssertTrue(perms.Count == 1);\n\t\tUtils.AssertTrue(Contains(perms, new List<int>(){\n\t\t\t1\n\t\t}));\n\t}\n\n\t[Test]\n\tpublic void TestCase3() {\n\t\tList<int> input = new List<int>(){\n\t\t\t1, 2\n\t\t};\n\t\tList<List<int> > perms = Program.GetPermutations(input);\n\t\tUtils.AssertTrue(perms.Count == 2);\n\t\tUtils.AssertTrue(Contains(perms, new List<int>(){\n\t\t\t1, 2\n\t\t}));\n\t\tUtils.AssertTrue(Contains(perms, new List<int>(){\n\t\t\t2, 1\n\t\t}));\n\t}\n\n\t[Test]\n\tpublic void TestCase4() {\n\t\tList<int> input = new List<int>(){\n\t\t\t1, 2, 3\n\t\t};\n\t\tList<List<int> > perms = Program.GetPermutations(input);\n\t\tUtils.AssertTrue(perms.Count == 6);\n\t\tUtils.AssertTrue(Contains(perms, new List<int>(){\n\t\t\t1, 2, 3\n\t\t}));\n\t\tUtils.AssertTrue(Contains(perms, new List<int>(){\n\t\t\t1, 3, 2\n\t\t}));\n\t\tUtils.AssertTrue(Contains(perms, new List<int>(){\n\t\t\t2, 1, 3\n\t\t}));\n\t\tUtils.AssertTrue(Contains(perms, new List<int>(){\n\t\t\t2, 3, 1\n\t\t}));\n\t\tUtils.AssertTrue(Contains(perms, new List<int>(){\n\t\t\t3, 1, 2\n\t\t}));\n\t\tUtils.AssertTrue(Contains(perms, new List<int>(){\n\t\t\t3, 2, 1\n\t\t}));\n\t}\n\n\t[Test]\n\tpublic void TestCase5() {\n\t\tList<int> input = new List<int>(){\n\t\t\t1, 2, 3, 4\n\t\t};\n\t\tList<List<int> > perms = Program.GetPermutations(input);\n\t\tUtils.AssertTrue(perms.Count == 24);\n\t\tUtils.AssertTrue(Contains(perms, new List<int>(){\n\t\t\t1, 2, 3, 4\n\t\t}));\n\t\tUtils.AssertTrue(Contains(perms, new List<int>(){\n\t\t\t1, 2, 4, 3\n\t\t}));\n\t\tUtils.AssertTrue(Contains(perms, new List<int>(){\n\t\t\t1, 3, 2, 4\n\t\t}));\n\t\tUtils.AssertTrue(Contains(perms, new List<int>(){\n\t\t\t1, 3, 4, 2\n\t\t}));\n\t\tUtils.AssertTrue(Contains(perms, new List<int>(){\n\t\t\t1, 4, 3, 2\n\t\t}));\n\t\tUtils.AssertTrue(Contains(perms, new List<int>(){\n\t\t\t1, 4, 2, 3\n\t\t}));\n\t\tUtils.AssertTrue(Contains(perms, new List<int>(){\n\t\t\t2, 1, 3, 4\n\t\t}));\n\t\tUtils.AssertTrue(Contains(perms, new List<int>(){\n\t\t\t2, 1, 4, 3\n\t\t}));\n\t\tUtils.AssertTrue(Contains(perms, new List<int>(){\n\t\t\t2, 3, 1, 4\n\t\t}));\n\t\tUtils.AssertTrue(Contains(perms, new List<int>(){\n\t\t\t2, 3, 4, 1\n\t\t}));\n\t\tUtils.AssertTrue(Contains(perms, new List<int>(){\n\t\t\t2, 4, 1, 3\n\t\t}));\n\t\tUtils.AssertTrue(Contains(perms, new List<int>(){\n\t\t\t2, 4, 3, 1\n\t\t}));\n\t\tUtils.AssertTrue(Contains(perms, new List<int>(){\n\t\t\t3, 1, 2, 4\n\t\t}));\n\t\tUtils.AssertTrue(Contains(perms, new List<int>(){\n\t\t\t3, 1, 4, 2\n\t\t}));\n\t\tUtils.AssertTrue(Contains(perms, new List<int>(){\n\t\t\t3, 2, 1, 4\n\t\t}));\n\t\tUtils.AssertTrue(Contains(perms, new List<int>(){\n\t\t\t3, 2, 4, 1\n\t\t}));\n\t\tUtils.AssertTrue(Contains(perms, new List<int>(){\n\t\t\t3, 4, 1, 2\n\t\t}));\n\t\tUtils.AssertTrue(Contains(perms, new List<int>(){\n\t\t\t3, 4, 2, 1\n\t\t}));\n\t\tUtils.AssertTrue(Contains(perms, new List<int>(){\n\t\t\t4, 1, 2, 3\n\t\t}));\n\t\tUtils.AssertTrue(Contains(perms, new List<int>(){\n\t\t\t4, 1, 3, 2\n\t\t}));\n\t\tUtils.AssertTrue(Contains(perms, new List<int>(){\n\t\t\t4, 2, 1, 3\n\t\t}));\n\t\tUtils.AssertTrue(Contains(perms, new List<int>(){\n\t\t\t4, 2, 3, 1\n\t\t}));\n\t\tUtils.AssertTrue(Contains(perms, new List<int>(){\n\t\t\t4, 3, 1, 2\n\t\t}));\n\t\tUtils.AssertTrue(Contains(perms, new List<int>(){\n\t\t\t4, 3, 2, 1\n\t\t}));\n\t}\n\n\tpublic bool Contains(List<List<int> > arr1, List<int> arr2) {\n\t\tforeach (List<int> subArray in arr1) {\n\t\t\tif (subArray.SequenceEqual(arr2)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nusing System;\nusing System.Linq;\nusing System.Collections.Generic;\n\npublic class ProgramTest {\n\t[Test]\n\tpublic void TestCase1() {\n\t\tList<int> input = new List<int>(){\n\t\t\t1, 2, 3\n\t\t};\n\t\tList<List<int> > perms = Program.GetPermutations(input);\n\t\tUtils.AssertTrue(perms.Count == 6);\n\t\tUtils.AssertTrue(Contains(perms, new List<int>(){\n\t\t\t1, 2, 3\n\t\t}));\n\t\tUtils.AssertTrue(Contains(perms, new List<int>(){\n\t\t\t1, 3, 2\n\t\t}));\n\t\tUtils.AssertTrue(Contains(perms, new List<int>(){\n\t\t\t2, 1, 3\n\t\t}));\n\t\tUtils.AssertTrue(Contains(perms, new List<int>(){\n\t\t\t2, 3, 1\n\t\t}));\n\t\tUtils.AssertTrue(Contains(perms, new List<int>(){\n\t\t\t3, 1, 2\n\t\t}));\n\t\tUtils.AssertTrue(Contains(perms, new List<int>(){\n\t\t\t3, 2, 1\n\t\t}));\n\t}\n\n\tpublic bool Contains(List<List<int> > arr1, List<int> arr2) {\n\t\tforeach (List<int> subArray in arr1) {\n\t\t\tif (subArray.SequenceEqual(arr2)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nusing System;\nusing System.Collections.Generic;\n\npublic class Program {\n\t// Upper Bound: O(n^2*n!) time | O(n*n!) space\n\t// Roughly: O(n*n!) time | O(n*n!) space\n\tpublic static List<List<int> > GetPermutations(List<int> array) {\n\t\tList<List<int> > permutations = new List<List<int> >();\n\t\tGetPermutations(array, new List<int>(), permutations);\n\t\treturn permutations;\n\t}\n\n\tpublic static void GetPermutations(List<int> array, List<int> currentPermutation,\n\t  List<List<int> > permutations) {\n\t\tif (array.Count == 0 && currentPermutation.Count > 0) {\n\t\t\tpermutations.Add(currentPermutation);\n\t\t} else {\n\t\t\tfor (int i = 0; i < array.Count; i++) {\n\t\t\t\tList<int> newArray = new List<int>(array);\n\t\t\t\tnewArray.RemoveAt(i);\n\t\t\t\tList<int> newPermutation = new List<int>(currentPermutation);\n\t\t\t\tnewPermutation.Add(array[i]);\n\t\t\t\tGetPermutations(newArray, newPermutation, permutations);\n\t\t\t}\n\t\t}\n\t}\n}\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nusing System.Collections.Generic;\n\npublic class Program {\n\t// O(n*n!) time | O(n*n!) space\n\tpublic static List<List<int> > GetPermutations(List<int> array) {\n\t\tList<List<int> > permutations = new List<List<int> >();\n\t\tGetPermutations(0, array, permutations);\n\t\treturn permutations;\n\t}\n\n\tpublic static void GetPermutations(int i, List<int> array, List<List<int> > permutations) {\n\t\tif (i == array.Count - 1) {\n\t\t\tpermutations.Add(new List<int>(array));\n\t\t} else {\n\t\t\tfor (int j = i; j < array.Count; j++) {\n\t\t\t\tswap(array, i, j);\n\t\t\t\tGetPermutations(i + 1, array, permutations);\n\t\t\t\tswap(array, i, j);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic static void swap(List<int> array, int i, int j) {\n\t\tint tmp = array[i];\n\t\tarray[i] =  array[j];\n\t\tarray[j] =  tmp;\n\t}\n}\n"
      ]
    },
    "go": {
      "Language": "go",
      "StartingCode": "package main\n\nfunc GetPermutations(array []int) [][]int {\n\t// Write your code here.\n\treturn nil\n}\n",
      "StartingTest": "package main\n\nimport (\n\t\"reflect\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\toutput := GetPermutations([]int{})\n\tif len(output) != 0 {\n\t\tt.Fail()\n\t}\n}\n\nfunc (s *TestSuite) TestCase2(t *TestCase) {\n\toutput := GetPermutations([]int{1})\n\tif len(output) != 1 {\n\t\tt.Fail()\n\t}\n\tassertContains(t, output, []int{1})\n}\n\nfunc (s *TestSuite) TestCase3(t *TestCase) {\n\toutput := GetPermutations([]int{1, 2})\n\tif len(output) != 2 {\n\t\tt.Fail()\n\t}\n\tassertContains(t, output, []int{1, 2})\n\tassertContains(t, output, []int{2, 1})\n}\n\nfunc (s *TestSuite) TestCase4(t *TestCase) {\n\toutput := GetPermutations([]int{1, 2, 3})\n\tif len(output) != 6 {\n\t\tt.Fail()\n\t}\n\tassertContains(t, output, []int{1, 2, 3})\n\tassertContains(t, output, []int{1, 3, 2})\n\tassertContains(t, output, []int{2, 1, 3})\n\tassertContains(t, output, []int{2, 3, 1})\n\tassertContains(t, output, []int{3, 1, 2})\n\tassertContains(t, output, []int{3, 2, 1})\n}\n\nfunc (s *TestSuite) TestCase5(t *TestCase) {\n\toutput := GetPermutations([]int{1, 2, 3, 4})\n\tif len(output) != 24 {\n\t\tt.Fail()\n\t}\n\tassertContains(t, output, []int{1, 2, 3, 4})\n\tassertContains(t, output, []int{1, 2, 4, 3})\n\tassertContains(t, output, []int{1, 3, 2, 4})\n\tassertContains(t, output, []int{1, 3, 4, 2})\n\tassertContains(t, output, []int{1, 4, 3, 2})\n\tassertContains(t, output, []int{1, 4, 2, 3})\n\tassertContains(t, output, []int{2, 1, 3, 4})\n\tassertContains(t, output, []int{2, 1, 4, 3})\n\tassertContains(t, output, []int{2, 3, 1, 4})\n\tassertContains(t, output, []int{2, 3, 4, 1})\n\tassertContains(t, output, []int{2, 4, 1, 3})\n\tassertContains(t, output, []int{2, 4, 3, 1})\n\tassertContains(t, output, []int{3, 1, 2, 4})\n\tassertContains(t, output, []int{3, 1, 4, 2})\n\tassertContains(t, output, []int{3, 2, 1, 4})\n\tassertContains(t, output, []int{3, 2, 4, 1})\n\tassertContains(t, output, []int{3, 4, 1, 2})\n\tassertContains(t, output, []int{3, 4, 2, 1})\n\tassertContains(t, output, []int{4, 1, 2, 3})\n\tassertContains(t, output, []int{4, 1, 3, 2})\n\tassertContains(t, output, []int{4, 2, 1, 3})\n\tassertContains(t, output, []int{4, 2, 3, 1})\n\tassertContains(t, output, []int{4, 3, 1, 2})\n\tassertContains(t, output, []int{4, 3, 2, 1})\n}\n\nfunc contains(output [][]int, element []int) bool {\n\tfor _, array := range output {\n\t\tif reflect.DeepEqual(array, element) {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\nfunc assertContains(t *TestCase, output [][]int, element []int) {\n\tif !contains(output, element) {\n\t\tt.Fail()\n\t}\n}\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\toutput := GetPermutations([]int{1, 2, 3})\n\trequire.Contains(t, output, []int{1, 2, 3})\n\trequire.Contains(t, output, []int{1, 3, 2})\n\trequire.Contains(t, output, []int{2, 1, 3})\n\trequire.Contains(t, output, []int{2, 3, 1})\n\trequire.Contains(t, output, []int{3, 1, 2})\n\trequire.Contains(t, output, []int{3, 2, 1})\n\trequire.Len(t, output, 6)\n}\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\npackage main\n\n// Upper Bound: O(n^2*n!) time | O(n*n!) space\n// Roughly: O(n*n!) time | O(n*n!) space\nfunc GetPermutations(array []int) [][]int {\n\tpermutations := [][]int{}\n\tpermutationsHelper(array, []int{}, &permutations)\n\treturn permutations\n}\n\nfunc permutationsHelper(array []int, currentPermutation []int, permutations *[][]int) {\n\tif len(array) == 0 && len(currentPermutation) != 0 {\n\t\t*permutations = append(*permutations, currentPermutation)\n\t\treturn\n\t}\n\tfor i := range array {\n\t\tnewArray := make([]int, i)\n\t\tcopy(newArray, array[:i])\n\t\tnewArray = append(newArray, array[i+1:]...)\n\t\tnewPermutation := make([]int, len(currentPermutation))\n\t\tcopy(newPermutation, currentPermutation)\n\t\tnewPermutation = append(newPermutation, array[i])\n\t\tpermutationsHelper(newArray, newPermutation, permutations)\n\t}\n}\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\npackage main\n\n// O(n*n!) time | O(n*n!) space\nfunc GetPermutations(array []int) [][]int {\n\tpermutations := [][]int{}\n\tpermutationsHelper(0, array, &permutations)\n\treturn permutations\n}\n\nfunc permutationsHelper(i int, array []int, permutations *[][]int) {\n\tif i == len(array)-1 {\n\t\tnewPerm := make([]int, len(array))\n\t\tcopy(newPerm, array)\n\t\t*permutations = append(*permutations, newPerm)\n\t\treturn\n\t}\n\tfor j := i; j < len(array); j++ {\n\t\tswap(array, i, j)\n\t\tpermutationsHelper(i+1, array, permutations)\n\t\tswap(array, i, j)\n\t}\n}\n\nfunc swap(array []int, i, j int) {\n\tarray[i], array[j] = array[j], array[i]\n}\n"
      ]
    },
    "java": {
      "Language": "java",
      "StartingCode": "import java.util.*;\n\nclass Program {\n  public static List<List<Integer>> getPermutations(List<Integer> array) {\n    // Write your code here.\n    return null;\n  }\n}\n",
      "StartingTest": "import java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    List<Integer> input = new ArrayList<Integer>();\n    List<List<Integer>> perms = Program.getPermutations(input);\n    Utils.assertTrue(perms.size() == 0);\n  }\n\n  @Test\n  public void TestCase2() {\n    List<Integer> input = new ArrayList<Integer>(Arrays.asList(1));\n    List<List<Integer>> perms = Program.getPermutations(input);\n    Utils.assertTrue(perms.size() == 1);\n    Utils.assertTrue(contains(perms, new ArrayList<Integer>(Arrays.asList(1))));\n  }\n\n  @Test\n  public void TestCase3() {\n    List<Integer> input = new ArrayList<Integer>(Arrays.asList(1, 2));\n    List<List<Integer>> perms = Program.getPermutations(input);\n    Utils.assertTrue(perms.size() == 2);\n    Utils.assertTrue(contains(perms, new ArrayList<Integer>(Arrays.asList(1, 2))));\n    Utils.assertTrue(contains(perms, new ArrayList<Integer>(Arrays.asList(2, 1))));\n  }\n\n  @Test\n  public void TestCase4() {\n    List<Integer> input = new ArrayList<Integer>(Arrays.asList(1, 2, 3));\n    List<List<Integer>> perms = Program.getPermutations(input);\n    Utils.assertTrue(perms.size() == 6);\n    Utils.assertTrue(contains(perms, new ArrayList<Integer>(Arrays.asList(1, 2, 3))));\n    Utils.assertTrue(contains(perms, new ArrayList<Integer>(Arrays.asList(1, 3, 2))));\n    Utils.assertTrue(contains(perms, new ArrayList<Integer>(Arrays.asList(2, 1, 3))));\n    Utils.assertTrue(contains(perms, new ArrayList<Integer>(Arrays.asList(2, 3, 1))));\n    Utils.assertTrue(contains(perms, new ArrayList<Integer>(Arrays.asList(3, 1, 2))));\n    Utils.assertTrue(contains(perms, new ArrayList<Integer>(Arrays.asList(3, 2, 1))));\n  }\n\n  @Test\n  public void TestCase5() {\n    List<Integer> input = new ArrayList<Integer>(Arrays.asList(1, 2, 3, 4));\n    List<List<Integer>> perms = Program.getPermutations(input);\n    Utils.assertTrue(perms.size() == 24);\n    Utils.assertTrue(contains(perms, new ArrayList<Integer>(Arrays.asList(1, 2, 3, 4))));\n    Utils.assertTrue(contains(perms, new ArrayList<Integer>(Arrays.asList(1, 2, 4, 3))));\n    Utils.assertTrue(contains(perms, new ArrayList<Integer>(Arrays.asList(1, 3, 2, 4))));\n    Utils.assertTrue(contains(perms, new ArrayList<Integer>(Arrays.asList(1, 3, 4, 2))));\n    Utils.assertTrue(contains(perms, new ArrayList<Integer>(Arrays.asList(1, 4, 3, 2))));\n    Utils.assertTrue(contains(perms, new ArrayList<Integer>(Arrays.asList(1, 4, 2, 3))));\n    Utils.assertTrue(contains(perms, new ArrayList<Integer>(Arrays.asList(2, 1, 3, 4))));\n    Utils.assertTrue(contains(perms, new ArrayList<Integer>(Arrays.asList(2, 1, 4, 3))));\n    Utils.assertTrue(contains(perms, new ArrayList<Integer>(Arrays.asList(2, 3, 1, 4))));\n    Utils.assertTrue(contains(perms, new ArrayList<Integer>(Arrays.asList(2, 3, 4, 1))));\n    Utils.assertTrue(contains(perms, new ArrayList<Integer>(Arrays.asList(2, 4, 1, 3))));\n    Utils.assertTrue(contains(perms, new ArrayList<Integer>(Arrays.asList(2, 4, 3, 1))));\n    Utils.assertTrue(contains(perms, new ArrayList<Integer>(Arrays.asList(3, 1, 2, 4))));\n    Utils.assertTrue(contains(perms, new ArrayList<Integer>(Arrays.asList(3, 1, 4, 2))));\n    Utils.assertTrue(contains(perms, new ArrayList<Integer>(Arrays.asList(3, 2, 1, 4))));\n    Utils.assertTrue(contains(perms, new ArrayList<Integer>(Arrays.asList(3, 2, 4, 1))));\n    Utils.assertTrue(contains(perms, new ArrayList<Integer>(Arrays.asList(3, 4, 1, 2))));\n    Utils.assertTrue(contains(perms, new ArrayList<Integer>(Arrays.asList(3, 4, 2, 1))));\n    Utils.assertTrue(contains(perms, new ArrayList<Integer>(Arrays.asList(4, 1, 2, 3))));\n    Utils.assertTrue(contains(perms, new ArrayList<Integer>(Arrays.asList(4, 1, 3, 2))));\n    Utils.assertTrue(contains(perms, new ArrayList<Integer>(Arrays.asList(4, 2, 1, 3))));\n    Utils.assertTrue(contains(perms, new ArrayList<Integer>(Arrays.asList(4, 2, 3, 1))));\n    Utils.assertTrue(contains(perms, new ArrayList<Integer>(Arrays.asList(4, 3, 1, 2))));\n    Utils.assertTrue(contains(perms, new ArrayList<Integer>(Arrays.asList(4, 3, 2, 1))));\n  }\n\n  public boolean contains(List<List<Integer>> arr1, List<Integer> arr2) {\n    for (List<Integer> subArray : arr1) {\n      if (subArray.equals(arr2)) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    List<Integer> input = new ArrayList<Integer>(Arrays.asList(1, 2, 3));\n    List<List<Integer>> perms = Program.getPermutations(input);\n    Utils.assertTrue(perms.size() == 6);\n    Utils.assertTrue(contains(perms, new ArrayList<Integer>(Arrays.asList(1, 2, 3))));\n    Utils.assertTrue(contains(perms, new ArrayList<Integer>(Arrays.asList(1, 3, 2))));\n    Utils.assertTrue(contains(perms, new ArrayList<Integer>(Arrays.asList(2, 1, 3))));\n    Utils.assertTrue(contains(perms, new ArrayList<Integer>(Arrays.asList(2, 3, 1))));\n    Utils.assertTrue(contains(perms, new ArrayList<Integer>(Arrays.asList(3, 1, 2))));\n    Utils.assertTrue(contains(perms, new ArrayList<Integer>(Arrays.asList(3, 2, 1))));\n  }\n\n  public boolean contains(List<List<Integer>> arr1, List<Integer> arr2) {\n    for (List<Integer> subArray : arr1) {\n      if (subArray.equals(arr2)) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // Upper Bound: O(n^2*n!) time | O(n*n!) space\n  // Roughly: O(n*n!) time | O(n*n!) space\n  public static List<List<Integer>> getPermutations(List<Integer> array) {\n    List<List<Integer>> permutations = new ArrayList<List<Integer>>();\n    getPermutations(array, new ArrayList<Integer>(), permutations);\n    return permutations;\n  }\n\n  public static void getPermutations(\n      List<Integer> array, List<Integer> currentPermutation, List<List<Integer>> permutations) {\n    if (array.size() == 0 && currentPermutation.size() > 0) {\n      permutations.add(currentPermutation);\n    } else {\n      for (int i = 0; i < array.size(); i++) {\n        List<Integer> newArray = new ArrayList<Integer>(array);\n        newArray.remove(i);\n        List<Integer> newPermutation = new ArrayList<Integer>(currentPermutation);\n        newPermutation.add(array.get(i));\n        getPermutations(newArray, newPermutation, permutations);\n      }\n    }\n  }\n}\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nimport java.util.*;\n\nclass Program {\n  // O(n*n!) time | O(n*n!) space\n  public static List<List<Integer>> getPermutations(List<Integer> array) {\n    List<List<Integer>> permutations = new ArrayList<List<Integer>>();\n    getPermutations(0, array, permutations);\n    return permutations;\n  }\n\n  public static void getPermutations(int i, List<Integer> array, List<List<Integer>> permutations) {\n    if (i == array.size() - 1) {\n      permutations.add(new ArrayList<Integer>(array));\n    } else {\n      for (int j = i; j < array.size(); j++) {\n        swap(array, i, j);\n        getPermutations(i + 1, array, permutations);\n        swap(array, i, j);\n      }\n    }\n  }\n\n  public static void swap(List<Integer> array, int i, int j) {\n    Integer tmp = array.get(i);\n    array.set(i, array.get(j));\n    array.set(j, tmp);\n  }\n}\n"
      ]
    },
    "javascript": {
      "Language": "javascript",
      "StartingCode": "function getPermutations(array) {\n  // Write your code here.\n}\n\n// Do not edit the line below.\nexports.getPermutations = getPermutations;\n",
      "StartingTest": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  const perms = program.getPermutations([]);\n  chai.expect(perms.length).to.deep.equal(0);\n});\n\nit('Test Case #2', function () {\n  const perms = program.getPermutations([1]);\n  chai.expect(perms.length).to.deep.equal(1);\n  chai.expect(perms).to.deep.include([1]);\n});\n\nit('Test Case #3', function () {\n  const perms = program.getPermutations([1, 2]);\n  chai.expect(perms.length).to.deep.equal(2);\n  chai.expect(perms).to.deep.include([1, 2]);\n  chai.expect(perms).to.deep.include([2, 1]);\n});\n\nit('Test Case #4', function () {\n  const perms = program.getPermutations([1, 2, 3]);\n  chai.expect(perms.length).to.deep.equal(6);\n  chai.expect(perms).to.deep.include([1, 2, 3]);\n  chai.expect(perms).to.deep.include([1, 3, 2]);\n  chai.expect(perms).to.deep.include([2, 1, 3]);\n  chai.expect(perms).to.deep.include([2, 3, 1]);\n  chai.expect(perms).to.deep.include([3, 1, 2]);\n  chai.expect(perms).to.deep.include([3, 2, 1]);\n});\n\nit('Test Case #5', function () {\n  const perms = program.getPermutations([1, 2, 3, 4]);\n  chai.expect(perms.length).to.deep.equal(24);\n  chai.expect(perms).to.deep.include([1, 2, 3, 4]);\n  chai.expect(perms).to.deep.include([1, 2, 4, 3]);\n  chai.expect(perms).to.deep.include([1, 3, 2, 4]);\n  chai.expect(perms).to.deep.include([1, 3, 4, 2]);\n  chai.expect(perms).to.deep.include([1, 4, 3, 2]);\n  chai.expect(perms).to.deep.include([1, 4, 2, 3]);\n  chai.expect(perms).to.deep.include([2, 1, 3, 4]);\n  chai.expect(perms).to.deep.include([2, 1, 4, 3]);\n  chai.expect(perms).to.deep.include([2, 3, 1, 4]);\n  chai.expect(perms).to.deep.include([2, 3, 4, 1]);\n  chai.expect(perms).to.deep.include([2, 4, 1, 3]);\n  chai.expect(perms).to.deep.include([2, 4, 3, 1]);\n  chai.expect(perms).to.deep.include([3, 1, 2, 4]);\n  chai.expect(perms).to.deep.include([3, 1, 4, 2]);\n  chai.expect(perms).to.deep.include([3, 2, 1, 4]);\n  chai.expect(perms).to.deep.include([3, 2, 4, 1]);\n  chai.expect(perms).to.deep.include([3, 4, 1, 2]);\n  chai.expect(perms).to.deep.include([3, 4, 2, 1]);\n  chai.expect(perms).to.deep.include([4, 1, 2, 3]);\n  chai.expect(perms).to.deep.include([4, 1, 3, 2]);\n  chai.expect(perms).to.deep.include([4, 2, 1, 3]);\n  chai.expect(perms).to.deep.include([4, 2, 3, 1]);\n  chai.expect(perms).to.deep.include([4, 3, 1, 2]);\n  chai.expect(perms).to.deep.include([4, 3, 2, 1]);\n});\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #4', function () {\n  const perms = program.getPermutations([1, 2, 3]);\n  chai.expect(perms.length).to.deep.equal(6);\n  chai.expect(perms).to.deep.include([1, 2, 3]);\n  chai.expect(perms).to.deep.include([1, 3, 2]);\n  chai.expect(perms).to.deep.include([2, 1, 3]);\n  chai.expect(perms).to.deep.include([2, 3, 1]);\n  chai.expect(perms).to.deep.include([3, 1, 2]);\n  chai.expect(perms).to.deep.include([3, 2, 1]);\n});\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\n// Upper Bound: O(n^2*n!) time | O(n*n!) space\n// Roughly: O(n*n!) time | O(n*n!) space\nfunction getPermutations(array) {\n  const permutations = [];\n  permutationsHelper(array, [], permutations);\n  return permutations;\n}\n\nfunction permutationsHelper(array, currentPermutation, permutations) {\n  if (!array.length && currentPermutation.length) {\n    permutations.push(currentPermutation);\n  } else {\n    for (let i = 0; i < array.length; i++) {\n      const newArray = array.slice(0, i).concat(array.slice(i + 1));\n      const newPermutation = currentPermutation.concat([array[i]]);\n      permutationsHelper(newArray, newPermutation, permutations);\n    }\n  }\n}\n\nexports.getPermutations = getPermutations;\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\n// O(n*n!) time | O(n*n!) space\nfunction getPermutations(array) {\n  const permutations = [];\n  permutationsHelper(0, array, permutations);\n  return permutations;\n}\n\nfunction permutationsHelper(i, array, permutations) {\n  if (i === array.length - 1) {\n    permutations.push(array.slice());\n  } else {\n    for (let j = i; j < array.length; j++) {\n      swap(i, j, array);\n      permutationsHelper(i + 1, array, permutations);\n      swap(i, j, array);\n    }\n  }\n}\n\nfunction swap(i, j, array) {\n  const temp = array[i];\n  array[i] = array[j];\n  array[j] = temp;\n}\n\nexports.getPermutations = getPermutations;\n"
      ]
    },
    "python": {
      "Language": "python",
      "StartingCode": "def getPermutations(array):\n    # Write your code here.\n    pass\n",
      "StartingTest": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        perms = program.getPermutations([])\n        self.assertTrue(len(perms) == 0)\n\n    def test_case_2(self):\n        perms = program.getPermutations([1])\n        self.assertTrue(len(perms) == 1)\n        self.assertTrue([1] in perms)\n\n    def test_case_3(self):\n        perms = program.getPermutations([1, 2])\n        self.assertTrue(len(perms) == 2)\n        self.assertTrue([1, 2] in perms)\n        self.assertTrue([2, 1] in perms)\n\n    def test_case_4(self):\n        perms = program.getPermutations([1, 2, 3])\n        self.assertTrue(len(perms) == 6)\n        self.assertTrue([1, 2, 3] in perms)\n        self.assertTrue([1, 3, 2] in perms)\n        self.assertTrue([2, 1, 3] in perms)\n        self.assertTrue([2, 3, 1] in perms)\n        self.assertTrue([3, 1, 2] in perms)\n        self.assertTrue([3, 2, 1] in perms)\n\n    def test_case_5(self):\n        perms = program.getPermutations([1, 2, 3, 4])\n        self.assertTrue(len(perms) == 24)\n        self.assertTrue([1, 2, 3, 4] in perms)\n        self.assertTrue([1, 2, 4, 3] in perms)\n        self.assertTrue([1, 3, 2, 4] in perms)\n        self.assertTrue([1, 3, 4, 2] in perms)\n        self.assertTrue([1, 4, 3, 2] in perms)\n        self.assertTrue([1, 4, 2, 3] in perms)\n        self.assertTrue([2, 1, 3, 4] in perms)\n        self.assertTrue([2, 1, 4, 3] in perms)\n        self.assertTrue([2, 3, 1, 4] in perms)\n        self.assertTrue([2, 3, 4, 1] in perms)\n        self.assertTrue([2, 4, 1, 3] in perms)\n        self.assertTrue([2, 4, 3, 1] in perms)\n        self.assertTrue([3, 1, 2, 4] in perms)\n        self.assertTrue([3, 1, 4, 2] in perms)\n        self.assertTrue([3, 2, 1, 4] in perms)\n        self.assertTrue([3, 2, 4, 1] in perms)\n        self.assertTrue([3, 4, 1, 2] in perms)\n        self.assertTrue([3, 4, 2, 1] in perms)\n        self.assertTrue([4, 1, 2, 3] in perms)\n        self.assertTrue([4, 1, 3, 2] in perms)\n        self.assertTrue([4, 2, 1, 3] in perms)\n        self.assertTrue([4, 2, 3, 1] in perms)\n        self.assertTrue([4, 3, 1, 2] in perms)\n        self.assertTrue([4, 3, 2, 1] in perms)\n",
      "SandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        perms = program.getPermutations([1, 2, 3])\n        self.assertTrue(len(perms) == 6)\n        self.assertTrue([1, 2, 3] in perms)\n        self.assertTrue([1, 3, 2] in perms)\n        self.assertTrue([2, 1, 3] in perms)\n        self.assertTrue([2, 3, 1] in perms)\n        self.assertTrue([3, 1, 2] in perms)\n        self.assertTrue([3, 2, 1] in perms)\n",
      "Solutions": [
        "# Copyright © 2020 Code Complete. All rights reserved.\n\n# Upper Bound: O(n^2*n!) time | O(n*n!) space\n# Roughly: O(n*n!) time | O(n*n!) space\ndef getPermutations(array):\n    permutations = []\n    permutationsHelper(array, [], permutations)\n    return permutations\n\n\ndef permutationsHelper(array, currentPermutation, permutations):\n    if not len(array) and len(currentPermutation):\n        permutations.append(currentPermutation)\n    else:\n        for i in range(len(array)):\n            newArray = array[:i] + array[i + 1 :]\n            newPermutation = currentPermutation + [array[i]]\n            permutationsHelper(newArray, newPermutation, permutations)\n",
        "# Copyright © 2020 Code Complete. All rights reserved.\n\n# O(n*n!) time | O(n*n!) space\ndef getPermutations(array):\n    permutations = []\n    permutationsHelper(0, array, permutations)\n    return permutations\n\n\ndef permutationsHelper(i, array, permutations):\n    if i == len(array) - 1:\n        permutations.append(array[:])\n    else:\n        for j in range(i, len(array)):\n            swap(array, i, j)\n            permutationsHelper(i + 1, array, permutations)\n            swap(array, i, j)\n\n\ndef swap(array, i, j):\n    array[i], array[j] = array[j], array[i]\n"
      ]
    },
    "swift": {
      "Language": "swift",
      "StartingCode": "class Program {\n  func permutations(array: inout [Int]) -> [[Int]] {\n    // Write your code here.\n    return []\n  }\n}\n",
      "StartingTest": "class ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      var firstTest: [Int] = []\n      var firstTestResults = program.permutations(array: &firstTest)\n      try assertEqual(0, firstTestResults.count)\n    }\n    runTest(\"Test Case 2\") { () throws -> Void in\n      var secondTest: [Int] = [1]\n      var secondTestResults = program.permutations(array: &secondTest)\n      try assertEqual(1, secondTestResults.count)\n      try assert(secondTestResults.contains([1]))\n    }\n    runTest(\"Test Case 3\") { () throws -> Void in\n      var thirdTest: [Int] = [1, 2]\n      var thirdTestResults = program.permutations(array: &thirdTest)\n      try assertEqual(2, thirdTestResults.count)\n      try assert(thirdTestResults.contains([1, 2]))\n      try assert(thirdTestResults.contains([2, 1]))\n    }\n    runTest(\"Test Case 4\") { () throws -> Void in\n      var fourthTest: [Int] = [1, 2, 3]\n      var fourthTestResults = program.permutations(array: &fourthTest)\n      try assertEqual(6, fourthTestResults.count)\n      try assert(fourthTestResults.contains([1, 2, 3]))\n      try assert(fourthTestResults.contains([1, 3, 2]))\n      try assert(fourthTestResults.contains([2, 1, 3]))\n      try assert(fourthTestResults.contains([2, 3, 1]))\n      try assert(fourthTestResults.contains([3, 1, 2]))\n      try assert(fourthTestResults.contains([3, 2, 1]))\n    }\n    runTest(\"Test Case 5\") { () throws -> Void in\n      var fifthTest: [Int] = [1, 2, 3, 4]\n      var fifthTestResults = program.permutations(array: &fifthTest)\n      try assertEqual(24, fifthTestResults.count)\n      try assert(fifthTestResults.contains([1, 2, 3, 4]))\n      try assert(fifthTestResults.contains([1, 2, 4, 3]))\n      try assert(fifthTestResults.contains([1, 3, 2, 4]))\n      try assert(fifthTestResults.contains([1, 3, 4, 2]))\n      try assert(fifthTestResults.contains([1, 4, 3, 2]))\n      try assert(fifthTestResults.contains([1, 4, 2, 3]))\n      try assert(fifthTestResults.contains([2, 1, 3, 4]))\n      try assert(fifthTestResults.contains([2, 1, 4, 3]))\n      try assert(fifthTestResults.contains([2, 3, 1, 4]))\n      try assert(fifthTestResults.contains([2, 3, 4, 1]))\n      try assert(fifthTestResults.contains([2, 4, 1, 3]))\n      try assert(fifthTestResults.contains([2, 4, 3, 1]))\n      try assert(fifthTestResults.contains([3, 1, 2, 4]))\n      try assert(fifthTestResults.contains([3, 1, 4, 2]))\n      try assert(fifthTestResults.contains([3, 2, 1, 4]))\n      try assert(fifthTestResults.contains([3, 2, 4, 1]))\n      try assert(fifthTestResults.contains([3, 4, 1, 2]))\n      try assert(fifthTestResults.contains([3, 4, 2, 1]))\n      try assert(fifthTestResults.contains([4, 1, 2, 3]))\n      try assert(fifthTestResults.contains([4, 1, 3, 2]))\n      try assert(fifthTestResults.contains([4, 2, 1, 3]))\n      try assert(fifthTestResults.contains([4, 2, 3, 1]))\n      try assert(fifthTestResults.contains([4, 3, 1, 2]))\n      try assert(fifthTestResults.contains([4, 3, 2, 1]))\n    }\n  }\n}\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      var fourthTest: [Int] = [1, 2, 3]\n      var fourthTestResults = program.permutations(array: &fourthTest)\n      try assertEqual(6, fourthTestResults.count)\n      try assert(fourthTestResults.contains([1, 2, 3]))\n      try assert(fourthTestResults.contains([1, 3, 2]))\n      try assert(fourthTestResults.contains([2, 1, 3]))\n      try assert(fourthTestResults.contains([2, 3, 1]))\n      try assert(fourthTestResults.contains([3, 1, 2]))\n      try assert(fourthTestResults.contains([3, 2, 1]))\n    }\n  }\n}\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nclass Program {\n  // Upper Bound: O(n^2 * n!) time | O(n * n!) space\n  // Roughly: O(n * n!) time | O(n * n!) space\n  func permutations(array: inout [Int]) -> [[Int]] {\n    var permutations = [[Int]]()\n    permutationsHelper(array: array, currentPermutation: [], permutations: &permutations)\n\n    return permutations\n  }\n\n  func permutationsHelper(array: [Int], currentPermutation: [Int], permutations: inout [[Int]]) {\n    if array.count == 0, currentPermutation.count > 0 {\n      permutations.append(currentPermutation)\n    } else {\n      for i in 0 ..< array.count {\n        let newArray = Array(array.prefix(upTo: i) + array.suffix(from: i + 1))\n        let newPermutation = currentPermutation + [array[i]]\n\n        permutationsHelper(array: newArray, currentPermutation: newPermutation, permutations: &permutations)\n      }\n    }\n  }\n}\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nclass Program {\n  // O(n * n!) time | O(n * n!) space\n  func permutations(array: inout [Int]) -> [[Int]] {\n    var permutations = [[Int]]()\n    permutationsHelper(firstIndex: 0, array: &array, permutations: &permutations)\n\n    return permutations\n  }\n\n  func permutationsHelper(firstIndex: Int, array: inout [Int], permutations: inout [[Int]]) {\n    if firstIndex == array.count - 1 {\n      permutations.append(array)\n    } else {\n      for secondIndex in firstIndex ..< array.count {\n        swap(firstIndex: firstIndex, secondIndex: secondIndex, array: &array)\n        permutationsHelper(firstIndex: firstIndex + 1, array: &array, permutations: &permutations)\n        swap(firstIndex: firstIndex, secondIndex: secondIndex, array: &array)\n      }\n    }\n  }\n\n  func swap(firstIndex: Int, secondIndex: Int, array: inout [Int]) {\n    let temp = array[firstIndex]\n    array[firstIndex] = array[secondIndex]\n    array[secondIndex] = temp\n  }\n}\n"
      ]
    },
    "typescript": {
      "Language": "typescript",
      "StartingCode": "export function getPermutations(array: number[]) {\n  // Write your code here.\n  return [[]];\n}\n",
      "StartingTest": "",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #4', function () {\n  const perms = program.getPermutations([1, 2, 3]);\n  chai.expect(perms.length).to.deep.equal(6);\n  chai.expect(perms).to.deep.include([1, 2, 3]);\n  chai.expect(perms).to.deep.include([1, 3, 2]);\n  chai.expect(perms).to.deep.include([2, 1, 3]);\n  chai.expect(perms).to.deep.include([2, 3, 1]);\n  chai.expect(perms).to.deep.include([3, 1, 2]);\n  chai.expect(perms).to.deep.include([3, 2, 1]);\n});\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\n// Upper Bound: O(n^2*n!) time | O(n*n!) space\n// Roughly: O(n*n!) time | O(n*n!) space\nexport function getPermutations(array: number[]) {\n  const permutations: number[][] = [];\n  permutationsHelper(array, [], permutations);\n  return permutations;\n}\n\nfunction permutationsHelper(array: number[], currentPermutation: number[], permutations: number[][]) {\n  if (!array.length && currentPermutation.length) {\n    permutations.push(currentPermutation);\n  } else {\n    for (let i = 0; i < array.length; i++) {\n      const newArray = array.slice(0, i).concat(array.slice(i + 1));\n      const newPermutation = currentPermutation.concat([array[i]]);\n      permutationsHelper(newArray, newPermutation, permutations);\n    }\n  }\n}\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\n// O(n*n!) time | O(n*n!) space\nexport function getPermutations(array: number[]) {\n  const permutations: number[][] = [];\n  permutationsHelper(0, array, permutations);\n  return permutations;\n}\n\nfunction permutationsHelper(i: number, array: number[], permutations: number[][]) {\n  if (i === array.length - 1) {\n    permutations.push(array.slice());\n  } else {\n    for (let j = i; j < array.length; j++) {\n      swap(i, j, array);\n      permutationsHelper(i + 1, array, permutations);\n      swap(i, j, array);\n    }\n  }\n}\n\nfunction swap(i: number, j: number, array: number[]) {\n  const temp = array[i];\n  array[i] = array[j];\n  array[j] = temp;\n}\n"
      ]
    }
  },
  "JSONTestLanguages": [
    "javascript",
    "cpp",
    "python",
    "java",
    "csharp",
    "go",
    "swift",
    "typescript"
  ],
  "JSONTests": [
    {
      "array": [
        1,
        2,
        3
      ]
    },
    {
      "array": []
    },
    {
      "array": [
        1
      ]
    },
    {
      "array": [
        1,
        2
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        4
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        5
      ]
    }
  ],
  "JSONAnswers": [
    [
      [
        [
          1,
          2,
          3
        ],
        [
          1,
          3,
          2
        ],
        [
          2,
          1,
          3
        ],
        [
          2,
          3,
          1
        ],
        [
          3,
          1,
          2
        ],
        [
          3,
          2,
          1
        ]
      ],
      [],
      [
        [
          1
        ]
      ],
      [
        [
          1,
          2
        ],
        [
          2,
          1
        ]
      ],
      [
        [
          1,
          2,
          3,
          4
        ],
        [
          1,
          2,
          4,
          3
        ],
        [
          1,
          3,
          2,
          4
        ],
        [
          1,
          3,
          4,
          2
        ],
        [
          1,
          4,
          2,
          3
        ],
        [
          1,
          4,
          3,
          2
        ],
        [
          2,
          1,
          3,
          4
        ],
        [
          2,
          1,
          4,
          3
        ],
        [
          2,
          3,
          1,
          4
        ],
        [
          2,
          3,
          4,
          1
        ],
        [
          2,
          4,
          1,
          3
        ],
        [
          2,
          4,
          3,
          1
        ],
        [
          3,
          1,
          2,
          4
        ],
        [
          3,
          1,
          4,
          2
        ],
        [
          3,
          2,
          1,
          4
        ],
        [
          3,
          2,
          4,
          1
        ],
        [
          3,
          4,
          1,
          2
        ],
        [
          3,
          4,
          2,
          1
        ],
        [
          4,
          1,
          2,
          3
        ],
        [
          4,
          1,
          3,
          2
        ],
        [
          4,
          2,
          1,
          3
        ],
        [
          4,
          2,
          3,
          1
        ],
        [
          4,
          3,
          1,
          2
        ],
        [
          4,
          3,
          2,
          1
        ]
      ],
      [
        [
          1,
          2,
          3,
          4,
          5
        ],
        [
          1,
          2,
          3,
          5,
          4
        ],
        [
          1,
          2,
          4,
          3,
          5
        ],
        [
          1,
          2,
          4,
          5,
          3
        ],
        [
          1,
          2,
          5,
          3,
          4
        ],
        [
          1,
          2,
          5,
          4,
          3
        ],
        [
          1,
          3,
          2,
          4,
          5
        ],
        [
          1,
          3,
          2,
          5,
          4
        ],
        [
          1,
          3,
          4,
          2,
          5
        ],
        [
          1,
          3,
          4,
          5,
          2
        ],
        [
          1,
          3,
          5,
          2,
          4
        ],
        [
          1,
          3,
          5,
          4,
          2
        ],
        [
          1,
          4,
          2,
          3,
          5
        ],
        [
          1,
          4,
          2,
          5,
          3
        ],
        [
          1,
          4,
          3,
          2,
          5
        ],
        [
          1,
          4,
          3,
          5,
          2
        ],
        [
          1,
          4,
          5,
          2,
          3
        ],
        [
          1,
          4,
          5,
          3,
          2
        ],
        [
          1,
          5,
          2,
          3,
          4
        ],
        [
          1,
          5,
          2,
          4,
          3
        ],
        [
          1,
          5,
          3,
          2,
          4
        ],
        [
          1,
          5,
          3,
          4,
          2
        ],
        [
          1,
          5,
          4,
          2,
          3
        ],
        [
          1,
          5,
          4,
          3,
          2
        ],
        [
          2,
          1,
          3,
          4,
          5
        ],
        [
          2,
          1,
          3,
          5,
          4
        ],
        [
          2,
          1,
          4,
          3,
          5
        ],
        [
          2,
          1,
          4,
          5,
          3
        ],
        [
          2,
          1,
          5,
          3,
          4
        ],
        [
          2,
          1,
          5,
          4,
          3
        ],
        [
          2,
          3,
          1,
          4,
          5
        ],
        [
          2,
          3,
          1,
          5,
          4
        ],
        [
          2,
          3,
          4,
          1,
          5
        ],
        [
          2,
          3,
          4,
          5,
          1
        ],
        [
          2,
          3,
          5,
          1,
          4
        ],
        [
          2,
          3,
          5,
          4,
          1
        ],
        [
          2,
          4,
          1,
          3,
          5
        ],
        [
          2,
          4,
          1,
          5,
          3
        ],
        [
          2,
          4,
          3,
          1,
          5
        ],
        [
          2,
          4,
          3,
          5,
          1
        ],
        [
          2,
          4,
          5,
          1,
          3
        ],
        [
          2,
          4,
          5,
          3,
          1
        ],
        [
          2,
          5,
          1,
          3,
          4
        ],
        [
          2,
          5,
          1,
          4,
          3
        ],
        [
          2,
          5,
          3,
          1,
          4
        ],
        [
          2,
          5,
          3,
          4,
          1
        ],
        [
          2,
          5,
          4,
          1,
          3
        ],
        [
          2,
          5,
          4,
          3,
          1
        ],
        [
          3,
          1,
          2,
          4,
          5
        ],
        [
          3,
          1,
          2,
          5,
          4
        ],
        [
          3,
          1,
          4,
          2,
          5
        ],
        [
          3,
          1,
          4,
          5,
          2
        ],
        [
          3,
          1,
          5,
          2,
          4
        ],
        [
          3,
          1,
          5,
          4,
          2
        ],
        [
          3,
          2,
          1,
          4,
          5
        ],
        [
          3,
          2,
          1,
          5,
          4
        ],
        [
          3,
          2,
          4,
          1,
          5
        ],
        [
          3,
          2,
          4,
          5,
          1
        ],
        [
          3,
          2,
          5,
          1,
          4
        ],
        [
          3,
          2,
          5,
          4,
          1
        ],
        [
          3,
          4,
          1,
          2,
          5
        ],
        [
          3,
          4,
          1,
          5,
          2
        ],
        [
          3,
          4,
          2,
          1,
          5
        ],
        [
          3,
          4,
          2,
          5,
          1
        ],
        [
          3,
          4,
          5,
          1,
          2
        ],
        [
          3,
          4,
          5,
          2,
          1
        ],
        [
          3,
          5,
          1,
          2,
          4
        ],
        [
          3,
          5,
          1,
          4,
          2
        ],
        [
          3,
          5,
          2,
          1,
          4
        ],
        [
          3,
          5,
          2,
          4,
          1
        ],
        [
          3,
          5,
          4,
          1,
          2
        ],
        [
          3,
          5,
          4,
          2,
          1
        ],
        [
          4,
          1,
          2,
          3,
          5
        ],
        [
          4,
          1,
          2,
          5,
          3
        ],
        [
          4,
          1,
          3,
          2,
          5
        ],
        [
          4,
          1,
          3,
          5,
          2
        ],
        [
          4,
          1,
          5,
          2,
          3
        ],
        [
          4,
          1,
          5,
          3,
          2
        ],
        [
          4,
          2,
          1,
          3,
          5
        ],
        [
          4,
          2,
          1,
          5,
          3
        ],
        [
          4,
          2,
          3,
          1,
          5
        ],
        [
          4,
          2,
          3,
          5,
          1
        ],
        [
          4,
          2,
          5,
          1,
          3
        ],
        [
          4,
          2,
          5,
          3,
          1
        ],
        [
          4,
          3,
          1,
          2,
          5
        ],
        [
          4,
          3,
          1,
          5,
          2
        ],
        [
          4,
          3,
          2,
          1,
          5
        ],
        [
          4,
          3,
          2,
          5,
          1
        ],
        [
          4,
          3,
          5,
          1,
          2
        ],
        [
          4,
          3,
          5,
          2,
          1
        ],
        [
          4,
          5,
          1,
          2,
          3
        ],
        [
          4,
          5,
          1,
          3,
          2
        ],
        [
          4,
          5,
          2,
          1,
          3
        ],
        [
          4,
          5,
          2,
          3,
          1
        ],
        [
          4,
          5,
          3,
          1,
          2
        ],
        [
          4,
          5,
          3,
          2,
          1
        ],
        [
          5,
          1,
          2,
          3,
          4
        ],
        [
          5,
          1,
          2,
          4,
          3
        ],
        [
          5,
          1,
          3,
          2,
          4
        ],
        [
          5,
          1,
          3,
          4,
          2
        ],
        [
          5,
          1,
          4,
          2,
          3
        ],
        [
          5,
          1,
          4,
          3,
          2
        ],
        [
          5,
          2,
          1,
          3,
          4
        ],
        [
          5,
          2,
          1,
          4,
          3
        ],
        [
          5,
          2,
          3,
          1,
          4
        ],
        [
          5,
          2,
          3,
          4,
          1
        ],
        [
          5,
          2,
          4,
          1,
          3
        ],
        [
          5,
          2,
          4,
          3,
          1
        ],
        [
          5,
          3,
          1,
          2,
          4
        ],
        [
          5,
          3,
          1,
          4,
          2
        ],
        [
          5,
          3,
          2,
          1,
          4
        ],
        [
          5,
          3,
          2,
          4,
          1
        ],
        [
          5,
          3,
          4,
          1,
          2
        ],
        [
          5,
          3,
          4,
          2,
          1
        ],
        [
          5,
          4,
          1,
          2,
          3
        ],
        [
          5,
          4,
          1,
          3,
          2
        ],
        [
          5,
          4,
          2,
          1,
          3
        ],
        [
          5,
          4,
          2,
          3,
          1
        ],
        [
          5,
          4,
          3,
          1,
          2
        ],
        [
          5,
          4,
          3,
          2,
          1
        ]
      ]
    ],
    [
      [
        [
          1,
          2,
          3
        ],
        [
          1,
          3,
          2
        ],
        [
          2,
          1,
          3
        ],
        [
          2,
          3,
          1
        ],
        [
          3,
          2,
          1
        ],
        [
          3,
          1,
          2
        ]
      ],
      [],
      [
        [
          1
        ]
      ],
      [
        [
          1,
          2
        ],
        [
          2,
          1
        ]
      ],
      [
        [
          1,
          2,
          3,
          4
        ],
        [
          1,
          2,
          4,
          3
        ],
        [
          1,
          3,
          2,
          4
        ],
        [
          1,
          3,
          4,
          2
        ],
        [
          1,
          4,
          3,
          2
        ],
        [
          1,
          4,
          2,
          3
        ],
        [
          2,
          1,
          3,
          4
        ],
        [
          2,
          1,
          4,
          3
        ],
        [
          2,
          3,
          1,
          4
        ],
        [
          2,
          3,
          4,
          1
        ],
        [
          2,
          4,
          3,
          1
        ],
        [
          2,
          4,
          1,
          3
        ],
        [
          3,
          2,
          1,
          4
        ],
        [
          3,
          2,
          4,
          1
        ],
        [
          3,
          1,
          2,
          4
        ],
        [
          3,
          1,
          4,
          2
        ],
        [
          3,
          4,
          1,
          2
        ],
        [
          3,
          4,
          2,
          1
        ],
        [
          4,
          2,
          3,
          1
        ],
        [
          4,
          2,
          1,
          3
        ],
        [
          4,
          3,
          2,
          1
        ],
        [
          4,
          3,
          1,
          2
        ],
        [
          4,
          1,
          3,
          2
        ],
        [
          4,
          1,
          2,
          3
        ]
      ],
      [
        [
          1,
          2,
          3,
          4,
          5
        ],
        [
          1,
          2,
          3,
          5,
          4
        ],
        [
          1,
          2,
          4,
          3,
          5
        ],
        [
          1,
          2,
          4,
          5,
          3
        ],
        [
          1,
          2,
          5,
          4,
          3
        ],
        [
          1,
          2,
          5,
          3,
          4
        ],
        [
          1,
          3,
          2,
          4,
          5
        ],
        [
          1,
          3,
          2,
          5,
          4
        ],
        [
          1,
          3,
          4,
          2,
          5
        ],
        [
          1,
          3,
          4,
          5,
          2
        ],
        [
          1,
          3,
          5,
          4,
          2
        ],
        [
          1,
          3,
          5,
          2,
          4
        ],
        [
          1,
          4,
          3,
          2,
          5
        ],
        [
          1,
          4,
          3,
          5,
          2
        ],
        [
          1,
          4,
          2,
          3,
          5
        ],
        [
          1,
          4,
          2,
          5,
          3
        ],
        [
          1,
          4,
          5,
          2,
          3
        ],
        [
          1,
          4,
          5,
          3,
          2
        ],
        [
          1,
          5,
          3,
          4,
          2
        ],
        [
          1,
          5,
          3,
          2,
          4
        ],
        [
          1,
          5,
          4,
          3,
          2
        ],
        [
          1,
          5,
          4,
          2,
          3
        ],
        [
          1,
          5,
          2,
          4,
          3
        ],
        [
          1,
          5,
          2,
          3,
          4
        ],
        [
          2,
          1,
          3,
          4,
          5
        ],
        [
          2,
          1,
          3,
          5,
          4
        ],
        [
          2,
          1,
          4,
          3,
          5
        ],
        [
          2,
          1,
          4,
          5,
          3
        ],
        [
          2,
          1,
          5,
          4,
          3
        ],
        [
          2,
          1,
          5,
          3,
          4
        ],
        [
          2,
          3,
          1,
          4,
          5
        ],
        [
          2,
          3,
          1,
          5,
          4
        ],
        [
          2,
          3,
          4,
          1,
          5
        ],
        [
          2,
          3,
          4,
          5,
          1
        ],
        [
          2,
          3,
          5,
          4,
          1
        ],
        [
          2,
          3,
          5,
          1,
          4
        ],
        [
          2,
          4,
          3,
          1,
          5
        ],
        [
          2,
          4,
          3,
          5,
          1
        ],
        [
          2,
          4,
          1,
          3,
          5
        ],
        [
          2,
          4,
          1,
          5,
          3
        ],
        [
          2,
          4,
          5,
          1,
          3
        ],
        [
          2,
          4,
          5,
          3,
          1
        ],
        [
          2,
          5,
          3,
          4,
          1
        ],
        [
          2,
          5,
          3,
          1,
          4
        ],
        [
          2,
          5,
          4,
          3,
          1
        ],
        [
          2,
          5,
          4,
          1,
          3
        ],
        [
          2,
          5,
          1,
          4,
          3
        ],
        [
          2,
          5,
          1,
          3,
          4
        ],
        [
          3,
          2,
          1,
          4,
          5
        ],
        [
          3,
          2,
          1,
          5,
          4
        ],
        [
          3,
          2,
          4,
          1,
          5
        ],
        [
          3,
          2,
          4,
          5,
          1
        ],
        [
          3,
          2,
          5,
          4,
          1
        ],
        [
          3,
          2,
          5,
          1,
          4
        ],
        [
          3,
          1,
          2,
          4,
          5
        ],
        [
          3,
          1,
          2,
          5,
          4
        ],
        [
          3,
          1,
          4,
          2,
          5
        ],
        [
          3,
          1,
          4,
          5,
          2
        ],
        [
          3,
          1,
          5,
          4,
          2
        ],
        [
          3,
          1,
          5,
          2,
          4
        ],
        [
          3,
          4,
          1,
          2,
          5
        ],
        [
          3,
          4,
          1,
          5,
          2
        ],
        [
          3,
          4,
          2,
          1,
          5
        ],
        [
          3,
          4,
          2,
          5,
          1
        ],
        [
          3,
          4,
          5,
          2,
          1
        ],
        [
          3,
          4,
          5,
          1,
          2
        ],
        [
          3,
          5,
          1,
          4,
          2
        ],
        [
          3,
          5,
          1,
          2,
          4
        ],
        [
          3,
          5,
          4,
          1,
          2
        ],
        [
          3,
          5,
          4,
          2,
          1
        ],
        [
          3,
          5,
          2,
          4,
          1
        ],
        [
          3,
          5,
          2,
          1,
          4
        ],
        [
          4,
          2,
          3,
          1,
          5
        ],
        [
          4,
          2,
          3,
          5,
          1
        ],
        [
          4,
          2,
          1,
          3,
          5
        ],
        [
          4,
          2,
          1,
          5,
          3
        ],
        [
          4,
          2,
          5,
          1,
          3
        ],
        [
          4,
          2,
          5,
          3,
          1
        ],
        [
          4,
          3,
          2,
          1,
          5
        ],
        [
          4,
          3,
          2,
          5,
          1
        ],
        [
          4,
          3,
          1,
          2,
          5
        ],
        [
          4,
          3,
          1,
          5,
          2
        ],
        [
          4,
          3,
          5,
          1,
          2
        ],
        [
          4,
          3,
          5,
          2,
          1
        ],
        [
          4,
          1,
          3,
          2,
          5
        ],
        [
          4,
          1,
          3,
          5,
          2
        ],
        [
          4,
          1,
          2,
          3,
          5
        ],
        [
          4,
          1,
          2,
          5,
          3
        ],
        [
          4,
          1,
          5,
          2,
          3
        ],
        [
          4,
          1,
          5,
          3,
          2
        ],
        [
          4,
          5,
          3,
          1,
          2
        ],
        [
          4,
          5,
          3,
          2,
          1
        ],
        [
          4,
          5,
          1,
          3,
          2
        ],
        [
          4,
          5,
          1,
          2,
          3
        ],
        [
          4,
          5,
          2,
          1,
          3
        ],
        [
          4,
          5,
          2,
          3,
          1
        ],
        [
          5,
          2,
          3,
          4,
          1
        ],
        [
          5,
          2,
          3,
          1,
          4
        ],
        [
          5,
          2,
          4,
          3,
          1
        ],
        [
          5,
          2,
          4,
          1,
          3
        ],
        [
          5,
          2,
          1,
          4,
          3
        ],
        [
          5,
          2,
          1,
          3,
          4
        ],
        [
          5,
          3,
          2,
          4,
          1
        ],
        [
          5,
          3,
          2,
          1,
          4
        ],
        [
          5,
          3,
          4,
          2,
          1
        ],
        [
          5,
          3,
          4,
          1,
          2
        ],
        [
          5,
          3,
          1,
          4,
          2
        ],
        [
          5,
          3,
          1,
          2,
          4
        ],
        [
          5,
          4,
          3,
          2,
          1
        ],
        [
          5,
          4,
          3,
          1,
          2
        ],
        [
          5,
          4,
          2,
          3,
          1
        ],
        [
          5,
          4,
          2,
          1,
          3
        ],
        [
          5,
          4,
          1,
          2,
          3
        ],
        [
          5,
          4,
          1,
          3,
          2
        ],
        [
          5,
          1,
          3,
          4,
          2
        ],
        [
          5,
          1,
          3,
          2,
          4
        ],
        [
          5,
          1,
          4,
          3,
          2
        ],
        [
          5,
          1,
          4,
          2,
          3
        ],
        [
          5,
          1,
          2,
          4,
          3
        ],
        [
          5,
          1,
          2,
          3,
          4
        ]
      ]
    ]
  ]
}