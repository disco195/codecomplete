{
  "Summary": {
    "Name": "Kadane's Algorithm",
    "Category": "Famous Algorithms",
    "Difficulty": 2,
    "Available": true,
    "Metadata": {
      "number": 501,
      "timeOne": 0,
      "timeTwo": 1148,
      "url": "https://player.vimeo.com/video/241820432"
    }
  },
  "Prompt": "",
  "Hints": "This problem seems fairly simple until you run into negative numbers, some of which are so big in absolute value that they essentially break an otherwise good subarray into two subarrays, and some of which are small enough that there exists a subarray containing them whose numbers sum to maximum sum that you're looking for. How can you determine which group a negative number belongs to?\nRealize that at any given index in the input array, the maximum sum for a subarray ending at that index is either the maximum sum for a subarray ending at the previous index plus the number at that index, or just the number at that index. Thus, for each index in the array, you can calculate the maximum sum of a subarray ending at that index, and this can be done in one simple pass through the input array.\nHow can you alter the pass through the input array mentioned in Hint #2 so as to obtain the actual answer to the problem, that is the maximum sum of any subarray in the input array? You should be able to accomplish everything in one loop through the input array.\n",
  "SpaceTime": "O(n) time | O(1) space - where n is the length of the input array\n",
  "PromptHTML": "<p>\n  Write a function that takes in a non-empty array of integers and returns the\n  maximum sum that can be obtained by summing up all of the integers in a non-empty\n  subarray of the input array. A subarray must only contain adjacent numbers.\n</p>\n<h3>Sample Input</h3>\n<pre>\n<span class=\"CodeEditor-promptParameter\">array</span> = [3, 5, -9, 1, 3, -2, 3, 4, 7, 2, -9, 6, 3, 1, -5, 4]\n</pre>\n<h3>Sample Output</h3>\n<pre>\n19 <span class=\"CodeEditor-promptComment\">// [1, 3, -2, 3, 4, 7, 2, -9, 6, 3, 1]</span>\n</pre>\n",
  "Notes": "",
  "IsLongOutput": false,
  "Visualization": {
    "inputType": null,
    "outputType": null
  },
  "CustomInputLanguages": [
    "javascript",
    "cpp",
    "python",
    "java",
    "csharp",
    "go",
    "swift",
    "typescript"
  ],
  "CustomInputVars": [
    {
      "Name": "array",
      "Example": [
        3,
        5,
        -9,
        1,
        3,
        -2,
        3,
        4,
        7,
        2,
        -9,
        6,
        3,
        1,
        -5,
        4
      ],
      "Schema": {
        "items": {
          "type": "integer"
        },
        "minItems": 1,
        "type": "array"
      }
    }
  ],
  "Resources": {
    "cpp": {
      "Language": "cpp",
      "StartingCode": "#include <vector>\nusing namespace std;\n\nint kadanesAlgorithm(vector<int> array) {\n  // Write your code here.\n  return -1;\n}\n",
      "StartingTest": "class ProgramTest : public TestSuite {\npublic:\n  void Run() {\n\n    RunTest(\"Test Case 1\", []() {\n      assert(kadanesAlgorithm({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}) == 55);\n    });\n\n    RunTest(\"Test Case 2\", []() {\n      assert(kadanesAlgorithm({-1, -2, -3, -4, -5, -6, -7, -8, -9, -10}) == -1);\n    });\n\n    RunTest(\"Test Case 3\", []() {\n      assert(kadanesAlgorithm({-10, -2, -9, -4, -8, -6, -7, -1, -3, -5}) == -1);\n    });\n\n    RunTest(\"Test Case 4\", []() {\n      assert(kadanesAlgorithm({1, 2, 3, 4, 5, 6, -20, 7, 8, 9, 10}) == 35);\n    });\n\n    RunTest(\"Test Case 5\", []() {\n      assert(kadanesAlgorithm({1, 2, 3, 4, 5, 6, -22, 7, 8, 9, 10}) == 34);\n    });\n\n    RunTest(\"Test Case 6\", []() {\n      assert(kadanesAlgorithm({1, 2, -4, 3, 5, -9, 8, 1, 2}) == 11);\n    });\n\n    RunTest(\"Test Case 7\", []() {\n      assert(kadanesAlgorithm({3, 4, -6, 7, 8}) == 16);\n    });\n\n    RunTest(\"Test Case 8\", []() {\n      assert(kadanesAlgorithm(\n                 {3, 5, -9, 1, 3, -2, 3, 4, 7, 2, -9, 6, 3, 1, -5, 4}) == 19);\n    });\n\n    RunTest(\"Test Case 9\", []() {\n      assert(kadanesAlgorithm(\n                 {8, 5, -9, 1, 3, -2, 3, 4, 7, 2, -9, 6, 3, 1, -5, 4}) == 23);\n    });\n\n    RunTest(\"Test Case 10\", []() {\n      assert(kadanesAlgorithm(\n                 {8, 5, -9, 1, 3, -2, 3, 4, 7, 2, -9, 6, 3, 1, -5, 6}) == 24);\n    });\n\n    RunTest(\"Test Case 11\", []() {\n      assert(kadanesAlgorithm(\n                 {8, 5, -9, 1, 3, -2, 3, 4, 7, 2, -18, 6, 3, 1, -5, 6}) == 22);\n    });\n\n    RunTest(\"Test Case 12\", []() {\n      assert(kadanesAlgorithm({8, 5, -9, 1,  3, -2, 3,   4,  7, 2,  -18,\n                               6, 3, 1,  -5, 6, 20, -23, 15, 1, -3, 4}) == 35);\n    });\n\n    RunTest(\"Test Case 13\", []() {\n      assert(kadanesAlgorithm({100, 8, 5, -9, 1, 3,  -2,  3,  4, 7,  2, -18,\n                               6,   3, 1, -5, 6, 20, -23, 15, 1, -3, 4}) ==\n             135);\n    });\n\n    RunTest(\"Test Case 14\", []() {\n      assert(kadanesAlgorithm({-1000, -1000, 2, 4, -5, -6, -7, -8, -2, -100}) ==\n             6);\n    });\n  }\n};\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\npublic:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      assert(kadanesAlgorithm(\n                 {3, 5, -9, 1, 3, -2, 3, 4, 7, 2, -9, 6, 3, 1, -5, 4}) == 19);\n    });\n  }\n};\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\n#include <vector>\nusing namespace std;\n\n// O(n) time | O(1) space\nint kadanesAlgorithm(vector<int> array) {\n  int maxEndingHere = array[0];\n  int maxSoFar = array[0];\n  for (int i = 1; i < array.size(); i++) {\n    int num = array[i];\n    maxEndingHere = max(num, maxEndingHere + num);\n    maxSoFar = max(maxSoFar, maxEndingHere);\n  }\n  return maxSoFar;\n}\n"
      ]
    },
    "csharp": {
      "Language": "csharp",
      "StartingCode": "public class Program {\n\tpublic static int KadanesAlgorithm(int[] array) {\n\t\t// Write your code here.\n\t\treturn -1;\n\t}\n}\n",
      "StartingTest": "public class ProgramTest {\n\t[Test]\n\tpublic void TestCase1() {\n\t\tint[] input = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n\t\tUtils.AssertTrue(Program.KadanesAlgorithm(input) == 55);\n\t}\n\n\t[Test]\n\tpublic void TestCase2() {\n\t\tint[] input = {-1, -2, -3, -4, -5, -6, -7, -8, -9, -10};\n\t\tUtils.AssertTrue(Program.KadanesAlgorithm(input) == -1);\n\t}\n\n\t[Test]\n\tpublic void TestCase3() {\n\t\tint[] input = {-10, -2, -9, -4, -8, -6, -7, -1, -3, -5};\n\t\tUtils.AssertTrue(Program.KadanesAlgorithm(input) == -1);\n\t}\n\n\t[Test]\n\tpublic void TestCase4() {\n\t\tint[] input = {1, 2, 3, 4, 5, 6, -20, 7, 8, 9, 10};\n\t\tUtils.AssertTrue(Program.KadanesAlgorithm(input) == 35);\n\t}\n\n\t[Test]\n\tpublic void TestCase5() {\n\t\tint[] input = {1, 2, 3, 4, 5, 6, -22, 7, 8, 9, 10};\n\t\tUtils.AssertTrue(Program.KadanesAlgorithm(input) == 34);\n\t}\n\n\t[Test]\n\tpublic void TestCase6() {\n\t\tint[] input = {1, 2, -4, 3, 5, -9, 8, 1, 2};\n\t\tUtils.AssertTrue(Program.KadanesAlgorithm(input) == 11);\n\t}\n\n\t[Test]\n\tpublic void TestCase7() {\n\t\tint[] input = {3, 4, -6, 7, 8};\n\t\tUtils.AssertTrue(Program.KadanesAlgorithm(input) == 16);\n\t}\n\n\t[Test]\n\tpublic void TestCase8() {\n\t\tint[] input = {3, 5, -9, 1, 3, -2, 3, 4, 7, 2, -9, 6, 3, 1, -5, 4};\n\t\tUtils.AssertTrue(Program.KadanesAlgorithm(input) == 19);\n\t}\n\n\t[Test]\n\tpublic void TestCase9() {\n\t\tint[] input = {8, 5, -9, 1, 3, -2, 3, 4, 7, 2, -9, 6, 3, 1, -5, 4};\n\t\tUtils.AssertTrue(Program.KadanesAlgorithm(input) == 23);\n\t}\n\n\t[Test]\n\tpublic void TestCase10() {\n\t\tint[] input = {8, 5, -9, 1, 3, -2, 3, 4, 7, 2, -9, 6, 3, 1, -5, 6};\n\t\tUtils.AssertTrue(Program.KadanesAlgorithm(input) == 24);\n\t}\n\n\t[Test]\n\tpublic void TestCase11() {\n\t\tint[] input = {8, 5, -9, 1, 3, -2, 3, 4, 7, 2, -18, 6, 3, 1, -5, 6};\n\t\tUtils.AssertTrue(Program.KadanesAlgorithm(input) == 22);\n\t}\n\n\t[Test]\n\tpublic void TestCase12() {\n\t\tint[] input =\n\t\t{8, 5, -9, 1, 3, -2, 3, 4, 7, 2, -18, 6, 3, 1, -5, 6, 20, -23, 15, 1, -3, 4};\n\t\tUtils.AssertTrue(Program.KadanesAlgorithm(input) == 35);\n\t}\n\n\t[Test]\n\tpublic void TestCase13() {\n\t\tint[] input =\n\t\t{100, 8, 5, -9, 1, 3, -2, 3, 4, 7, 2, -18, 6, 3, 1, -5, 6, 20, -23, 15, 1, -3, 4};\n\t\tUtils.AssertTrue(Program.KadanesAlgorithm(input) == 135);\n\t}\n\n\t[Test]\n\tpublic void TestCase14() {\n\t\tint[] input =\n\t\t{-1000, -1000, 2, 4, -5, -6, -7, -8, -2, -100};\n\t\tUtils.AssertTrue(Program.KadanesAlgorithm(input) == 6);\n\t}\n}\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npublic class ProgramTest {\n\t[Test]\n\tpublic void TestCase1() {\n\t\tint[] input = {3, 5, -9, 1, 3, -2, 3, 4, 7, 2, -9, 6, 3, 1, -5, 4};\n\t\tUtils.AssertTrue(Program.KadanesAlgorithm(input) == 19);\n\t}\n}\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nusing System;\npublic class Program {\n\t// O(n) time | O(1) space\n\tpublic static int KadanesAlgorithm(int[] array) {\n\t\tint maxEndingHere = array[0];\n\t\tint maxSoFar = array[0];\n\t\tfor (int i = 1; i < array.Length; i++) {\n\t\t\tint num = array[i];\n\t\t\tmaxEndingHere = Math.Max(num, maxEndingHere + num);\n\t\t\tmaxSoFar = Math.Max(maxSoFar, maxEndingHere);\n\t\t}\n\t\treturn maxSoFar;\n\t}\n}\n"
      ]
    },
    "go": {
      "Language": "go",
      "StartingCode": "package main\n\nfunc KadanesAlgorithm(array []int) int {\n\t// Write your code here.\n\treturn -1\n}\n",
      "StartingTest": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\texpected := 55\n\toutput := KadanesAlgorithm([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10})\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase2(t *TestCase) {\n\texpected := -1\n\toutput := KadanesAlgorithm([]int{-1, -2, -3, -4, -5, -6, -7, -8, -9, -10})\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase3(t *TestCase) {\n\texpected := -1\n\toutput := KadanesAlgorithm([]int{-10, -2, -9, -4, -8, -6, -7, -1, -3, -5})\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase4(t *TestCase) {\n\texpected := 35\n\toutput := KadanesAlgorithm([]int{1, 2, 3, 4, 5, 6, -20, 7, 8, 9, 10})\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase5(t *TestCase) {\n\texpected := 34\n\toutput := KadanesAlgorithm([]int{1, 2, 3, 4, 5, 6, -22, 7, 8, 9, 10})\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase6(t *TestCase) {\n\texpected := 11\n\toutput := KadanesAlgorithm([]int{1, 2, -4, 3, 5, -9, 8, 1, 2})\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase7(t *TestCase) {\n\texpected := 16\n\toutput := KadanesAlgorithm([]int{3, 4, -6, 7, 8})\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase8(t *TestCase) {\n\texpected := 19\n\toutput := KadanesAlgorithm([]int{3, 5, -9, 1, 3, -2, 3, 4, 7, 2, -9, 6, 3, 1, -5, 4})\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase9(t *TestCase) {\n\texpected := 23\n\toutput := KadanesAlgorithm([]int{8, 5, -9, 1, 3, -2, 3, 4, 7, 2, -9, 6, 3, 1, -5, 4})\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase10(t *TestCase) {\n\texpected := 24\n\toutput := KadanesAlgorithm([]int{8, 5, -9, 1, 3, -2, 3, 4, 7, 2, -9, 6, 3, 1, -5, 6})\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase11(t *TestCase) {\n\texpected := 22\n\toutput := KadanesAlgorithm([]int{8, 5, -9, 1, 3, -2, 3, 4, 7, 2, -18, 6, 3, 1, -5, 6})\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase12(t *TestCase) {\n\texpected := 35\n\toutput := KadanesAlgorithm([]int{8, 5, -9, 1, 3, -2, 3, 4, 7, 2, -18, 6, 3, 1, -5, 6, 20, -23, 15, 1, -3, 4})\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase13(t *TestCase) {\n\texpected := 135\n\toutput := KadanesAlgorithm([]int{100, 8, 5, -9, 1, 3, -2, 3, 4, 7, 2, -18, 6, 3, 1, -5, 6, 20, -23, 15, 1, -3, 4})\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase14(t *TestCase) {\n\texpected := 6\n\toutput := KadanesAlgorithm([]int{-1000, -1000, 2, 4, -5, -6, -7, -8, -2, -100})\n\trequire.Equal(t, expected, output)\n}\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\texpected := 19\n\toutput := KadanesAlgorithm([]int{3, 5, -9, 1, 3, -2, 3, 4, 7, 2, -9, 6, 3, 1, -5, 4})\n\trequire.Equal(t, expected, output)\n}\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\npackage main\n\n// O(n) time | O(1) space\nfunc KadanesAlgorithm(array []int) int {\n\tmaxEndingHere := array[0]\n\tmaxSoFar := array[0]\n\tfor i := 1; i < len(array); i++ {\n\t\tnum := array[i]\n\t\tmaxEndingHere = max(num, maxEndingHere+num)\n\t\tmaxSoFar = max(maxSoFar, maxEndingHere)\n\t}\n\treturn maxSoFar\n}\n\nfunc max(a int, b int) int {\n\tif a > b {\n\t\treturn a\n\t}\n\treturn b\n}\n"
      ]
    },
    "java": {
      "Language": "java",
      "StartingCode": "import java.util.*;\n\nclass Program {\n  public static int kadanesAlgorithm(int[] array) {\n    // Write your code here.\n    return -1;\n  }\n}\n",
      "StartingTest": "class ProgramTest {\n  @Test\n  public void TestCase1() {\n    int[] input = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n    Utils.assertTrue(Program.kadanesAlgorithm(input) == 55);\n  }\n\n  @Test\n  public void TestCase2() {\n    int[] input = {-1, -2, -3, -4, -5, -6, -7, -8, -9, -10};\n    Utils.assertTrue(Program.kadanesAlgorithm(input) == -1);\n  }\n\n  @Test\n  public void TestCase3() {\n    int[] input = {-10, -2, -9, -4, -8, -6, -7, -1, -3, -5};\n    Utils.assertTrue(Program.kadanesAlgorithm(input) == -1);\n  }\n\n  @Test\n  public void TestCase4() {\n    int[] input = {1, 2, 3, 4, 5, 6, -20, 7, 8, 9, 10};\n    Utils.assertTrue(Program.kadanesAlgorithm(input) == 35);\n  }\n\n  @Test\n  public void TestCase5() {\n    int[] input = {1, 2, 3, 4, 5, 6, -22, 7, 8, 9, 10};\n    Utils.assertTrue(Program.kadanesAlgorithm(input) == 34);\n  }\n\n  @Test\n  public void TestCase6() {\n    int[] input = {1, 2, -4, 3, 5, -9, 8, 1, 2};\n    Utils.assertTrue(Program.kadanesAlgorithm(input) == 11);\n  }\n\n  @Test\n  public void TestCase7() {\n    int[] input = {3, 4, -6, 7, 8};\n    Utils.assertTrue(Program.kadanesAlgorithm(input) == 16);\n  }\n\n  @Test\n  public void TestCase8() {\n    int[] input = {3, 5, -9, 1, 3, -2, 3, 4, 7, 2, -9, 6, 3, 1, -5, 4};\n    Utils.assertTrue(Program.kadanesAlgorithm(input) == 19);\n  }\n\n  @Test\n  public void TestCase9() {\n    int[] input = {8, 5, -9, 1, 3, -2, 3, 4, 7, 2, -9, 6, 3, 1, -5, 4};\n    Utils.assertTrue(Program.kadanesAlgorithm(input) == 23);\n  }\n\n  @Test\n  public void TestCase10() {\n    int[] input = {8, 5, -9, 1, 3, -2, 3, 4, 7, 2, -9, 6, 3, 1, -5, 6};\n    Utils.assertTrue(Program.kadanesAlgorithm(input) == 24);\n  }\n\n  @Test\n  public void TestCase11() {\n    int[] input = {8, 5, -9, 1, 3, -2, 3, 4, 7, 2, -18, 6, 3, 1, -5, 6};\n    Utils.assertTrue(Program.kadanesAlgorithm(input) == 22);\n  }\n\n  @Test\n  public void TestCase12() {\n    int[] input = {8, 5, -9, 1, 3, -2, 3, 4, 7, 2, -18, 6, 3, 1, -5, 6, 20, -23, 15, 1, -3, 4};\n    Utils.assertTrue(Program.kadanesAlgorithm(input) == 35);\n  }\n\n  @Test\n  public void TestCase13() {\n    int[] input = {100, 8, 5, -9, 1, 3, -2, 3, 4, 7, 2, -18, 6, 3, 1, -5, 6, 20, -23, 15, 1, -3, 4};\n    Utils.assertTrue(Program.kadanesAlgorithm(input) == 135);\n  }\n\n  @Test\n  public void TestCase14() {\n    int[] input = {-1000, -1000, 2, 4, -5, -6, -7, -8, -2, -100};\n    Utils.assertTrue(Program.kadanesAlgorithm(input) == 6);\n  }\n}\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    int[] input = {3, 5, -9, 1, 3, -2, 3, 4, 7, 2, -9, 6, 3, 1, -5, 4};\n    Utils.assertTrue(Program.kadanesAlgorithm(input) == 19);\n  }\n}\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nclass Program {\n  // O(n) time | O(1) space\n  public static int kadanesAlgorithm(int[] array) {\n    int maxEndingHere = array[0];\n    int maxSoFar = array[0];\n    for (int i = 1; i < array.length; i++) {\n      int num = array[i];\n      maxEndingHere = Math.max(num, maxEndingHere + num);\n      maxSoFar = Math.max(maxSoFar, maxEndingHere);\n    }\n    return maxSoFar;\n  }\n}\n"
      ]
    },
    "javascript": {
      "Language": "javascript",
      "StartingCode": "function kadanesAlgorithm(array) {\n  // Write your code here.\n}\n\n// Do not edit the line below.\nexports.kadanesAlgorithm = kadanesAlgorithm;\n",
      "StartingTest": "const program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai.expect(program.kadanesAlgorithm([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])).to.deep.equal(55);\n});\n\nit('Test Case #2', function () {\n  chai.expect(program.kadanesAlgorithm([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10])).to.deep.equal(-1);\n});\n\nit('Test Case #3', function () {\n  chai.expect(program.kadanesAlgorithm([-10, -2, -9, -4, -8, -6, -7, -1, -3, -5])).to.deep.equal(-1);\n});\n\nit('Test Case #4', function () {\n  chai.expect(program.kadanesAlgorithm([1, 2, 3, 4, 5, 6, -20, 7, 8, 9, 10])).to.deep.equal(35);\n});\n\nit('Test Case #5', function () {\n  chai.expect(program.kadanesAlgorithm([1, 2, 3, 4, 5, 6, -22, 7, 8, 9, 10])).to.deep.equal(34);\n});\n\nit('Test Case #6', function () {\n  chai.expect(program.kadanesAlgorithm([1, 2, -4, 3, 5, -9, 8, 1, 2])).to.deep.equal(11);\n});\n\nit('Test Case #7', function () {\n  chai.expect(program.kadanesAlgorithm([3, 4, -6, 7, 8])).to.deep.equal(16);\n});\n\nit('Test Case #8', function () {\n  chai.expect(program.kadanesAlgorithm([3, 5, -9, 1, 3, -2, 3, 4, 7, 2, -9, 6, 3, 1, -5, 4])).to.deep.equal(19);\n});\n\nit('Test Case #9', function () {\n  chai.expect(program.kadanesAlgorithm([8, 5, -9, 1, 3, -2, 3, 4, 7, 2, -9, 6, 3, 1, -5, 4])).to.deep.equal(23);\n});\n\nit('Test Case #10', function () {\n  chai.expect(program.kadanesAlgorithm([8, 5, -9, 1, 3, -2, 3, 4, 7, 2, -9, 6, 3, 1, -5, 6])).to.deep.equal(24);\n});\n\nit('Test Case #11', function () {\n  chai.expect(program.kadanesAlgorithm([8, 5, -9, 1, 3, -2, 3, 4, 7, 2, -18, 6, 3, 1, -5, 6])).to.deep.equal(22);\n});\n\nit('Test Case #12', function () {\n  chai\n    .expect(program.kadanesAlgorithm([8, 5, -9, 1, 3, -2, 3, 4, 7, 2, -18, 6, 3, 1, -5, 6, 20, -23, 15, 1, -3, 4]))\n    .to.deep.equal(35);\n});\n\nit('Test Case #13', function () {\n  chai\n    .expect(program.kadanesAlgorithm([100, 8, 5, -9, 1, 3, -2, 3, 4, 7, 2, -18, 6, 3, 1, -5, 6, 20, -23, 15, 1, -3, 4]))\n    .to.deep.equal(135);\n});\n\nit('Test Case #14', function () {\n  chai.expect(program.kadanesAlgorithm([-1000, -1000, 2, 4, -5, -6, -7, -8, -2, -100])).to.deep.equal(6);\n});\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nit('Test Case #1', function () {\n  chai.expect(program.kadanesAlgorithm([3, 5, -9, 1, 3, -2, 3, 4, 7, 2, -9, 6, 3, 1, -5, 4])).to.deep.equal(19);\n});\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\n// O(n) time | O(1) space - where n is the length of the input array\nfunction kadanesAlgorithm(array) {\n  let maxEndingHere = array[0];\n  let maxSoFar = array[0];\n  for (let i = 1; i < array.length; i++) {\n    const num = array[i];\n    maxEndingHere = Math.max(num, maxEndingHere + num);\n    maxSoFar = Math.max(maxSoFar, maxEndingHere);\n  }\n  return maxSoFar;\n}\n\nexports.kadanesAlgorithm = kadanesAlgorithm;\n"
      ]
    },
    "python": {
      "Language": "python",
      "StartingCode": "def kadanesAlgorithm(array):\n    # Write your code here.\n    pass\n",
      "StartingTest": "import program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(program.kadanesAlgorithm([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 55)\n\n    def test_case_2(self):\n        self.assertEqual(program.kadanesAlgorithm([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]), -1)\n\n    def test_case_3(self):\n        self.assertEqual(program.kadanesAlgorithm([-10, -2, -9, -4, -8, -6, -7, -1, -3, -5]), -1)\n\n    def test_case_4(self):\n        self.assertEqual(program.kadanesAlgorithm([1, 2, 3, 4, 5, 6, -20, 7, 8, 9, 10]), 35)\n\n    def test_case_5(self):\n        self.assertEqual(program.kadanesAlgorithm([1, 2, 3, 4, 5, 6, -22, 7, 8, 9, 10]), 34)\n\n    def test_case_6(self):\n        self.assertEqual(program.kadanesAlgorithm([1, 2, -4, 3, 5, -9, 8, 1, 2]), 11)\n\n    def test_case_7(self):\n        self.assertEqual(program.kadanesAlgorithm([3, 4, -6, 7, 8]), 16)\n\n    def test_case_8(self):\n        self.assertEqual(program.kadanesAlgorithm([3, 5, -9, 1, 3, -2, 3, 4, 7, 2, -9, 6, 3, 1, -5, 4]), 19)\n\n    def test_case_9(self):\n        self.assertEqual(program.kadanesAlgorithm([8, 5, -9, 1, 3, -2, 3, 4, 7, 2, -9, 6, 3, 1, -5, 4]), 23)\n\n    def test_case_10(self):\n        self.assertEqual(program.kadanesAlgorithm([8, 5, -9, 1, 3, -2, 3, 4, 7, 2, -9, 6, 3, 1, -5, 6]), 24)\n\n    def test_case_11(self):\n        self.assertEqual(program.kadanesAlgorithm([8, 5, -9, 1, 3, -2, 3, 4, 7, 2, -18, 6, 3, 1, -5, 6]), 22)\n\n    def test_case_12(self):\n        self.assertEqual(\n            program.kadanesAlgorithm([8, 5, -9, 1, 3, -2, 3, 4, 7, 2, -18, 6, 3, 1, -5, 6, 20, -23, 15, 1, -3, 4]), 35\n        )\n\n    def test_case_13(self):\n        self.assertEqual(\n            program.kadanesAlgorithm([100, 8, 5, -9, 1, 3, -2, 3, 4, 7, 2, -18, 6, 3, 1, -5, 6, 20, -23, 15, 1, -3, 4]),\n            135,\n        )\n\n    def test_case_14(self):\n        self.assertEqual(program.kadanesAlgorithm([-1000, -1000, 2, 4, -5, -6, -7, -8, -2, -100]), 6)\n",
      "SandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(program.kadanesAlgorithm([3, 5, -9, 1, 3, -2, 3, 4, 7, 2, -9, 6, 3, 1, -5, 4]), 19)\n",
      "Solutions": [
        "# Copyright © 2020 Code Complete. All rights reserved.\n\n# O(n) time | O(1) space - where n is the length of the input array\ndef kadanesAlgorithm(array):\n    maxEndingHere = array[0]\n    maxSoFar = array[0]\n    for i in range(1, len(array)):\n        num = array[i]\n        maxEndingHere = max(num, maxEndingHere + num)\n        maxSoFar = max(maxSoFar, maxEndingHere)\n    return maxSoFar\n"
      ]
    },
    "swift": {
      "Language": "swift",
      "StartingCode": "class Program {\n  func kadanesAlgorithm(array: [Int]) -> Int {\n    // Write your code here.\n    return -1\n  }\n}\n",
      "StartingTest": "class ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      try assertEqual(55, program.kadanesAlgorithm(array: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    }\n    runTest(\"Test Case 2\") { () throws -> Void in\n      try assertEqual(-1, program.kadanesAlgorithm(array: [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]))\n    }\n    runTest(\"Test Case 3\") { () throws -> Void in\n      try assertEqual(-1, program.kadanesAlgorithm(array: [-10, -2, -9, -4, -8, -6, -7, -1, -3, -5]))\n    }\n    runTest(\"Test Case 4\") { () throws -> Void in\n      try assertEqual(35, program.kadanesAlgorithm(array: [1, 2, 3, 4, 5, 6, -20, 7, 8, 9, 10]))\n    }\n    runTest(\"Test Case 5\") { () throws -> Void in\n      try assertEqual(34, program.kadanesAlgorithm(array: [1, 2, 3, 4, 5, 6, -22, 7, 8, 9, 10]))\n    }\n    runTest(\"Test Case 6\") { () throws -> Void in\n      try assertEqual(11, program.kadanesAlgorithm(array: [1, 2, -4, 3, 5, -9, 8, 1, 2]))\n    }\n    runTest(\"Test Case 7\") { () throws -> Void in\n      try assertEqual(16, program.kadanesAlgorithm(array: [3, 4, -6, 7, 8]))\n    }\n    runTest(\"Test Case 8\") { () throws -> Void in\n      try assertEqual(19, program.kadanesAlgorithm(array: [3, 5, -9, 1, 3, -2, 3, 4, 7, 2, -9, 6, 3, 1, -5, 4]))\n    }\n    runTest(\"Test Case 9\") { () throws -> Void in\n      try assertEqual(23, program.kadanesAlgorithm(array: [8, 5, -9, 1, 3, -2, 3, 4, 7, 2, -9, 6, 3, 1, -5, 4]))\n    }\n    runTest(\"Test Case 10\") { () throws -> Void in\n      try assertEqual(24, program.kadanesAlgorithm(array: [8, 5, -9, 1, 3, -2, 3, 4, 7, 2, -9, 6, 3, 1, -5, 6]))\n    }\n    runTest(\"Test Case 11\") { () throws -> Void in\n      try assertEqual(22, program.kadanesAlgorithm(array: [8, 5, -9, 1, 3, -2, 3, 4, 7, 2, -18, 6, 3, 1, -5, 6]))\n    }\n    runTest(\"Test Case 12\") { () throws -> Void in\n      try assertEqual(35, program.kadanesAlgorithm(array: [8, 5, -9, 1, 3, -2, 3, 4, 7, 2, -18, 6, 3, 1, -5, 6, 20, -23, 15, 1, -3, 4]))\n    }\n    runTest(\"Test Case 13\") { () throws -> Void in\n      try assertEqual(135, program.kadanesAlgorithm(array: [100, 8, 5, -9, 1, 3, -2, 3, 4, 7, 2, -18, 6, 3, 1, -5, 6, 20, -23, 15, 1, -3, 4]))\n    }\n    runTest(\"Test Case 14\") { () throws -> Void in\n      try assertEqual(6, program.kadanesAlgorithm(array: [-1000, -1000, 2, 4, -5, -6, -7, -8, -2, -100]))\n    }\n  }\n}\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      try assertEqual(19, program.kadanesAlgorithm(array: [3, 5, -9, 1, 3, -2, 3, 4, 7, 2, -9, 6, 3, 1, -5, 4]))\n    }\n  }\n}\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nclass Program {\n  // O(n) time | O(1) space)\n  func kadanesAlgorithm(array: [Int]) -> Int {\n    if array.count > 0 {\n      var maxEndingHere = array.first\n      var maxSoFar = array.first\n\n      for i in 1 ..< array.count {\n        let currentNumber = array[i]\n\n        maxEndingHere = max(currentNumber, currentNumber + maxEndingHere!)\n        maxSoFar = max(maxSoFar!, maxEndingHere!)\n      }\n\n      return maxSoFar!\n    } else {\n      return -1\n    }\n  }\n}\n"
      ]
    },
    "typescript": {
      "Language": "typescript",
      "StartingCode": "export function kadanesAlgorithm(array: number[]) {\n  // Write your code here.\n  return -1;\n}\n",
      "StartingTest": "",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nit('Test Case #1', function () {\n  chai.expect(program.kadanesAlgorithm([3, 5, -9, 1, 3, -2, 3, 4, 7, 2, -9, 6, 3, 1, -5, 4])).to.deep.equal(19);\n});\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\n// O(n) time | O(1) space - where n is the length of the input array\nexport function kadanesAlgorithm(array: number[]) {\n  let maxEndingHere = array[0];\n  let maxSoFar = array[0];\n  for (let i = 1; i < array.length; i++) {\n    const num = array[i];\n    maxEndingHere = Math.max(num, maxEndingHere + num);\n    maxSoFar = Math.max(maxSoFar, maxEndingHere);\n  }\n  return maxSoFar;\n}\n"
      ]
    }
  },
  "JSONTestLanguages": [
    "javascript",
    "cpp",
    "python",
    "java",
    "csharp",
    "go",
    "swift",
    "typescript"
  ],
  "JSONTests": [
    {
      "array": [
        3,
        5,
        -9,
        1,
        3,
        -2,
        3,
        4,
        7,
        2,
        -9,
        6,
        3,
        1,
        -5,
        4
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10
      ]
    },
    {
      "array": [
        -1,
        -2,
        -3,
        -4,
        -5,
        -6,
        -7,
        -8,
        -9,
        -10
      ]
    },
    {
      "array": [
        -10,
        -2,
        -9,
        -4,
        -8,
        -6,
        -7,
        -1,
        -3,
        -5
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        5,
        6,
        -20,
        7,
        8,
        9,
        10
      ]
    },
    {
      "array": [
        1,
        2,
        3,
        4,
        5,
        6,
        -22,
        7,
        8,
        9,
        10
      ]
    },
    {
      "array": [
        1,
        2,
        -4,
        3,
        5,
        -9,
        8,
        1,
        2
      ]
    },
    {
      "array": [
        3,
        4,
        -6,
        7,
        8
      ]
    },
    {
      "array": [
        8,
        5,
        -9,
        1,
        3,
        -2,
        3,
        4,
        7,
        2,
        -9,
        6,
        3,
        1,
        -5,
        4
      ]
    },
    {
      "array": [
        8,
        5,
        -9,
        1,
        3,
        -2,
        3,
        4,
        7,
        2,
        -9,
        6,
        3,
        1,
        -5,
        6
      ]
    },
    {
      "array": [
        8,
        5,
        -9,
        1,
        3,
        -2,
        3,
        4,
        7,
        2,
        -18,
        6,
        3,
        1,
        -5,
        6
      ]
    },
    {
      "array": [
        8,
        5,
        -9,
        1,
        3,
        -2,
        3,
        4,
        7,
        2,
        -18,
        6,
        3,
        1,
        -5,
        6,
        20,
        -23,
        15,
        1,
        -3,
        4
      ]
    },
    {
      "array": [
        100,
        8,
        5,
        -9,
        1,
        3,
        -2,
        3,
        4,
        7,
        2,
        -18,
        6,
        3,
        1,
        -5,
        6,
        20,
        -23,
        15,
        1,
        -3,
        4
      ]
    },
    {
      "array": [
        -1000,
        -1000,
        2,
        4,
        -5,
        -6,
        -7,
        -8,
        -2,
        -100
      ]
    },
    {
      "array": [
        -2,
        -1
      ]
    },
    {
      "array": [
        -2,
        1
      ]
    }
  ],
  "JSONAnswers": [
    [
      19,
      55,
      -1,
      -1,
      35,
      34,
      11,
      16,
      23,
      24,
      22,
      35,
      135,
      6,
      -1,
      1
    ]
  ]
}