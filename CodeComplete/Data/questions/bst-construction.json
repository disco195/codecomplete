{
  "Summary": {
    "Name": "BST Construction",
    "Category": "Binary Search Trees",
    "Difficulty": 2,
    "Available": true,
    "Metadata": {
      "number": 402,
      "timeOne": 0,
      "timeTwo": 1707,
      "url": "https://player.vimeo.com/video/228491674"
    }
  },
  "Prompt": "",
  "Hints": "As you try to insert, find, or a remove a value into, in, or from a BST, you will have to traverse the tree's nodes. The BST property allows you to eliminate half of the remaining tree at each node that you traverse: if the target value is strictly smaller than a node's value, then it must be (or can only be) located to the left of the node, otherwise it must be (or can only be) to the right of that node.\nTraverse the BST all the while applying the logic described in Hint #1. For insertion, add the target value to the BST once you reach a leaf (None / null) node. For searching, if you reach a leaf node without having found the target value that means the value isn't in the BST. For removal, consider the various cases that you might encounter: the node you need to remove might have two children nodes, one, or none; it might also be the root node; make sure to account for all of these cases.\nWhat are the advantages and disadvantages of implementing these methods iteratively as opposed to recursively?\n",
  "SpaceTime": "Average (all 3 methods): O(log(n)) time | O(1) space - where n is the number of nodes in the BST\nWorst (all 3 methods): O(n) time | O(1) space - where n is the number of nodes in the BST\n",
  "PromptHTML": "<p>\n  Write a <span>BST</span> class for a Binary Search Tree. The class should\n  support:\n</p>\n<ul>\n  <li>- Inserting values with the <span>insert</span> method.</li>\n  <li>\n    - Removing values with the <span>remove</span> method; this method should\n    only remove the first instance of a given value.\n  </li>\n  <li>- Searching for values with the <span>contains</span> method.</li>\n</ul>\n<p>\n  Note that you can't remove values from a single-node tree. In other words,\n  calling the <span>remove</span> method on a single-node tree should simply not\n  do anything.\n</p>\n<p>\n  Each <span>BST</span> node has an integer <span>value</span>, a\n  <span>left</span> child node, and a <span>right</span> child node. A node is\n  said to be a valid <span>BST</span> node if and only if it satisfies the BST\n  property: its <span>value</span> is strictly greater than the values of every\n  node to its left; its <span>value</span> is less than or equal to the values\n  of every node to its right; and its children nodes are either valid\n  <span>BST</span> nodes themselves or <span>None</span> / <span>null</span>.\n</p>\n<h3>Sample Usage</h3>\n<pre>\n<span class=\"CodeEditor-promptComment\">// Assume the following BST has already been created:</span>\n         10\n       /     \\\n      5      15\n    /   \\   /   \\\n   2     5 13   22\n /           \\\n1            14\n\n<span class=\"CodeEditor-promptComment\">// All operations below are performed sequentially.</span>\n<span class=\"CodeEditor-promptParameter\">insert</span>(12):   10\n            /     \\\n           5      15\n         /   \\   /   \\\n        2     5 13   22\n      /        /  \\\n     1        12  14\n\n<span class=\"CodeEditor-promptParameter\">remove</span>(10):   12\n            /     \\\n           5      15\n         /   \\   /   \\\n        2     5 13   22\n      /           \\\n     1            14\n\n<span class=\"CodeEditor-promptParameter\">contains</span>(15): true\n</pre>\n",
  "Notes": "",
  "IsLongOutput": true,
  "Visualization": {
    "inputType": null,
    "outputType": null
  },
  "CustomInputLanguages": [
    "javascript",
    "cpp",
    "python",
    "java",
    "csharp",
    "go",
    "swift",
    "typescript"
  ],
  "CustomInputVars": [
    {
      "Name": "rootValue",
      "Example": 10,
      "Schema": {
        "type": "integer"
      }
    },
    {
      "Name": "classMethodsToCall",
      "Example": [
        {
          "arguments": [
            5
          ],
          "method": "insert"
        },
        {
          "arguments": [
            15
          ],
          "method": "insert"
        },
        {
          "arguments": [
            2
          ],
          "method": "insert"
        },
        {
          "arguments": [
            5
          ],
          "method": "insert"
        },
        {
          "arguments": [
            13
          ],
          "method": "insert"
        },
        {
          "arguments": [
            22
          ],
          "method": "insert"
        },
        {
          "arguments": [
            1
          ],
          "method": "insert"
        },
        {
          "arguments": [
            14
          ],
          "method": "insert"
        },
        {
          "arguments": [
            12
          ],
          "method": "insert"
        },
        {
          "arguments": [
            10
          ],
          "method": "remove"
        },
        {
          "arguments": [
            15
          ],
          "method": "contains"
        }
      ],
      "Schema": {
        "description": "These methods will be called in the order that they appear in below\non a <span>BST</span> built from the <span>rootValue</span> and with their respective arguments.\n",
        "items": {
          "properties": {
            "arguments": {
              "items": {
                "type": "integer"
              },
              "maxItems": 1,
              "minItems": 1,
              "type": "array"
            },
            "method": {
              "enum": [
                "contains",
                "insert",
                "remove"
              ],
              "type": "string"
            }
          },
          "required": [
            "method",
            "arguments"
          ],
          "type": "object"
        },
        "type": "array"
      }
    }
  ],
  "Resources": {
    "cpp": {
      "Language": "cpp",
      "StartingCode": "#include <vector>\nusing namespace std;\n\n// Do not edit the class below except for\n// the insert, contains, and remove methods.\n// Feel free to add new properties and methods\n// to the class.\nclass BST {\npublic:\n  int value;\n  BST *left;\n  BST *right;\n\n  BST(int val) {\n    value = val;\n    left = NULL;\n    right = NULL;\n  }\n\n  BST &insert(int val) {\n    // Write your code here.\n    // Do not edit the return statement of this method.\n    return *this;\n  }\n\n  bool contains(int val) {\n    // Write your code here.\n    return false;\n  }\n\n  BST &remove(int val) {\n    // Write your code here.\n    // Do not edit the return statement of this method.\n    return *this;\n  }\n};\n",
      "StartingTest": "vector<int> inOrderTraverse(BST *tree, vector<int> array) {\n  if (tree->left != NULL) {\n    array = inOrderTraverse(tree->left, array);\n  }\n  array.push_back(tree->value);\n  if (tree->right != NULL) {\n    array = inOrderTraverse(tree->right, array);\n  }\n  return array;\n}\n\nclass ProgramTest : public TestSuite {\npublic:\n  void Run() {\n\n    RunTest(\"Test Case 1\", []() {\n      BST test(10);\n      test.insert(5).insert(15).insert(5).insert(2).insert(14).insert(22);\n      assert(test.left != NULL);\n      assert(test.left->value == 5);\n    });\n\n    RunTest(\"Test Case 2\", []() {\n      BST test(10);\n      test.insert(5).insert(15).insert(5).insert(2).insert(14).insert(22);\n      assert(test.right != NULL);\n      assert(test.right->right->value == 22);\n    });\n\n    RunTest(\"Test Case 3\", []() {\n      BST test(10);\n      test.insert(5).insert(15).insert(5).insert(2).insert(14).insert(22);\n      assert(test.right != NULL);\n      assert(test.right->left->value == 14);\n    });\n\n    RunTest(\"Test Case 4\", []() {\n      BST test(10);\n      test.insert(5).insert(15).insert(5).insert(2).insert(14).insert(22);\n      assert(test.left != NULL);\n      assert(test.left->right->value == 5);\n    });\n\n    RunTest(\"Test Case 5\", []() {\n      BST test(10);\n      test.insert(5).insert(15).insert(5).insert(2).insert(14).insert(22);\n      assert(test.left != NULL);\n      assert(test.left->left->value == 2);\n    });\n\n    RunTest(\"Test Case 6\", []() {\n      BST test(10);\n      test.insert(5).insert(15).insert(5).insert(2).insert(14).insert(22);\n      assert(test.left != NULL);\n      assert(test.left->left->left == NULL);\n    });\n\n    RunTest(\"Test Case 7\", []() {\n      BST test(10);\n      test.insert(5).insert(15).insert(5).insert(2).insert(14).insert(22);\n      assert(test.right != NULL);\n      assert(test.right->right->right == NULL);\n    });\n\n    RunTest(\"Test Case 8\", []() {\n      BST test(10);\n      test.insert(5).insert(15).insert(5).insert(2).insert(14).insert(22);\n      assert(test.contains(15) == 1);\n    });\n\n    RunTest(\"Test Case 9\", []() {\n      BST test(10);\n      test.insert(5).insert(15).insert(5).insert(2).insert(14).insert(22);\n      assert(test.contains(2) == 1);\n    });\n\n    RunTest(\"Test Case 10\", []() {\n      BST test(10);\n      test.insert(5).insert(15).insert(5).insert(2).insert(14).insert(22);\n      assert(test.contains(5) == 1);\n    });\n\n    RunTest(\"Test Case 11\", []() {\n      BST test(10);\n      test.insert(5).insert(15).insert(5).insert(2).insert(14).insert(22);\n      assert(test.contains(10) == 1);\n    });\n\n    RunTest(\"Test Case 12\", []() {\n      BST test(10);\n      test.insert(5).insert(15).insert(5).insert(2).insert(14).insert(22);\n      assert(test.contains(22) == 1);\n    });\n\n    RunTest(\"Test Case 13\", []() {\n      BST test(10);\n      test.insert(5).insert(15).insert(5).insert(2).insert(14).insert(22);\n      assert(test.contains(23) == 0);\n    });\n\n    RunTest(\"Test Case 14\", []() {\n      BST test(10);\n      test.insert(15).insert(11).insert(22).remove(10);\n      vector<int> expected{11, 15, 22};\n      assert(inOrderTraverse(&test, {}) == expected);\n    });\n\n    RunTest(\"Test Case 15\", []() {\n      BST test(10);\n      test.insert(5).insert(7).insert(2).remove(10);\n      vector<int> expected{2, 5, 7};\n      assert(inOrderTraverse(&test, {}) == expected);\n    });\n\n    RunTest(\"Test Case 16\", []() {\n      BST test(10);\n      test.insert(5)\n          .insert(15)\n          .insert(22)\n          .insert(17)\n          .insert(34)\n          .insert(7)\n          .insert(2)\n          .insert(5)\n          .insert(1)\n          .insert(35)\n          .insert(27)\n          .insert(16)\n          .insert(30)\n          .remove(22)\n          .remove(17);\n      vector<int> expected{1, 2, 5, 5, 7, 10, 15, 16, 27, 30, 34, 35};\n      assert(inOrderTraverse(&test, {}) == expected);\n    });\n\n    RunTest(\"Test Case 17\", []() {\n      BST test(10);\n      test.insert(5)\n          .insert(15)\n          .insert(22)\n          .insert(17)\n          .insert(34)\n          .insert(7)\n          .insert(2)\n          .insert(5)\n          .insert(1)\n          .insert(35)\n          .insert(27)\n          .insert(16)\n          .insert(30)\n          .remove(22)\n          .remove(17);\n      assert(test.right != NULL);\n      assert(test.right->right->value == 27);\n    });\n\n    RunTest(\"Test Case 18\", []() {\n      BST test(10);\n      test.insert(5)\n          .insert(15)\n          .insert(22)\n          .insert(17)\n          .insert(34)\n          .insert(7)\n          .insert(2)\n          .insert(5)\n          .insert(1)\n          .insert(35)\n          .insert(27)\n          .insert(16)\n          .insert(30)\n          .remove(22)\n          .remove(17);\n      assert(test.right != NULL);\n      assert(test.right->right->left->value == 16);\n    });\n  }\n};\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest : public TestSuite {\npublic:\n  void Run() {\n    RunTest(\"Test Case 1\", []() {\n      BST* root = new BST(10);\n      root->left = new BST(5);\n      root->left->left = new BST(2);\n      root->left->left->left = new BST(1);\n      root->left->right = new BST(5);\n      root->right = new BST(15);\n      root->right->left = new BST(13);\n      root->right->left->right = new BST(14);\n      root->right->right = new BST(22);\n      \n      root->insert(12);\n      assert(root->right->left->left->value == 12);\n      \n      root->remove(10);\n      assert(root->contains(10) == false);\n      assert(root->value == 12);\n\n      assert(root->contains(15));\n    });\n  }\n};\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\n#include <vector>\nusing namespace std;\n\nclass BST {\npublic:\n  int value;\n  BST *left;\n  BST *right;\n\n  BST(int val) {\n    value = val;\n    left = NULL;\n    right = NULL;\n  }\n\n  // Average: O(log(n)) time | O(log(n)) space\n  // Worst: O(n) time | O(n) space\n  BST &insert(int val) {\n    if (val < value) {\n      if (left == NULL) {\n        BST *newBST = new BST(val);\n        left = newBST;\n      } else {\n        left->insert(val);\n      }\n    } else {\n      if (right == NULL) {\n        BST *newBST = new BST(val);\n        right = newBST;\n      } else {\n        right->insert(val);\n      }\n    }\n    return *this;\n  }\n\n  // Average: O(log(n)) time | O(log(n)) space\n  // Worst: O(n) time | O(n) space\n  bool contains(int val) {\n    if (val < value) {\n      if (left == NULL) {\n        return false;\n      } else {\n        return left->contains(val);\n      }\n    } else if (val > value) {\n      if (right == NULL) {\n        return false;\n      } else {\n        return right->contains(val);\n      }\n    } else {\n      return true;\n    }\n  }\n\n  // Average: O(log(n)) time | O(log(n)) space\n  // Worst: O(n) time | O(n) space\n  BST &remove(int val, BST *parent = NULL) {\n    if (val < value) {\n      if (left != NULL) {\n        left->remove(val, this);\n      }\n    } else if (val > value) {\n      if (right != NULL) {\n        right->remove(val, this);\n      }\n    } else {\n      if (left != NULL && right != NULL) {\n        value = right->getMinValue();\n        right->remove(value, this);\n      } else if (parent == NULL) {\n        if (left != NULL) {\n          value = left->value;\n          right = left->right;\n          left = left->left;\n        } else if (right != NULL) {\n          value = right->value;\n          left = right->left;\n          right = right->right;\n        } else {\n          // This is a single-node tree; do nothing.\n        }\n      } else if (parent->left == this) {\n        parent->left = left != NULL ? left : right;\n      } else if (parent->right == this) {\n        parent->right = left != NULL ? left : right;\n      }\n    }\n    return *this;\n  }\n\n  int getMinValue() {\n    if (left == NULL) {\n      return value;\n    } else {\n      return left->getMinValue();\n    }\n  }\n};\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\n#include <vector>\nusing namespace std;\n\nclass BST {\npublic:\n  int value;\n  BST *left;\n  BST *right;\n\n  BST(int val) {\n    value = val;\n    left = NULL;\n    right = NULL;\n  }\n\n  // Average: O(log(n)) time | O(1) space\n  // Worst: O(n) time | O(1) space\n  BST &insert(int val) {\n    BST *currentNode = this;\n    while (true) {\n      if (val < currentNode->value) {\n        if (currentNode->left == NULL) {\n          BST *newNode = new BST(val);\n          currentNode->left = newNode;\n          break;\n        } else {\n          currentNode = currentNode->left;\n        }\n      } else {\n        if (currentNode->right == NULL) {\n          BST *newNode = new BST(val);\n          currentNode->right = newNode;\n          break;\n        } else {\n          currentNode = currentNode->right;\n        }\n      }\n    }\n    return *this;\n  }\n\n  // Average: O(log(n)) time | O(1) space\n  // Worst: O(n) time | O(1) space\n  bool contains(int val) {\n    BST *currentNode = this;\n    while (currentNode != NULL) {\n      if (val < currentNode->value) {\n        currentNode = currentNode->left;\n      } else if (val > currentNode->value) {\n        currentNode = currentNode->right;\n      } else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // Average: O(log(n)) time | O(1) space\n  // Worst: O(n) time | O(1) space\n  BST &remove(int val, BST *parentNode = NULL) {\n    BST *currentNode = this;\n    while (currentNode != NULL) {\n      if (val < currentNode->value) {\n        parentNode = currentNode;\n        currentNode = currentNode->left;\n      } else if (val > currentNode->value) {\n        parentNode = currentNode;\n        currentNode = currentNode->right;\n      } else {\n        if (currentNode->left != NULL && currentNode->right != NULL) {\n          currentNode->value = currentNode->right->getMinValue();\n          currentNode->right->remove(currentNode->value, currentNode);\n        } else if (parentNode == NULL) {\n          if (currentNode->left != NULL) {\n            currentNode->value = currentNode->left->value;\n            currentNode->right = currentNode->left->right;\n            currentNode->left = currentNode->left->left;\n          } else if (currentNode->right != NULL) {\n            currentNode->value = currentNode->right->value;\n            currentNode->left = currentNode->right->left;\n            currentNode->right = currentNode->right->right;\n          } else {\n            // This is a single-node tree; do nothing.\n          }\n        } else if (parentNode->left == currentNode) {\n          parentNode->left = currentNode->left != NULL ? currentNode->left\n                                                       : currentNode->right;\n        } else if (parentNode->right == currentNode) {\n          parentNode->right = currentNode->left != NULL ? currentNode->left\n                                                        : currentNode->right;\n        }\n        break;\n      }\n    }\n    return *this;\n  }\n\n  int getMinValue() {\n    if (left == NULL) {\n      return value;\n    } else {\n      return left->getMinValue();\n    }\n  }\n};\n"
      ]
    },
    "csharp": {
      "Language": "csharp",
      "StartingCode": "public class Program {\n\tpublic class BST {\n\t\tpublic int value;\n\t\tpublic BST left;\n\t\tpublic BST right;\n\n\t\tpublic BST(int value) {\n\t\t\tthis.value = value;\n\t\t}\n\n\t\tpublic BST Insert(int value) {\n\t\t\t// Write your code here.\n\t\t\t// Do not edit the return statement of this method.\n\t\t\treturn this;\n\t\t}\n\n\t\tpublic bool Contains(int value) {\n\t\t\t// Write your code here.\n\t\t\treturn false;\n\t\t}\n\n\t\tpublic BST Remove(int value) {\n\t\t\t// Write your code here.\n\t\t\t// Do not edit the return statement of this method.\n\t\t\treturn this;\n\t\t}\n\t}\n}\n",
      "StartingTest": "using System.Collections.Generic;\n\npublic class ProgramTest {\n\tstatic Program.BST test1;\n\tstatic Program.BST test2;\n\tstatic Program.BST test3;\n\tstatic Program.BST test4;\n\n\tstatic ProgramTest() {\n\t\ttest1 = new Program.BST(10);\n\t\ttest1.Insert(5).Insert(15).Insert(5).Insert(2).Insert(14).Insert(22);\n\t\ttest2 = new Program.BST(10);\n\t\ttest2.Insert(15).Insert(11).Insert(22).Remove(10);\n\t\ttest3 = new Program.BST(10);\n\t\ttest3.Insert(5).Insert(7).Insert(2).Remove(10);\n\t\ttest4 = new Program.BST(10);\n\t\ttest4.Insert(5).Insert(15).Insert(22).Insert(17).Insert(34).Insert(7).Insert(2).\n\t\tInsert(5).Insert(1).Insert(35).Insert(27).Insert(16).Insert(30).Remove(22).Remove(17);\n\t}\n\n\tprivate static void InOrderTraverse(Program.BST tree, List<int> array) {\n\t\tif (tree.left != null) {\n\t\t\tInOrderTraverse(tree.left, array);\n\t\t}\n\t\tarray.Add(tree.value);\n\t\tif (tree.right != null) {\n\t\t\tInOrderTraverse(tree.right, array);\n\t\t}\n\t}\n\n\tprivate static bool compare(List<int> array1, List<int> array2) {\n\t\tif (array1.Count != array2.Count) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (int i = 0; i < array1.Count; i++) {\n\t\t\tif (!array1[i].Equals(array2[i])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t[Test]\n\tpublic void TestCase1() {\n\t\tUtils.AssertTrue(ProgramTest.test1.left.value == 5);\n\t}\n\n\t[Test]\n\tpublic void TestCase2() {\n\t\tUtils.AssertTrue(ProgramTest.test1.right.right.value == 22);\n\t}\n\n\t[Test]\n\tpublic void TestCase3() {\n\t\tUtils.AssertTrue(ProgramTest.test1.right.left.value == 14);\n\t}\n\n\t[Test]\n\tpublic void TestCase4() {\n\t\tUtils.AssertTrue(ProgramTest.test1.left.right.value == 5);\n\t}\n\n\t[Test]\n\tpublic void TestCase5() {\n\t\tUtils.AssertTrue(ProgramTest.test1.left.left.value == 2);\n\t}\n\n\t[Test]\n\tpublic void TestCase6() {\n\t\tUtils.AssertTrue(ProgramTest.test1.left.left.left == null);\n\t}\n\n\t[Test]\n\tpublic void TestCase7() {\n\t\tUtils.AssertTrue(ProgramTest.test1.right.right.right == null);\n\t}\n\n\t[Test]\n\tpublic void TestCase8() {\n\t\tUtils.AssertTrue(ProgramTest.test1.Contains(15) == true);\n\t}\n\n\t[Test]\n\tpublic void TestCase9() {\n\t\tUtils.AssertTrue(ProgramTest.test1.Contains(2) == true);\n\t}\n\n\t[Test]\n\tpublic void TestCase10() {\n\t\tUtils.AssertTrue(ProgramTest.test1.Contains(5) == true);\n\t}\n\n\t[Test]\n\tpublic void TestCase11() {\n\t\tUtils.AssertTrue(ProgramTest.test1.Contains(10) == true);\n\t}\n\n\t[Test]\n\tpublic void TestCase12() {\n\t\tUtils.AssertTrue(ProgramTest.test1.Contains(22) == true);\n\t}\n\n\t[Test]\n\tpublic void TestCase13() {\n\t\tUtils.AssertTrue(ProgramTest.test1.Contains(23) == false);\n\t}\n\n\t[Test]\n\tpublic void TestCase14() {\n\t\tList<int> expected = new List<int>(){\n\t\t\t11, 15, 22\n\t\t};\n\t\tList<int> output = new List<int>();\n\t\tProgramTest.InOrderTraverse(ProgramTest.test2, output);\n\t\tUtils.AssertTrue(ProgramTest.compare(output, expected));\n\t}\n\n\t[Test]\n\tpublic void TestCase15() {\n\t\tList<int> expected = new List<int>(){\n\t\t\t2, 5, 7\n\t\t};\n\t\tList<int> output = new List<int>();\n\t\tProgramTest.InOrderTraverse(ProgramTest.test3, output);\n\t\tUtils.AssertTrue(ProgramTest.compare(output, expected));\n\t}\n\n\t[Test]\n\tpublic void TestCase16() {\n\t\tList<int> expected = new List<int>(){\n\t\t\t1, 2, 5, 5, 7, 10, 15, 16, 27, 30, 34, 35\n\t\t};\n\t\tList<int> output = new List<int>();\n\t\tProgramTest.InOrderTraverse(ProgramTest.test4, output);\n\t\tUtils.AssertTrue(ProgramTest.compare(output, expected));\n\t}\n\n\t[Test]\n\tpublic void TestCase17() {\n\t\tUtils.AssertTrue(ProgramTest.test4.right.right.value == 27);\n\t}\n\n\t[Test]\n\tpublic void TestCase18() {\n\t\tUtils.AssertTrue(ProgramTest.test4.right.right.left.value == 16);\n\t}\n}\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nusing System.Collections.Generic;\n\npublic class ProgramTest {\n\t[Test]\n\tpublic void TestCase1() {\n\t\tvar root = new Program.BST(10);\n\t\troot.left = new Program.BST(5);\n\t\troot.left.left = new Program.BST(2);\n\t\troot.left.left.left = new Program.BST(1);\n\t\troot.left.right = new Program.BST(5);\n\t\troot.right = new Program.BST(15);\n\t\troot.right.left = new Program.BST(13);\n\t\troot.right.left.right = new Program.BST(14);\n\t\troot.right.right = new Program.BST(22);\n\n\t\troot.Insert(12);\n\t\tUtils.AssertTrue(root.right.left.left.value == 12);\n\n\t\troot.Remove(10);\n\t\tUtils.AssertTrue(root.Contains(10) == false);\n\t\tUtils.AssertTrue(root.value == 12);\n\n\t\tUtils.AssertTrue(root.Contains(15));\n\t}\n}\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\npublic class Program {\n\tpublic class BST {\n\t\tpublic int value;\n\t\tpublic BST left;\n\t\tpublic BST right;\n\n\t\tpublic BST(int value) {\n\t\t\tthis.value = value;\n\t\t}\n\n\t\t// Average: O(log(n)) time | O(log(n)) space\n\t\t// Worst: O(n) time | O(n) space\n\t\tpublic BST Insert(int value) {\n\t\t\tif (value < this.value) {\n\t\t\t\tif (left == null) {\n\t\t\t\t\tBST newBST = new BST(value);\n\t\t\t\t\tleft = newBST;\n\t\t\t\t} else {\n\t\t\t\t\tleft.Insert(value);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (right == null) {\n\t\t\t\t\tBST newBST = new BST(value);\n\t\t\t\t\tright = newBST;\n\t\t\t\t} else {\n\t\t\t\t\tright.Insert(value);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\n\t\t// Average: O(log(n)) time | O(log(n)) space\n\t\t// Worst: O(n) time | O(n) space\n\t\tpublic bool Contains(int value) {\n\t\t\tif (value < this.value) {\n\t\t\t\tif (left == null) {\n\t\t\t\t\treturn false;\n\t\t\t\t} else {\n\t\t\t\t\treturn left.Contains(value);\n\t\t\t\t}\n\t\t\t} else if (value > this.value) {\n\t\t\t\tif (right == null) {\n\t\t\t\t\treturn false;\n\t\t\t\t} else {\n\t\t\t\t\treturn right.Contains(value);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\t// Average: O(log(n)) time | O(log(n)) space\n\t\t// Worst: O(n) time | O(n) space\n\t\tpublic BST Remove(int value) {\n\t\t\tRemove(value, null);\n\t\t\treturn this;\n\t\t}\n\n\t\tpublic void Remove(int value, BST parent) {\n\t\t\tif (value < this.value) {\n\t\t\t\tif (left != null) {\n\t\t\t\t\tleft.Remove(value, this);\n\t\t\t\t}\n\t\t\t} else if (value > this.value) {\n\t\t\t\tif (right != null) {\n\t\t\t\t\tright.Remove(value, this);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (left != null && right != null) {\n\t\t\t\t\tthis.value = right.getMinValue();\n\t\t\t\t\tright.Remove(this.value, this);\n\t\t\t\t} else if (parent == null) {\n\t\t\t\t\tif (left != null) {\n\t\t\t\t\t\tthis.value = left.value;\n\t\t\t\t\t\tright = left.right;\n\t\t\t\t\t\tleft = left.left;\n\t\t\t\t\t} else if (right != null) {\n\t\t\t\t\t\tthis.value = right.value;\n\t\t\t\t\t\tleft = right.left;\n\t\t\t\t\t\tright = right.right;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// This is a single-node tree; do nothing.\n\t\t\t\t\t}\n\t\t\t\t} else if (parent.left == this) {\n\t\t\t\t\tparent.left = left != null ? left : right;\n\t\t\t\t} else if (parent.right == this) {\n\t\t\t\t\tparent.right = left != null ? left : right;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tpublic int getMinValue() {\n\t\t\tif (left == null) {\n\t\t\t\treturn this.value;\n\t\t\t} else {\n\t\t\t\treturn left.getMinValue();\n\t\t\t}\n\t\t}\n\t}\n}\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\npublic class Program {\n\tpublic class BST {\n\t\tpublic int value;\n\t\tpublic BST left;\n\t\tpublic BST right;\n\n\t\tpublic BST(int value) {\n\t\t\tthis.value = value;\n\t\t}\n\n\t\t// Average: O(log(n)) time | O(1) space\n\t\t// Worst: O(n) time | O(1) space\n\t\tpublic BST Insert(int value) {\n\t\t\tBST currentNode = this;\n\t\t\twhile (true) {\n\t\t\t\tif (value < currentNode.value) {\n\t\t\t\t\tif (currentNode.left == null) {\n\t\t\t\t\t\tBST newNode = new BST(value);\n\t\t\t\t\t\tcurrentNode.left = newNode;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcurrentNode = currentNode.left;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (currentNode.right == null) {\n\t\t\t\t\t\tBST newNode = new BST(value);\n\t\t\t\t\t\tcurrentNode.right = newNode;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcurrentNode = currentNode.right;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\n\t\t// Average: O(log(n)) time | O(1) space\n\t\t// Worst: O(n) time | O(1) space\n\t\tpublic bool Contains(int value) {\n\t\t\tBST currentNode = this;\n\t\t\twhile (currentNode != null) {\n\t\t\t\tif (value < currentNode.value) {\n\t\t\t\t\tcurrentNode = currentNode.left;\n\t\t\t\t} else if (value > currentNode.value) {\n\t\t\t\t\tcurrentNode = currentNode.right;\n\t\t\t\t} else {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\t// Average: O(log(n)) time | O(1) space\n\t\t// Worst: O(n) time | O(1) space\n\t\tpublic BST Remove(int value) {\n\t\t\tRemove(value, null);\n\t\t\treturn this;\n\t\t}\n\n\t\tpublic void Remove(int value, BST parentNode) {\n\t\t\tBST currentNode = this;\n\t\t\twhile (currentNode != null) {\n\t\t\t\tif (value < currentNode.value) {\n\t\t\t\t\tparentNode = currentNode;\n\t\t\t\t\tcurrentNode = currentNode.left;\n\t\t\t\t} else if (value > currentNode.value) {\n\t\t\t\t\tparentNode = currentNode;\n\t\t\t\t\tcurrentNode = currentNode.right;\n\t\t\t\t} else {\n\t\t\t\t\tif (currentNode.left != null && currentNode.right != null) {\n\t\t\t\t\t\tcurrentNode.value = currentNode.right.getMinValue();\n\t\t\t\t\t\tcurrentNode.right.Remove(currentNode.value,\n\t\t\t\t\t\t  currentNode);\n\t\t\t\t\t} else if (parentNode == null) {\n\t\t\t\t\t\tif (currentNode.left != null) {\n\t\t\t\t\t\t\tcurrentNode.value = currentNode.left.value;\n\t\t\t\t\t\t\tcurrentNode.right = currentNode.left.right;\n\t\t\t\t\t\t\tcurrentNode.left = currentNode.left.left;\n\t\t\t\t\t\t} else if (currentNode.right != null) {\n\t\t\t\t\t\t\tcurrentNode.value = currentNode.right.value;\n\t\t\t\t\t\t\tcurrentNode.left = currentNode.right.left;\n\t\t\t\t\t\t\tcurrentNode.right = currentNode.right.right;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// This is a single-node tree; do nothing.\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (parentNode.left == currentNode) {\n\t\t\t\t\t\tparentNode.left = currentNode.left !=\n\t\t\t\t\t\t  null ? currentNode.left :\n\t\t\t\t\t\t  currentNode.right;\n\t\t\t\t\t} else if (parentNode.right == currentNode) {\n\t\t\t\t\t\tparentNode.right = currentNode.left !=\n\t\t\t\t\t\t  null ? currentNode.left :\n\t\t\t\t\t\t  currentNode.right;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tpublic int getMinValue() {\n\t\t\tif (left == null) {\n\t\t\t\treturn value;\n\t\t\t} else {\n\t\t\t\treturn left.getMinValue();\n\t\t\t}\n\t\t}\n\t}\n}\n"
      ]
    },
    "go": {
      "Language": "go",
      "StartingCode": "package main\n\n// Do not edit the class below except for\n// the insert, contains, and remove methods.\n// Feel free to add new properties and methods\n// to the class.\ntype BST struct {\n\tValue int\n\n\tLeft  *BST\n\tRight *BST\n}\n\nfunc (tree *BST) Insert(value int) *BST {\n\t// Write your code here.\n\t// Do not edit the return statement of this method.\n\treturn tree\n}\n\nfunc (tree *BST) Contains(value int) bool {\n\t// Write your code here.\n\treturn false\n}\n\nfunc (tree *BST) Remove(value int) *BST {\n\t// Write your code here.\n\t// Do not edit the return statement of this method.\n\treturn tree\n}\n",
      "StartingTest": "package main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc NewBST(root int, values ...int) *BST {\n\ttree := &BST{Value: root}\n\tfor _, value := range values {\n\t\ttree.Insert(value)\n\t}\n\treturn tree\n}\n\nfunc (tree *BST) InOrderTraverse(array []int) []int {\n\tif tree.Left != nil {\n\t\tarray = tree.Left.InOrderTraverse(array)\n\t}\n\tarray = append(array, tree.Value)\n\tif tree.Right != nil {\n\t\tarray = tree.Right.InOrderTraverse(array)\n\t}\n\treturn array\n}\n\nvar test1 = NewBST(10, 5, 15, 5, 2, 14, 22)\n\nvar test2 = NewBST(10, 15, 11, 22).Remove(10)\nvar test3 = NewBST(10, 5, 7, 2).Remove(10)\nvar test4 = NewBST(10, 5, 15, 22, 17, 34, 7, 2, 5, 1, 35, 27, 16, 30).Remove(22).Remove(17)\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\toutput := test1.Left.Value\n\texpected := 5\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase2(t *TestCase) {\n\toutput := test1.Right.Right.Value\n\texpected := 22\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase3(t *TestCase) {\n\toutput := test1.Right.Left.Value\n\texpected := 14\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase4(t *TestCase) {\n\toutput := test1.Left.Right.Value\n\texpected := 5\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase5(t *TestCase) {\n\toutput := test1.Left.Left.Value\n\texpected := 2\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase6(t *TestCase) {\n\toutput := test1.Left.Left.Left\n\trequire.Nil(t, output)\n}\n\nfunc (s *TestSuite) TestCase7(t *TestCase) {\n\toutput := test1.Right.Left.Right\n\trequire.Nil(t, output)\n}\n\nfunc (s *TestSuite) TestCase8(t *TestCase) {\n\toutput := test1.Contains(15)\n\texpected := true\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase9(t *TestCase) {\n\toutput := test1.Contains(2)\n\texpected := true\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase10(t *TestCase) {\n\toutput := test1.Contains(5)\n\texpected := true\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase11(t *TestCase) {\n\toutput := test1.Contains(10)\n\texpected := true\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase12(t *TestCase) {\n\toutput := test1.Contains(22)\n\texpected := true\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase13(t *TestCase) {\n\toutput := test1.Contains(23)\n\texpected := false\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase14(t *TestCase) {\n\toutput := test2.InOrderTraverse([]int{})\n\texpected := []int{11, 15, 22}\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase15(t *TestCase) {\n\toutput := test3.InOrderTraverse([]int{})\n\texpected := []int{2, 5, 7}\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase16(t *TestCase) {\n\toutput := test4.InOrderTraverse([]int{})\n\texpected := []int{1, 2, 5, 5, 7, 10, 15, 16, 27, 30, 34, 35}\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase17(t *TestCase) {\n\toutput := test4.Right.Right.Value\n\texpected := 27\n\trequire.Equal(t, expected, output)\n}\n\nfunc (s *TestSuite) TestCase18(t *TestCase) {\n\toutput := test4.Right.Right.Left.Value\n\texpected := 16\n\trequire.Equal(t, expected, output)\n}\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\npackage main\n\nimport (\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc NewBST(value int) *BST {\n\treturn &BST{Value: value}\n}\n\nfunc (s *TestSuite) TestCase1(t *TestCase) {\n\troot := NewBST(10)\n\troot.Left = NewBST(5)\n\troot.Left.Left = NewBST(2)\n\troot.Left.Left.Left = NewBST(1)\n\troot.Left.Right = NewBST(5)\n\troot.Right = NewBST(15)\n\troot.Right.Left = NewBST(13)\n\troot.Right.Left.Right = NewBST(14)\n\troot.Right.Right = NewBST(22)\n\n\troot.Insert(12)\n\trequire.True(t, root.Right.Left.Left.Value == 12)\n\n\troot.Remove(10)\n\trequire.True(t, root.Contains(10) == false)\n\trequire.True(t, root.Value == 12)\n\n\trequire.True(t, root.Contains(15))\n}\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\npackage main\n\ntype BST struct {\n\tValue int\n\n\tLeft  *BST\n\tRight *BST\n}\n\n// Average: O(log(n)) time | O(log(n)) space\n// Worst: O(n) time | O(n) space\nfunc (tree *BST) Insert(value int) *BST {\n\tif value < tree.Value {\n\t\tif tree.Left == nil {\n\t\t\ttree.Left = &BST{Value: value}\n\t\t} else {\n\t\t\ttree.Left.Insert(value)\n\t\t}\n\t} else {\n\t\tif tree.Right == nil {\n\t\t\ttree.Right = &BST{Value: value}\n\t\t} else {\n\t\t\ttree.Right.Insert(value)\n\t\t}\n\t}\n\treturn tree\n}\n\n// Average: O(log(n)) time | O(log(n)) space\n// Worst: O(n) time | O(n) space\nfunc (tree *BST) Contains(value int) bool {\n\tif value < tree.Value {\n\t\tif tree.Left == nil {\n\t\t\treturn false\n\t\t} else {\n\t\t\treturn tree.Left.Contains(value)\n\t\t}\n\t} else if value > tree.Value {\n\t\tif tree.Right == nil {\n\t\t\treturn false\n\t\t} else {\n\t\t\treturn tree.Right.Contains(value)\n\t\t}\n\t}\n\treturn true\n}\n\n// Average: O(log(n)) time | O(log(n)) space\n// Worst: O(n) time | O(n) space\nfunc (tree *BST) Remove(value int) *BST {\n\ttree.remove(value, nil)\n\treturn tree\n}\n\nfunc (tree *BST) remove(value int, parent *BST) {\n\tif value < tree.Value {\n\t\tif tree.Left != nil {\n\t\t\ttree.Left.remove(value, tree)\n\t\t}\n\t} else if value > tree.Value {\n\t\tif tree.Right != nil {\n\t\t\ttree.Right.remove(value, tree)\n\t\t}\n\t} else {\n\t\tif tree.Left != nil && tree.Right != nil {\n\t\t\ttree.Value = tree.Right.getMinValue()\n\t\t\ttree.Right.remove(tree.Value, tree)\n\t\t} else if parent == nil {\n\t\t\tif tree.Left != nil {\n\t\t\t\ttree.Value = tree.Left.Value\n\t\t\t\ttree.Right = tree.Left.Right\n\t\t\t\ttree.Left = tree.Left.Left\n\t\t\t} else if tree.Right != nil {\n\t\t\t\ttree.Value = tree.Right.Value\n\t\t\t\ttree.Left = tree.Right.Left\n\t\t\t\ttree.Right = tree.Right.Right\n\t\t\t} else {\n\t\t\t\t// This is a single-node tree; do nothing.\n\t\t\t}\n\t\t} else if parent.Left == tree {\n\t\t\tif tree.Left != nil {\n\t\t\t\tparent.Left = tree.Left\n\t\t\t} else {\n\t\t\t\tparent.Left = tree.Right\n\t\t\t}\n\t\t} else if parent.Right == tree {\n\t\t\tif tree.Left != nil {\n\t\t\t\tparent.Right = tree.Left\n\t\t\t} else {\n\t\t\t\tparent.Right = tree.Right\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc (tree *BST) getMinValue() int {\n\tif tree.Left == nil {\n\t\treturn tree.Value\n\t}\n\treturn tree.Left.getMinValue()\n}\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\npackage main\n\ntype BST struct {\n\tValue int\n\n\tLeft  *BST\n\tRight *BST\n}\n\n// Average: O(log(n)) time | O(1) space\n// Worst: O(n) time | O(1) space\nfunc (tree *BST) Insert(value int) *BST {\n\tcurrent := tree\n\tfor {\n\t\tif value < current.Value {\n\t\t\tif current.Left == nil {\n\t\t\t\tcurrent.Left = &BST{Value: value}\n\t\t\t\tbreak\n\t\t\t} else {\n\t\t\t\tcurrent = current.Left\n\t\t\t}\n\t\t} else {\n\t\t\tif current.Right == nil {\n\t\t\t\tcurrent.Right = &BST{Value: value}\n\t\t\t\tbreak\n\t\t\t} else {\n\t\t\t\tcurrent = current.Right\n\t\t\t}\n\t\t}\n\t}\n\treturn tree\n}\n\n// Average: O(log(n)) time | O(1) space\n// Worst: O(n) time | O(1) space\nfunc (tree *BST) Contains(value int) bool {\n\tcurrent := tree\n\tfor current != nil {\n\t\tif value < current.Value {\n\t\t\tcurrent = current.Left\n\t\t} else if value > current.Value {\n\t\t\tcurrent = current.Right\n\t\t} else {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\n// Average: O(log(n)) time | O(1) space\n// Worst: O(n) time | O(1) space\nfunc (tree *BST) Remove(value int) *BST {\n\ttree.remove(value, nil)\n\treturn tree\n}\n\nfunc (tree *BST) remove(value int, parent *BST) {\n\tcurrent := tree\n\tfor current != nil {\n\t\tif value < current.Value {\n\t\t\tparent = current\n\t\t\tcurrent = current.Left\n\t\t} else if value > current.Value {\n\t\t\tparent = current\n\t\t\tcurrent = current.Right\n\t\t} else {\n\t\t\tif current.Left != nil && current.Right != nil {\n\t\t\t\tcurrent.Value = current.Right.getMinValue()\n\t\t\t\tcurrent.Right.remove(current.Value, current)\n\t\t\t} else if parent == nil {\n\t\t\t\tif current.Left != nil {\n\t\t\t\t\tcurrent.Value = current.Left.Value\n\t\t\t\t\tcurrent.Right = current.Left.Right\n\t\t\t\t\tcurrent.Left = current.Left.Left\n\t\t\t\t} else if current.Right != nil {\n\t\t\t\t\tcurrent.Value = current.Right.Value\n\t\t\t\t\tcurrent.Left = current.Right.Left\n\t\t\t\t\tcurrent.Right = current.Right.Right\n\t\t\t\t} else {\n\t\t\t\t\t// This is a single-node tree; do nothing.\n\t\t\t\t}\n\t\t\t} else if parent.Left == current {\n\t\t\t\tif current.Left != nil {\n\t\t\t\t\tparent.Left = current.Left\n\t\t\t\t} else {\n\t\t\t\t\tparent.Left = current.Right\n\t\t\t\t}\n\t\t\t} else if parent.Right == current {\n\t\t\t\tif current.Left != nil {\n\t\t\t\t\tparent.Right = current.Left\n\t\t\t\t} else {\n\t\t\t\t\tparent.Right = current.Right\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak\n\t\t}\n\t}\n}\n\nfunc (tree *BST) getMinValue() int {\n\tif tree.Left == nil {\n\t\treturn tree.Value\n\t}\n\treturn tree.Left.getMinValue()\n}\n"
      ]
    },
    "java": {
      "Language": "java",
      "StartingCode": "import java.util.*;\n\nclass Program {\n  static class BST {\n    public int value;\n    public BST left;\n    public BST right;\n\n    public BST(int value) {\n      this.value = value;\n    }\n\n    public BST insert(int value) {\n      // Write your code here.\n      // Do not edit the return statement of this method.\n      return this;\n    }\n\n    public boolean contains(int value) {\n      // Write your code here.\n      return false;\n    }\n\n    public BST remove(int value) {\n      // Write your code here.\n      // Do not edit the return statement of this method.\n      return this;\n    }\n  }\n}\n",
      "StartingTest": "import java.util.*;\n\nclass ProgramTest {\n  static Program.BST test1;\n  static Program.BST test2;\n  static Program.BST test3;\n  static Program.BST test4;\n\n  static {\n    test1 = new Program.BST(10);\n    test1.insert(5).insert(15).insert(5).insert(2).insert(14).insert(22);\n    test2 = new Program.BST(10);\n    test2.insert(15).insert(11).insert(22).remove(10);\n    test3 = new Program.BST(10);\n    test3.insert(5).insert(7).insert(2).remove(10);\n    test4 = new Program.BST(10);\n    test4\n        .insert(5)\n        .insert(15)\n        .insert(22)\n        .insert(17)\n        .insert(34)\n        .insert(7)\n        .insert(2)\n        .insert(5)\n        .insert(1)\n        .insert(35)\n        .insert(27)\n        .insert(16)\n        .insert(30)\n        .remove(22)\n        .remove(17);\n  }\n\n  private void inOrderTraverse(Program.BST tree, List<Integer> array) {\n    if (tree.left != null) {\n      this.inOrderTraverse(tree.left, array);\n    }\n    array.add(tree.value);\n    if (tree.right != null) {\n      this.inOrderTraverse(tree.right, array);\n    }\n  }\n\n  private boolean compare(List<Integer> array1, List<Integer> array2) {\n    if (array1.size() != array2.size()) {\n      return false;\n    }\n    for (int i = 0; i < array1.size(); i++) {\n      if (!array1.get(i).equals(array2.get(i))) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  @Test\n  public void TestCase1() {\n    Utils.assertTrue(this.test1.left.value == 5);\n  }\n\n  @Test\n  public void TestCase2() {\n    Utils.assertTrue(this.test1.right.right.value == 22);\n  }\n\n  @Test\n  public void TestCase3() {\n    Utils.assertTrue(this.test1.right.left.value == 14);\n  }\n\n  @Test\n  public void TestCase4() {\n    Utils.assertTrue(this.test1.left.right.value == 5);\n  }\n\n  @Test\n  public void TestCase5() {\n    Utils.assertTrue(this.test1.left.left.value == 2);\n  }\n\n  @Test\n  public void TestCase6() {\n    Utils.assertTrue(this.test1.left.left.left == null);\n  }\n\n  @Test\n  public void TestCase7() {\n    Utils.assertTrue(this.test1.right.right.right == null);\n  }\n\n  @Test\n  public void TestCase8() {\n    Utils.assertTrue(this.test1.contains(15) == true);\n  }\n\n  @Test\n  public void TestCase9() {\n    Utils.assertTrue(this.test1.contains(2) == true);\n  }\n\n  @Test\n  public void TestCase10() {\n    Utils.assertTrue(this.test1.contains(5) == true);\n  }\n\n  @Test\n  public void TestCase11() {\n    Utils.assertTrue(this.test1.contains(10) == true);\n  }\n\n  @Test\n  public void TestCase12() {\n    Utils.assertTrue(this.test1.contains(22) == true);\n  }\n\n  @Test\n  public void TestCase13() {\n    Utils.assertTrue(this.test1.contains(23) == false);\n  }\n\n  @Test\n  public void TestCase14() {\n    List<Integer> expected = new ArrayList<Integer>(Arrays.asList(11, 15, 22));\n    List<Integer> output = new ArrayList<Integer>();\n    this.inOrderTraverse(this.test2, output);\n    Utils.assertTrue(this.compare(output, expected));\n  }\n\n  @Test\n  public void TestCase15() {\n    List<Integer> expected = new ArrayList<Integer>(Arrays.asList(2, 5, 7));\n    List<Integer> output = new ArrayList<Integer>();\n    this.inOrderTraverse(this.test3, output);\n    Utils.assertTrue(this.compare(output, expected));\n  }\n\n  @Test\n  public void TestCase16() {\n    List<Integer> expected =\n        new ArrayList<Integer>(Arrays.asList(1, 2, 5, 5, 7, 10, 15, 16, 27, 30, 34, 35));\n    List<Integer> output = new ArrayList<Integer>();\n    this.inOrderTraverse(this.test4, output);\n    Utils.assertTrue(this.compare(output, expected));\n  }\n\n  @Test\n  public void TestCase17() {\n    Utils.assertTrue(this.test4.right.right.value == 27);\n  }\n\n  @Test\n  public void TestCase18() {\n    Utils.assertTrue(this.test4.right.right.left.value == 16);\n  }\n}\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport java.util.*;\n\nclass ProgramTest {\n  @Test\n  public void TestCase1() {\n    var root = new Program.BST(10);\n    root.left = new Program.BST(5);\n    root.left.left = new Program.BST(2);\n    root.left.left.left = new Program.BST(1);\n    root.left.right = new Program.BST(5);\n    root.right = new Program.BST(15);\n    root.right.left = new Program.BST(13);\n    root.right.left.right = new Program.BST(14);\n    root.right.right = new Program.BST(22);\n\n    root.insert(12);\n    Utils.assertTrue(root.right.left.left.value == 12);\n\n    root.remove(10);\n    Utils.assertTrue(root.contains(10) == false);\n    Utils.assertTrue(root.value == 12);\n\n    Utils.assertTrue(root.contains(15));\n  }\n}\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nclass Program {\n  static class BST {\n    public int value;\n    public BST left;\n    public BST right;\n\n    public BST(int value) {\n      this.value = value;\n    }\n\n    // Average: O(log(n)) time | O(log(n)) space\n    // Worst: O(n) time | O(n) space\n    public BST insert(int value) {\n      if (value < this.value) {\n        if (left == null) {\n          BST newBST = new BST(value);\n          left = newBST;\n        } else {\n          left.insert(value);\n        }\n      } else {\n        if (right == null) {\n          BST newBST = new BST(value);\n          right = newBST;\n        } else {\n          right.insert(value);\n        }\n      }\n      return this;\n    }\n\n    // Average: O(log(n)) time | O(log(n)) space\n    // Worst: O(n) time | O(n) space\n    public boolean contains(int value) {\n      if (value < this.value) {\n        if (left == null) {\n          return false;\n        } else {\n          return left.contains(value);\n        }\n      } else if (value > this.value) {\n        if (right == null) {\n          return false;\n        } else {\n          return right.contains(value);\n        }\n      } else {\n        return true;\n      }\n    }\n\n    // Average: O(log(n)) time | O(log(n)) space\n    // Worst: O(n) time | O(n) space\n    public BST remove(int value) {\n      remove(value, null);\n      return this;\n    }\n\n    public void remove(int value, BST parent) {\n      if (value < this.value) {\n        if (left != null) {\n          left.remove(value, this);\n        }\n      } else if (value > this.value) {\n        if (right != null) {\n          right.remove(value, this);\n        }\n      } else {\n        if (left != null && right != null) {\n          this.value = right.getMinValue();\n          right.remove(this.value, this);\n        } else if (parent == null) {\n          if (left != null) {\n            this.value = left.value;\n            right = left.right;\n            left = left.left;\n          } else if (right != null) {\n            this.value = right.value;\n            left = right.left;\n            right = right.right;\n          } else {\n            // This is a single-node tree; do nothing.\n          }\n        } else if (parent.left == this) {\n          parent.left = left != null ? left : right;\n        } else if (parent.right == this) {\n          parent.right = left != null ? left : right;\n        }\n      }\n    }\n\n    public int getMinValue() {\n      if (left == null) {\n        return this.value;\n      } else {\n        return left.getMinValue();\n      }\n    }\n  }\n}\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nclass Program {\n  static class BST {\n    public int value;\n    public BST left;\n    public BST right;\n\n    public BST(int value) {\n      this.value = value;\n    }\n\n    // Average: O(log(n)) time | O(1) space\n    // Worst: O(n) time | O(1) space\n    public BST insert(int value) {\n      BST currentNode = this;\n      while (true) {\n        if (value < currentNode.value) {\n          if (currentNode.left == null) {\n            BST newNode = new BST(value);\n            currentNode.left = newNode;\n            break;\n          } else {\n            currentNode = currentNode.left;\n          }\n        } else {\n          if (currentNode.right == null) {\n            BST newNode = new BST(value);\n            currentNode.right = newNode;\n            break;\n          } else {\n            currentNode = currentNode.right;\n          }\n        }\n      }\n      return this;\n    }\n\n    // Average: O(log(n)) time | O(1) space\n    // Worst: O(n) time | O(1) space\n    public boolean contains(int value) {\n      BST currentNode = this;\n      while (currentNode != null) {\n        if (value < currentNode.value) {\n          currentNode = currentNode.left;\n        } else if (value > currentNode.value) {\n          currentNode = currentNode.right;\n        } else {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    // Average: O(log(n)) time | O(1) space\n    // Worst: O(n) time | O(1) space\n    public BST remove(int value) {\n      remove(value, null);\n      return this;\n    }\n\n    public void remove(int value, BST parentNode) {\n      BST currentNode = this;\n      while (currentNode != null) {\n        if (value < currentNode.value) {\n          parentNode = currentNode;\n          currentNode = currentNode.left;\n        } else if (value > currentNode.value) {\n          parentNode = currentNode;\n          currentNode = currentNode.right;\n        } else {\n          if (currentNode.left != null && currentNode.right != null) {\n            currentNode.value = currentNode.right.getMinValue();\n            currentNode.right.remove(currentNode.value, currentNode);\n          } else if (parentNode == null) {\n            if (currentNode.left != null) {\n              currentNode.value = currentNode.left.value;\n              currentNode.right = currentNode.left.right;\n              currentNode.left = currentNode.left.left;\n            } else if (currentNode.right != null) {\n              currentNode.value = currentNode.right.value;\n              currentNode.left = currentNode.right.left;\n              currentNode.right = currentNode.right.right;\n            } else {\n              // This is a single-node tree; do nothing.\n            }\n          } else if (parentNode.left == currentNode) {\n            parentNode.left = currentNode.left != null ? currentNode.left : currentNode.right;\n          } else if (parentNode.right == currentNode) {\n            parentNode.right = currentNode.left != null ? currentNode.left : currentNode.right;\n          }\n          break;\n        }\n      }\n    }\n\n    public int getMinValue() {\n      if (left == null) {\n        return value;\n      } else {\n        return left.getMinValue();\n      }\n    }\n  }\n}\n"
      ]
    },
    "javascript": {
      "Language": "javascript",
      "StartingCode": "// Do not edit the class below except for\n// the insert, contains, and remove methods.\n// Feel free to add new properties and methods\n// to the class.\nclass BST {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n\n  insert(value) {\n    // Write your code here.\n    // Do not edit the return statement of this method.\n    return this;\n  }\n\n  contains(value) {\n    // Write your code here.\n  }\n\n  remove(value) {\n    // Write your code here.\n    // Do not edit the return statement of this method.\n    return this;\n  }\n}\n\n// Do not edit the line below.\nexports.BST = BST;\n",
      "StartingTest": "const program = require('./program');\nconst chai = require('chai');\n\nconst test1 = new program.BST(10).insert(5).insert(15).insert(5).insert(2).insert(14).insert(22);\n\nconst test2 = new program.BST(10).insert(15).insert(11).insert(22).remove(10);\n\nconst test3 = new program.BST(10).insert(5).insert(7).insert(2).remove(10);\n\nconst test4 = new program.BST(10)\n  .insert(5)\n  .insert(15)\n  .insert(22)\n  .insert(17)\n  .insert(34)\n  .insert(7)\n  .insert(2)\n  .insert(5)\n  .insert(1)\n  .insert(35)\n  .insert(27)\n  .insert(16)\n  .insert(30)\n  .remove(22)\n  .remove(17);\n\nfunction inOrderTraverse(tree, array) {\n  if (tree !== null) {\n    inOrderTraverse(tree.left, array);\n    array.push(tree.value);\n    inOrderTraverse(tree.right, array);\n  }\n  return array;\n}\n\nit('Test Case #1', function () {\n  chai.expect(test1.left.value).to.deep.equal(5);\n});\n\nit('Test Case #2', function () {\n  chai.expect(test1.right.right.value).to.deep.equal(22);\n});\n\nit('Test Case #3', function () {\n  chai.expect(test1.right.left.value).to.deep.equal(14);\n});\n\nit('Test Case #4', function () {\n  chai.expect(test1.left.right.value).to.deep.equal(5);\n});\n\nit('Test Case #5', function () {\n  chai.expect(test1.left.left.value).to.deep.equal(2);\n});\n\nit('Test Case #6', function () {\n  chai.expect(test1.left.left.left).to.deep.equal(null);\n});\n\nit('Test Case #7', function () {\n  chai.expect(test1.right.left.right).to.deep.equal(null);\n});\n\nit('Test Case #8', function () {\n  chai.expect(test1.contains(15)).to.deep.equal(true);\n});\n\nit('Test Case #9', function () {\n  chai.expect(test1.contains(2)).to.deep.equal(true);\n});\n\nit('Test Case #10', function () {\n  chai.expect(test1.contains(5)).to.deep.equal(true);\n});\n\nit('Test Case #11', function () {\n  chai.expect(test1.contains(10)).to.deep.equal(true);\n});\n\nit('Test Case #12', function () {\n  chai.expect(test1.contains(22)).to.deep.equal(true);\n});\n\nit('Test Case #13', function () {\n  chai.expect(test1.contains(23)).to.deep.equal(false);\n});\n\nit('Test Case #14', function () {\n  chai.expect(inOrderTraverse(test2, [])).to.deep.equal([11, 15, 22]);\n});\n\nit('Test Case #15', function () {\n  chai.expect(inOrderTraverse(test3, [])).to.deep.equal([2, 5, 7]);\n});\n\nit('Test Case #16', function () {\n  chai.expect(inOrderTraverse(test4, [])).to.deep.equal([1, 2, 5, 5, 7, 10, 15, 16, 27, 30, 34, 35]);\n});\n\nit('Test Case #17', function () {\n  chai.expect(test4.right.right.value).to.deep.equal(27);\n});\n\nit('Test Case #18', function () {\n  chai.expect(test4.right.right.left.value).to.deep.equal(16);\n});\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nconst program = require('./program');\nconst chai = require('chai');\n\nconst {BST} = program;\n\nit('Test Case #1', function () {\n  const root = new BST(10);\n  root.left = new BST(5);\n  root.left.left = new BST(2);\n  root.left.left.left = new BST(1);\n  root.left.right = new BST(5);\n  root.right = new BST(15);\n  root.right.left = new BST(13);\n  root.right.left.right = new BST(14);\n  root.right.right = new BST(22);\n\n  root.insert(12);\n  chai.expect(root.right.left.left.value).to.deep.equal(12);\n\n  root.remove(10);\n  chai.expect(root.contains(10)).to.deep.equal(false);\n  chai.expect(root.value).to.deep.equal(12);\n\n  chai.expect(root.contains(15)).to.deep.equal(true);\n});\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nclass BST {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n\n  // Average: O(log(n)) time | O(log(n)) space\n  // Worst: O(n) time | O(n) space\n  insert(value) {\n    if (value < this.value) {\n      if (this.left === null) {\n        this.left = new BST(value);\n      } else {\n        this.left.insert(value);\n      }\n    } else {\n      if (this.right === null) {\n        this.right = new BST(value);\n      } else {\n        this.right.insert(value);\n      }\n    }\n    return this;\n  }\n\n  // Average: O(log(n)) time | O(log(n)) space\n  // Worst: O(n) time | O(n) space\n  contains(value) {\n    if (value < this.value) {\n      if (this.left === null) {\n        return false;\n      } else {\n        return this.left.contains(value);\n      }\n    } else if (value > this.value) {\n      if (this.right === null) {\n        return false;\n      } else {\n        return this.right.contains(value);\n      }\n    } else {\n      return true;\n    }\n  }\n\n  // Average: O(log(n)) time | O(log(n)) space\n  // Worst: O(n) time | O(n) space\n  remove(value, parent = null) {\n    if (value < this.value) {\n      if (this.left !== null) {\n        this.left.remove(value, this);\n      }\n    } else if (value > this.value) {\n      if (this.right !== null) {\n        this.right.remove(value, this);\n      }\n    } else {\n      if (this.left !== null && this.right !== null) {\n        this.value = this.right.getMinValue();\n        this.right.remove(this.value, this);\n      } else if (parent === null) {\n        if (this.left !== null) {\n          this.value = this.left.value;\n          this.right = this.left.right;\n          this.left = this.left.left;\n        } else if (this.right !== null) {\n          this.value = this.right.value;\n          this.left = this.right.left;\n          this.right = this.right.right;\n        } else {\n          // This is a single-node tree; do nothing.\n        }\n      } else if (parent.left === this) {\n        parent.left = this.left !== null ? this.left : this.right;\n      } else if (parent.right === this) {\n        parent.right = this.left !== null ? this.left : this.right;\n      }\n    }\n    return this;\n  }\n\n  getMinValue() {\n    if (this.left === null) {\n      return this.value;\n    } else {\n      return this.left.getMinValue();\n    }\n  }\n}\n\nexports.BST = BST;\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nclass BST {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n\n  // Average: O(log(n)) time | O(1) space\n  // Worst: O(n) time | O(1) space\n  insert(value) {\n    let currentNode = this;\n    while (true) {\n      if (value < currentNode.value) {\n        if (currentNode.left === null) {\n          currentNode.left = new BST(value);\n          break;\n        } else {\n          currentNode = currentNode.left;\n        }\n      } else {\n        if (currentNode.right === null) {\n          currentNode.right = new BST(value);\n          break;\n        } else {\n          currentNode = currentNode.right;\n        }\n      }\n    }\n    return this;\n  }\n\n  // Average: O(log(n)) time | O(1) space\n  // Worst: O(n) time | O(1) space\n  contains(value) {\n    let currentNode = this;\n    while (currentNode !== null) {\n      if (value < currentNode.value) {\n        currentNode = currentNode.left;\n      } else if (value > currentNode.value) {\n        currentNode = currentNode.right;\n      } else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // Average: O(log(n)) time | O(1) space\n  // Worst: O(n) time | O(1) space\n  remove(value, parentNode = null) {\n    let currentNode = this;\n    while (currentNode !== null) {\n      if (value < currentNode.value) {\n        parentNode = currentNode;\n        currentNode = currentNode.left;\n      } else if (value > currentNode.value) {\n        parentNode = currentNode;\n        currentNode = currentNode.right;\n      } else {\n        if (currentNode.left !== null && currentNode.right !== null) {\n          currentNode.value = currentNode.right.getMinValue();\n          currentNode.right.remove(currentNode.value, currentNode);\n        } else if (parentNode === null) {\n          if (currentNode.left !== null) {\n            currentNode.value = currentNode.left.value;\n            currentNode.right = currentNode.left.right;\n            currentNode.left = currentNode.left.left;\n          } else if (currentNode.right !== null) {\n            currentNode.value = currentNode.right.value;\n            currentNode.left = currentNode.right.left;\n            currentNode.right = currentNode.right.right;\n          } else {\n            // This is a single-node tree; do nothing.\n          }\n        } else if (parentNode.left === currentNode) {\n          parentNode.left = currentNode.left !== null ? currentNode.left : currentNode.right;\n        } else if (parentNode.right === currentNode) {\n          parentNode.right = currentNode.left !== null ? currentNode.left : currentNode.right;\n        }\n        break;\n      }\n    }\n    return this;\n  }\n\n  getMinValue() {\n    let currentNode = this;\n    while (currentNode.left !== null) {\n      currentNode = currentNode.left;\n    }\n    return currentNode.value;\n  }\n}\n\nexports.BST = BST;\n"
      ]
    },
    "python": {
      "Language": "python",
      "StartingCode": "# Do not edit the class below except for\n# the insert, contains, and remove methods.\n# Feel free to add new properties and methods\n# to the class.\nclass BST:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\n    def insert(self, value):\n        # Write your code here.\n        # Do not edit the return statement of this method.\n        return self\n\n    def contains(self, value):\n        # Write your code here.\n        pass\n\n    def remove(self, value):\n        # Write your code here.\n        # Do not edit the return statement of this method.\n        return self\n",
      "StartingTest": "import program\nimport unittest\n\n\ntest1 = program.BST(10).insert(5).insert(15).insert(5).insert(2).insert(14).insert(22)\n\ntest2 = program.BST(10).insert(15).insert(11).insert(22).remove(10)\n\ntest3 = program.BST(10).insert(5).insert(7).insert(2).remove(10)\n\ntest4 = (\n    program.BST(10)\n    .insert(5)\n    .insert(15)\n    .insert(22)\n    .insert(17)\n    .insert(34)\n    .insert(7)\n    .insert(2)\n    .insert(5)\n    .insert(1)\n    .insert(35)\n    .insert(27)\n    .insert(16)\n    .insert(30)\n    .remove(22)\n    .remove(17)\n)\n\n\ndef inOrderTraverse(tree, array):\n    if tree is not None:\n        inOrderTraverse(tree.left, array)\n        array.append(tree.value)\n        inOrderTraverse(tree.right, array)\n    return array\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(test1.left.value, 5)\n\n    def test_case_2(self):\n        self.assertEqual(test1.right.right.value, 22)\n\n    def test_case_3(self):\n        self.assertEqual(test1.right.left.value, 14)\n\n    def test_case_4(self):\n        self.assertEqual(test1.left.right.value, 5)\n\n    def test_case_5(self):\n        self.assertEqual(test1.left.left.value, 2)\n\n    def test_case_6(self):\n        self.assertEqual(test1.left.left.left, None)\n\n    def test_case_7(self):\n        self.assertEqual(test1.right.left.right, None)\n\n    def test_case_8(self):\n        self.assertEqual(test1.contains(15), True)\n\n    def test_case_9(self):\n        self.assertEqual(test1.contains(2), True)\n\n    def test_case_10(self):\n        self.assertEqual(test1.contains(5), True)\n\n    def test_case_11(self):\n        self.assertEqual(test1.contains(10), True)\n\n    def test_case_12(self):\n        self.assertEqual(test1.contains(22), True)\n\n    def test_case_13(self):\n        self.assertEqual(test1.contains(23), False)\n\n    def test_case_14(self):\n        self.assertEqual(inOrderTraverse(test2, []), [11, 15, 22])\n\n    def test_case_15(self):\n        self.assertEqual(inOrderTraverse(test3, []), [2, 5, 7])\n\n    def test_case_16(self):\n        self.assertEqual(inOrderTraverse(test4, []), [1, 2, 5, 5, 7, 10, 15, 16, 27, 30, 34, 35])\n\n    def test_case_17(self):\n        self.assertEqual(test4.right.right.value, 27)\n\n    def test_case_18(self):\n        self.assertEqual(test4.right.right.left.value, 16)\n",
      "SandboxCode": "# This file is initialized with a code version of this\n# question's sample test case. Feel free to add, edit,\n# or remove test cases in this file as you see fit!\n\nimport program\nimport unittest\n\n\nBST = program.BST\n\n\nclass TestProgram(unittest.TestCase):\n    def test_case_1(self):\n        root = BST(10)\n        root.left = BST(5)\n        root.left.left = BST(2)\n        root.left.left.left = BST(1)\n        root.left.right = BST(5)\n        root.right = BST(15)\n        root.right.left = BST(13)\n        root.right.left.right = BST(14)\n        root.right.right = BST(22)\n\n        root.insert(12)\n        self.assertTrue(root.right.left.left.value == 12)\n\n        root.remove(10)\n        self.assertTrue(not root.contains(10))\n        self.assertTrue(root.value == 12)\n\n        self.assertTrue(root.contains(15))\n",
      "Solutions": [
        "# Copyright © 2020 Code Complete. All rights reserved.\n\nclass BST:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\n    # Average: O(log(n)) time | O(log(n)) space\n    # Worst: O(n) time | O(n) space\n    def insert(self, value):\n        if value < self.value:\n            if self.left is None:\n                self.left = BST(value)\n            else:\n                self.left.insert(value)\n        else:\n            if self.right is None:\n                self.right = BST(value)\n            else:\n                self.right.insert(value)\n        return self\n\n    # Average: O(log(n)) time | O(log(n)) space\n    # Worst: O(n) time | O(n) space\n    def contains(self, value):\n        if value < self.value:\n            if self.left is None:\n                return False\n            else:\n                return self.left.contains(value)\n        elif value > self.value:\n            if self.right is None:\n                return False\n            else:\n                return self.right.contains(value)\n        else:\n            return True\n\n    # Average: O(log(n)) time | O(log(n)) space\n    # Worst: O(n) time | O(n) space\n    def remove(self, value, parent=None):\n        if value < self.value:\n            if self.left is not None:\n                self.left.remove(value, self)\n        elif value > self.value:\n            if self.right is not None:\n                self.right.remove(value, self)\n        else:\n            if self.left is not None and self.right is not None:\n                self.value = self.right.getMinValue()\n                self.right.remove(self.value, self)\n            elif parent is None:\n                if self.left is not None:\n                    self.value = self.left.value\n                    self.right = self.left.right\n                    self.left = self.left.left\n                elif self.right is not None:\n                    self.value = self.right.value\n                    self.left = self.right.left\n                    self.right = self.right.right\n                else:\n                    # This is a single-node tree; do nothing.\n                    pass\n            elif parent.left == self:\n                parent.left = self.left if self.left is not None else self.right\n            elif parent.right == self:\n                parent.right = self.left if self.left is not None else self.right\n        return self\n\n    def getMinValue(self):\n        if self.left is None:\n            return self.value\n        else:\n            return self.left.getMinValue()\n",
        "# Copyright © 2020 Code Complete. All rights reserved.\n\nclass BST:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\n    # Average: O(log(n)) time | O(1) space\n    # Worst: O(n) time | O(1) space\n    def insert(self, value):\n        currentNode = self\n        while True:\n            if value < currentNode.value:\n                if currentNode.left is None:\n                    currentNode.left = BST(value)\n                    break\n                else:\n                    currentNode = currentNode.left\n            else:\n                if currentNode.right is None:\n                    currentNode.right = BST(value)\n                    break\n                else:\n                    currentNode = currentNode.right\n        return self\n\n    # Average: O(log(n)) time | O(1) space\n    # Worst: O(n) time | O(1) space\n    def contains(self, value):\n        currentNode = self\n        while currentNode is not None:\n            if value < currentNode.value:\n                currentNode = currentNode.left\n            elif value > currentNode.value:\n                currentNode = currentNode.right\n            else:\n                return True\n        return False\n\n    # Average: O(log(n)) time | O(1) space\n    # Worst: O(n) time | O(1) space\n    def remove(self, value, parentNode=None):\n        currentNode = self\n        while currentNode is not None:\n            if value < currentNode.value:\n                parentNode = currentNode\n                currentNode = currentNode.left\n            elif value > currentNode.value:\n                parentNode = currentNode\n                currentNode = currentNode.right\n            else:\n                if currentNode.left is not None and currentNode.right is not None:\n                    currentNode.value = currentNode.right.getMinValue()\n                    currentNode.right.remove(currentNode.value, currentNode)\n                elif parentNode is None:\n                    if currentNode.left is not None:\n                        currentNode.value = currentNode.left.value\n                        currentNode.right = currentNode.left.right\n                        currentNode.left = currentNode.left.left\n                    elif currentNode.right is not None:\n                        currentNode.value = currentNode.right.value\n                        currentNode.left = currentNode.right.left\n                        currentNode.right = currentNode.right.right\n                    else:\n                        # This is a single-node tree; do nothing.\n                        pass\n                elif parentNode.left == currentNode:\n                    parentNode.left = currentNode.left if currentNode.left is not None else currentNode.right\n                elif parentNode.right == currentNode:\n                    parentNode.right = currentNode.left if currentNode.left is not None else currentNode.right\n                break\n        return self\n\n    def getMinValue(self):\n        currentNode = self\n        while currentNode.left is not None:\n            currentNode = currentNode.left\n        return currentNode.value\n"
      ]
    },
    "swift": {
      "Language": "swift",
      "StartingCode": "class Program {\n  class BST {\n    var value: Int\n    var left: BST?\n    var right: BST?\n\n    init(value: Int) {\n      self.value = value\n      left = nil\n      right = nil\n    }\n\n    func insert(value: Int) -> BST {\n      // Write your code here.\n      return self\n    }\n\n    func contains(value: Int) -> Bool {\n      // Write your code here.\n      return false\n    }\n\n    func remove(value: Int?, parentNode: BST?) -> BST {\n      // Write your code here.\n      return self\n    }\n  }\n}\n",
      "StartingTest": "class ProgramTest: TestSuite {\n  var BST1 = Program.BST(value: 10).insert(value: 5).insert(value: 15).insert(value: 5).insert(value: 2).insert(value: 14).insert(value: 22)\n\n  var BST2 = Program.BST(value: 10).insert(value: 15).insert(value: 11).insert(value: 22).remove(value: 10, parentNode: nil)\n\n  var BST3 = Program.BST(value: 10).insert(value: 5).insert(value: 7).insert(value: 2).remove(value: 10, parentNode: nil)\n\n  var BST4 = Program.BST(value: 10).insert(value: 5).insert(value: 15).insert(value: 22).insert(value: 17).insert(value: 34).insert(value: 7).insert(value: 2).insert(value: 5).insert(value: 1).insert(value: 35).insert(value: 27).insert(value: 16).insert(value: 30).remove(value: 22, parentNode: nil).remove(value: 17, parentNode: nil)\n\n  func inOrderTraverse(tree: Program.BST?, array: inout [Int]) -> [Int] {\n    if let tree = tree {\n      inOrderTraverse(tree: tree.left, array: &array)\n      array.append(tree.value)\n      inOrderTraverse(tree: tree.right, array: &array)\n    }\n\n    return array\n  }\n\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      try assertEqual(5, BST1.left?.value)\n    }\n    runTest(\"Test Case 2\") { () throws -> Void in\n      try assertEqual(22, BST1.right?.right?.value)\n    }\n    runTest(\"Test Case 3\") { () throws -> Void in\n      try assertEqual(14, BST1.right?.left?.value)\n    }\n    runTest(\"Test Case 4\") { () throws -> Void in\n      try assertEqual(5, BST1.left?.right?.value)\n    }\n    runTest(\"Test Case 5\") { () throws -> Void in\n      try assertEqual(2, BST1.left?.left?.value)\n    }\n    runTest(\"Test Case 6\") { () throws -> Void in\n      try assert(BST1.left?.left?.left == nil)\n    }\n    runTest(\"Test Case 7\") { () throws -> Void in\n      try assert(BST1.right?.left?.right == nil)\n    }\n    runTest(\"Test Case 8\") { () throws -> Void in\n      try assertEqual(true, BST1.contains(value: 15))\n    }\n    runTest(\"Test Case 9\") { () throws -> Void in\n      try assertEqual(true, BST1.contains(value: 2))\n    }\n    runTest(\"Test Case 10\") { () throws -> Void in\n      try assertEqual(true, BST1.contains(value: 5))\n    }\n    runTest(\"Test Case 11\") { () throws -> Void in\n      try assertEqual(true, BST1.contains(value: 10))\n    }\n    runTest(\"Test Case 12\") { () throws -> Void in\n      try assertEqual(true, BST1.contains(value: 22))\n    }\n    runTest(\"Test Case 13\") { () throws -> Void in\n      try assertEqual(false, BST1.contains(value: 23))\n    }\n    runTest(\"Test Case 14\") { () throws -> Void in\n      var traversalArray = [Int]()\n      try assertEqual([11, 15, 22], inOrderTraverse(tree: BST2, array: &traversalArray))\n    }\n    runTest(\"Test Case 15\") { () throws -> Void in\n      var traversalArray = [Int]()\n      try assertEqual([2, 5, 7], inOrderTraverse(tree: BST3, array: &traversalArray))\n    }\n    runTest(\"Test Case 16\") { () throws -> Void in\n      var traversalArray = [Int]()\n      var result = inOrderTraverse(tree: BST4, array: &traversalArray)\n      try assertEqual([1, 2, 5, 5, 7, 10, 15, 16, 27, 30, 34, 35], result)\n    }\n    runTest(\"Test Case 17\") { () throws -> Void in\n      var traversalArray = [Int]()\n      try assertEqual(27, BST4.right?.right?.value)\n    }\n    runTest(\"Test Case 18\") { () throws -> Void in\n      var traversalArray = [Int]()\n      try assertEqual(16, BST4.right?.right?.left?.value)\n    }\n  }\n}\n",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nclass ProgramTest: TestSuite {\n  func test() {\n    let program = Program()\n    runTest(\"Test Case 1\") { () throws -> Void in\n      let root = Program.BST(value: 10)\n      root.left = Program.BST(value: 5)\n      root.left!.left = Program.BST(value: 2)\n      root.left!.left!.left = Program.BST(value: 1)\n      root.left!.right = Program.BST(value: 5)\n      root.right = Program.BST(value: 15)\n      root.right!.left = Program.BST(value: 13)\n      root.right!.left!.right = Program.BST(value: 14)\n      root.right!.right = Program.BST(value: 22)\n\n      root.insert(value: 12)\n      try assertEqual(12, root.right?.left?.left?.value)\n\n      root.remove(value: 10, parentNode: nil)\n      try assertEqual(false, root.contains(value: 10))\n      try assertEqual(12, root.value)\n\n      try assertEqual(true, root.contains(value: 15))\n    }\n  }\n}\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nclass Program {\n  class BST {\n    var value: Int\n    var left: BST?\n    var right: BST?\n\n    init(value: Int) {\n      self.value = value\n      left = nil\n      right = nil\n    }\n\n    // Average: O(log(n)) time | O(log(n)) space\n    // Worst: O(n) time | O(n) space\n    func insert(value: Int) -> BST {\n      if value < self.value {\n        if let left = left {\n          left.insert(value: value)\n        } else {\n          left = BST(value: value)\n        }\n      } else {\n        if let right = right {\n          right.insert(value: value)\n        } else {\n          right = BST(value: value)\n        }\n      }\n\n      return self\n    }\n\n    // Average: O(log(n)) time | O(log(n)) space\n    // Worst: O(n) time | O(n) space\n    func contains(value: Int) -> Bool {\n      if value < self.value {\n        if let left = left {\n          return left.contains(value: value)\n        } else {\n          return false\n        }\n      } else if value > self.value {\n        if let right = right {\n          return right.contains(value: value)\n        } else {\n          return false\n        }\n      } else {\n        return true\n      }\n    }\n\n    // Average: O(log(n)) time | O(log(n)) space\n    // Worst: O(n) time | O(n) space\n    func remove(value: Int?, parentNode: BST?) -> BST {\n      if let valueToRemove = value, valueToRemove < self.value {\n        if let left = left {\n          left.remove(value: value, parentNode: self)\n        }\n      } else if let valueToRemove = value, valueToRemove > self.value {\n        if let right = right {\n          right.remove(value: value, parentNode: self)\n        }\n      } else {\n        if let _ = left, let right = right {\n          self.value = right.getMinValue()\n\n          right.remove(value: self.value, parentNode: self)\n        } else if parentNode === nil {\n          if let left = left {\n            self.value = left.value\n\n            right = left.right\n\n            self.left = left.left\n          } else if let right = right {\n            self.value = right.value\n\n            left = right.left\n\n            self.right = right.right\n          } else {\n            // This is a single-node tree; do nothing.\n          }\n        } else if let parent = parentNode, let parentLeft = parent.left, parentLeft === self {\n          if let left = left {\n            parent.left = left\n          } else {\n            parent.left = right\n          }\n        } else if let parent = parentNode, let parentRight = parentNode?.right, parentRight === self {\n          if let left = left {\n            parent.right = left\n          } else {\n            parent.right = right\n          }\n        }\n      }\n\n      return self\n    }\n\n    func getMinValue() -> Int {\n      if let left = left {\n        return left.getMinValue()\n      } else {\n        return value\n      }\n    }\n  }\n}\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nclass Program {\n  class BST {\n    var value: Int\n    var left: BST?\n    var right: BST?\n\n    init(value: Int) {\n      self.value = value\n      left = nil\n      right = nil\n    }\n\n    // Average: O(log(n)) time | O(1) space\n    // Worst: O(n) time | O(1) space\n    func insert(value: Int) -> BST {\n      var currentNode: BST? = self\n\n      while true {\n        if let node = currentNode, value < node.value {\n          if node.left === nil {\n            node.left = BST(value: value)\n            break\n          } else {\n            currentNode = node.left\n          }\n        } else if let node = currentNode {\n          if node.right === nil {\n            node.right = BST(value: value)\n            break\n          } else {\n            currentNode = node.right\n          }\n        }\n      }\n\n      return self\n    }\n\n    // Average: O(log(n)) time | O(1) space\n    // Worst: O(n) time | O(1) space\n    func contains(value: Int) -> Bool {\n      var currentNode: BST? = self\n\n      while currentNode !== nil {\n        if let node = currentNode, value < node.value {\n          currentNode = node.left\n        } else if let node = currentNode, value > node.value {\n          currentNode = node.right\n        } else {\n          return true\n        }\n      }\n\n      return false\n    }\n\n    // Average: O(log(n)) time | O(1) space\n    // Worst: O(n) time | O(1) space\n    func remove(value: Int, parentNode: BST?) -> BST {\n      var currentNode: BST? = self\n      var parentNode: BST? = parentNode\n      while let node = currentNode {\n        if value < node.value {\n          parentNode = node\n          currentNode = node.left\n        } else if value > node.value {\n          parentNode = node\n          currentNode = node.right\n        } else {\n          if let left = node.left, let right = node.right {\n            node.value = right.getMinValue()\n            right.remove(value: node.value, parentNode: node)\n          } else if parentNode === nil {\n            if let left = node.left {\n              node.value = left.value\n              node.right = left.right\n              node.left = left.left\n            } else if let right = node.right {\n              node.value = right.value\n              node.left = right.left\n              node.right = right.right\n            } else {\n              // This is a single-node tree; do nothing.\n            }\n          } else if let parent = parentNode {\n            if let parentLeft = parent.left, parentLeft === node {\n              if let left = node.left {\n                parent.left = left\n              } else {\n                parent.left = node.right\n              }\n            } else if let parentRight = parent.right, parentRight === node {\n              if let left = node.left {\n                parent.right = left\n              } else {\n                parent.right = node.right\n              }\n            }\n          }\n          break\n        }\n      }\n\n      return self\n    }\n\n    func getMinValue() -> Int {\n      var currentNode = self\n\n      while currentNode.left !== nil {\n        if let left = currentNode.left {\n          currentNode = left\n        }\n      }\n\n      return currentNode.value\n    }\n  }\n}\n"
      ]
    },
    "typescript": {
      "Language": "typescript",
      "StartingCode": "// Do not edit the class below except for\n// the insert, contains, and remove methods.\n// Feel free to add new properties and methods\n// to the class.\nexport class BST {\n  value: number;\n  left: BST | null;\n  right: BST | null;\n\n  constructor(value: number) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n\n  insert(value: number): BST {\n    // Write your code here.\n    // Do not edit the return statement of this method.\n    return this;\n  }\n\n  contains(value: number) {\n    // Write your code here.\n    return false;\n  }\n\n  remove(value: number): BST {\n    // Write your code here.\n    // Do not edit the return statement of this method.\n    return this;\n  }\n}\n",
      "StartingTest": "",
      "SandboxCode": "// This file is initialized with a code version of this\n// question's sample test case. Feel free to add, edit,\n// or remove test cases in this file as you see fit!\n\nimport * as program from './program';\nimport * as chai from 'chai';\n\nconst {BST} = program;\n\nit('Test Case #1', function () {\n  const root = new BST(10);\n  root.left = new BST(5);\n  root.left.left = new BST(2);\n  root.left.left.left = new BST(1);\n  root.left.right = new BST(5);\n  root.right = new BST(15);\n  root.right.left = new BST(13);\n  root.right.left.right = new BST(14);\n  root.right.right = new BST(22);\n\n  root.insert(12);\n  chai.expect(root.right.left.left).to.not.be.null;\n  chai.expect(root.right.left.left!.value).to.deep.equal(12);\n\n  root.remove(10);\n  chai.expect(root.contains(10)).to.deep.equal(false);\n  chai.expect(root.value).to.deep.equal(12);\n\n  chai.expect(root.contains(15)).to.deep.equal(true);\n});\n",
      "Solutions": [
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nexport class BST {\n  value: number;\n  left: BST | null;\n  right: BST | null;\n\n  constructor(value: number) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n\n  // Average: O(log(n)) time | O(log(n)) space\n  // Worst: O(n) time | O(n) space\n  insert(value: number): BST {\n    if (value < this.value) {\n      if (this.left === null) {\n        this.left = new BST(value);\n      } else {\n        this.left.insert(value);\n      }\n    } else {\n      if (this.right === null) {\n        this.right = new BST(value);\n      } else {\n        this.right.insert(value);\n      }\n    }\n    return this;\n  }\n\n  // Average: O(log(n)) time | O(log(n)) space\n  // Worst: O(n) time | O(n) space\n  contains(value: number): boolean {\n    if (value < this.value) {\n      if (this.left === null) {\n        return false;\n      } else {\n        return this.left.contains(value);\n      }\n    } else if (value > this.value) {\n      if (this.right === null) {\n        return false;\n      } else {\n        return this.right.contains(value);\n      }\n    } else {\n      return true;\n    }\n  }\n\n  // Average: O(log(n)) time | O(log(n)) space\n  // Worst: O(n) time | O(n) space\n  remove(value: number, parent: BST | null = null) {\n    if (value < this.value) {\n      if (this.left !== null) {\n        this.left.remove(value, this);\n      }\n    } else if (value > this.value) {\n      if (this.right !== null) {\n        this.right.remove(value, this);\n      }\n    } else {\n      if (this.left !== null && this.right !== null) {\n        this.value = this.right.getMinValue();\n        this.right.remove(this.value, this);\n      } else if (parent === null) {\n        if (this.left !== null) {\n          this.value = this.left.value;\n          this.right = this.left.right;\n          this.left = this.left.left;\n        } else if (this.right !== null) {\n          this.value = this.right.value;\n          this.left = this.right.left;\n          this.right = this.right.right;\n        } else {\n          // This is a single-node tree; do nothing.\n        }\n      } else if (parent.left === this) {\n        parent.left = this.left !== null ? this.left : this.right;\n      } else if (parent.right === this) {\n        parent.right = this.left !== null ? this.left : this.right;\n      }\n    }\n    return this;\n  }\n\n  getMinValue(): number {\n    if (this.left === null) {\n      return this.value;\n    } else {\n      return this.left.getMinValue();\n    }\n  }\n}\n",
        "// Copyright © 2020 Code Complete. All rights reserved.\n\nexport class BST {\n  value: number;\n  left: BST | null;\n  right: BST | null;\n\n  constructor(value: number) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n\n  // Average: O(log(n)) time | O(1) space\n  // Worst: O(n) time | O(1) space\n  insert(value: number) {\n    let currentNode: BST = this;\n    while (true) {\n      if (value < currentNode.value) {\n        if (currentNode.left === null) {\n          currentNode.left = new BST(value);\n          break;\n        } else {\n          currentNode = currentNode.left;\n        }\n      } else {\n        if (currentNode.right === null) {\n          currentNode.right = new BST(value);\n          break;\n        } else {\n          currentNode = currentNode.right;\n        }\n      }\n    }\n    return this;\n  }\n\n  // Average: O(log(n)) time | O(1) space\n  // Worst: O(n) time | O(1) space\n  contains(value: number) {\n    let currentNode: BST | null = this;\n    while (currentNode !== null) {\n      if (value < currentNode.value) {\n        currentNode = currentNode.left;\n      } else if (value > currentNode.value) {\n        currentNode = currentNode.right;\n      } else {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // Average: O(log(n)) time | O(1) space\n  // Worst: O(n) time | O(1) space\n  remove(value: number, parentNode: BST | null = null) {\n    let currentNode: BST | null = this;\n    while (currentNode !== null) {\n      if (value < currentNode.value) {\n        parentNode = currentNode;\n        currentNode = currentNode.left;\n      } else if (value > currentNode.value) {\n        parentNode = currentNode;\n        currentNode = currentNode.right;\n      } else {\n        if (currentNode.left !== null && currentNode.right !== null) {\n          currentNode.value = currentNode.right.getMinValue();\n          currentNode.right.remove(currentNode.value, currentNode);\n        } else if (parentNode === null) {\n          if (currentNode.left !== null) {\n            currentNode.value = currentNode.left.value;\n            currentNode.right = currentNode.left.right;\n            currentNode.left = currentNode.left.left;\n          } else if (currentNode.right !== null) {\n            currentNode.value = currentNode.right.value;\n            currentNode.left = currentNode.right.left;\n            currentNode.right = currentNode.right.right;\n          } else {\n            // This is a single-node tree; do nothing.\n          }\n        } else if (parentNode.left === currentNode) {\n          parentNode.left = currentNode.left !== null ? currentNode.left : currentNode.right;\n        } else if (parentNode.right === currentNode) {\n          parentNode.right = currentNode.left !== null ? currentNode.left : currentNode.right;\n        }\n        break;\n      }\n    }\n    return this;\n  }\n\n  getMinValue(): number {\n    let currentNode: BST = this;\n    while (currentNode.left !== null) {\n      currentNode = currentNode.left;\n    }\n    return currentNode.value;\n  }\n}\n"
      ]
    }
  },
  "JSONTestLanguages": [
    "javascript",
    "cpp",
    "python",
    "java",
    "csharp",
    "go",
    "swift",
    "typescript"
  ],
  "JSONTests": [
    {
      "classMethodsToCall": [
        {
          "arguments": [
            5
          ],
          "method": "insert"
        },
        {
          "arguments": [
            15
          ],
          "method": "insert"
        },
        {
          "arguments": [
            2
          ],
          "method": "insert"
        },
        {
          "arguments": [
            5
          ],
          "method": "insert"
        },
        {
          "arguments": [
            13
          ],
          "method": "insert"
        },
        {
          "arguments": [
            22
          ],
          "method": "insert"
        },
        {
          "arguments": [
            1
          ],
          "method": "insert"
        },
        {
          "arguments": [
            14
          ],
          "method": "insert"
        },
        {
          "arguments": [
            12
          ],
          "method": "insert"
        },
        {
          "arguments": [
            10
          ],
          "method": "remove"
        },
        {
          "arguments": [
            15
          ],
          "method": "contains"
        }
      ],
      "rootValue": 10
    },
    {
      "classMethodsToCall": [
        {
          "arguments": [
            5
          ],
          "method": "insert"
        },
        {
          "arguments": [
            15
          ],
          "method": "insert"
        }
      ],
      "rootValue": 10
    },
    {
      "classMethodsToCall": [
        {
          "arguments": [
            5
          ],
          "method": "insert"
        },
        {
          "arguments": [
            15
          ],
          "method": "insert"
        },
        {
          "arguments": [
            10
          ],
          "method": "contains"
        },
        {
          "arguments": [
            5
          ],
          "method": "contains"
        },
        {
          "arguments": [
            15
          ],
          "method": "contains"
        },
        {
          "arguments": [
            1
          ],
          "method": "contains"
        },
        {
          "arguments": [
            6
          ],
          "method": "contains"
        },
        {
          "arguments": [
            11
          ],
          "method": "contains"
        },
        {
          "arguments": [
            16
          ],
          "method": "contains"
        }
      ],
      "rootValue": 10
    },
    {
      "classMethodsToCall": [
        {
          "arguments": [
            5
          ],
          "method": "insert"
        },
        {
          "arguments": [
            15
          ],
          "method": "insert"
        },
        {
          "arguments": [
            5
          ],
          "method": "remove"
        },
        {
          "arguments": [
            15
          ],
          "method": "remove"
        },
        {
          "arguments": [
            10
          ],
          "method": "remove"
        }
      ],
      "rootValue": 10
    },
    {
      "classMethodsToCall": [
        {
          "arguments": [
            5
          ],
          "method": "insert"
        },
        {
          "arguments": [
            15
          ],
          "method": "insert"
        },
        {
          "arguments": [
            10
          ],
          "method": "contains"
        },
        {
          "arguments": [
            5
          ],
          "method": "contains"
        },
        {
          "arguments": [
            15
          ],
          "method": "contains"
        },
        {
          "arguments": [
            10
          ],
          "method": "remove"
        },
        {
          "arguments": [
            5
          ],
          "method": "remove"
        },
        {
          "arguments": [
            15
          ],
          "method": "remove"
        },
        {
          "arguments": [
            10
          ],
          "method": "contains"
        },
        {
          "arguments": [
            5
          ],
          "method": "contains"
        },
        {
          "arguments": [
            15
          ],
          "method": "contains"
        }
      ],
      "rootValue": 10
    },
    {
      "classMethodsToCall": [
        {
          "arguments": [
            2
          ],
          "method": "insert"
        },
        {
          "arguments": [
            3
          ],
          "method": "insert"
        },
        {
          "arguments": [
            4
          ],
          "method": "insert"
        },
        {
          "arguments": [
            5
          ],
          "method": "insert"
        },
        {
          "arguments": [
            6
          ],
          "method": "insert"
        },
        {
          "arguments": [
            7
          ],
          "method": "insert"
        },
        {
          "arguments": [
            8
          ],
          "method": "insert"
        },
        {
          "arguments": [
            9
          ],
          "method": "insert"
        },
        {
          "arguments": [
            10
          ],
          "method": "insert"
        },
        {
          "arguments": [
            11
          ],
          "method": "insert"
        },
        {
          "arguments": [
            12
          ],
          "method": "insert"
        },
        {
          "arguments": [
            13
          ],
          "method": "insert"
        },
        {
          "arguments": [
            14
          ],
          "method": "insert"
        },
        {
          "arguments": [
            15
          ],
          "method": "insert"
        },
        {
          "arguments": [
            16
          ],
          "method": "insert"
        },
        {
          "arguments": [
            17
          ],
          "method": "insert"
        },
        {
          "arguments": [
            18
          ],
          "method": "insert"
        },
        {
          "arguments": [
            19
          ],
          "method": "insert"
        },
        {
          "arguments": [
            20
          ],
          "method": "insert"
        },
        {
          "arguments": [
            2
          ],
          "method": "remove"
        },
        {
          "arguments": [
            4
          ],
          "method": "remove"
        },
        {
          "arguments": [
            6
          ],
          "method": "remove"
        },
        {
          "arguments": [
            8
          ],
          "method": "remove"
        },
        {
          "arguments": [
            11
          ],
          "method": "remove"
        },
        {
          "arguments": [
            13
          ],
          "method": "remove"
        },
        {
          "arguments": [
            15
          ],
          "method": "remove"
        },
        {
          "arguments": [
            17
          ],
          "method": "remove"
        },
        {
          "arguments": [
            19
          ],
          "method": "remove"
        },
        {
          "arguments": [
            1
          ],
          "method": "insert"
        },
        {
          "arguments": [
            2
          ],
          "method": "insert"
        },
        {
          "arguments": [
            3
          ],
          "method": "insert"
        },
        {
          "arguments": [
            4
          ],
          "method": "insert"
        },
        {
          "arguments": [
            5
          ],
          "method": "insert"
        },
        {
          "arguments": [
            6
          ],
          "method": "insert"
        },
        {
          "arguments": [
            7
          ],
          "method": "insert"
        },
        {
          "arguments": [
            8
          ],
          "method": "insert"
        },
        {
          "arguments": [
            9
          ],
          "method": "insert"
        },
        {
          "arguments": [
            10
          ],
          "method": "insert"
        },
        {
          "arguments": [
            9000
          ],
          "method": "contains"
        }
      ],
      "rootValue": 1
    }
  ],
  "JSONAnswers": [
    [
      [
        {
          "arguments": [
            5
          ],
          "method": "insert",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "10",
                "left": "5",
                "right": null,
                "value": 10
              },
              {
                "id": "5",
                "left": null,
                "right": null,
                "value": 5
              }
            ],
            "root": "10"
          }
        },
        {
          "arguments": [
            15
          ],
          "method": "insert",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "10",
                "left": "5",
                "right": "15",
                "value": 10
              },
              {
                "id": "15",
                "left": null,
                "right": null,
                "value": 15
              },
              {
                "id": "5",
                "left": null,
                "right": null,
                "value": 5
              }
            ],
            "root": "10"
          }
        },
        {
          "arguments": [
            2
          ],
          "method": "insert",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "10",
                "left": "5",
                "right": "15",
                "value": 10
              },
              {
                "id": "15",
                "left": null,
                "right": null,
                "value": 15
              },
              {
                "id": "5",
                "left": "2",
                "right": null,
                "value": 5
              },
              {
                "id": "2",
                "left": null,
                "right": null,
                "value": 2
              }
            ],
            "root": "10"
          }
        },
        {
          "arguments": [
            5
          ],
          "method": "insert",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "10",
                "left": "5",
                "right": "15",
                "value": 10
              },
              {
                "id": "15",
                "left": null,
                "right": null,
                "value": 15
              },
              {
                "id": "5",
                "left": "2",
                "right": "5-2",
                "value": 5
              },
              {
                "id": "5-2",
                "left": null,
                "right": null,
                "value": 5
              },
              {
                "id": "2",
                "left": null,
                "right": null,
                "value": 2
              }
            ],
            "root": "10"
          }
        },
        {
          "arguments": [
            13
          ],
          "method": "insert",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "10",
                "left": "5",
                "right": "15",
                "value": 10
              },
              {
                "id": "15",
                "left": "13",
                "right": null,
                "value": 15
              },
              {
                "id": "13",
                "left": null,
                "right": null,
                "value": 13
              },
              {
                "id": "5",
                "left": "2",
                "right": "5-2",
                "value": 5
              },
              {
                "id": "5-2",
                "left": null,
                "right": null,
                "value": 5
              },
              {
                "id": "2",
                "left": null,
                "right": null,
                "value": 2
              }
            ],
            "root": "10"
          }
        },
        {
          "arguments": [
            22
          ],
          "method": "insert",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "10",
                "left": "5",
                "right": "15",
                "value": 10
              },
              {
                "id": "15",
                "left": "13",
                "right": "22",
                "value": 15
              },
              {
                "id": "22",
                "left": null,
                "right": null,
                "value": 22
              },
              {
                "id": "13",
                "left": null,
                "right": null,
                "value": 13
              },
              {
                "id": "5",
                "left": "2",
                "right": "5-2",
                "value": 5
              },
              {
                "id": "5-2",
                "left": null,
                "right": null,
                "value": 5
              },
              {
                "id": "2",
                "left": null,
                "right": null,
                "value": 2
              }
            ],
            "root": "10"
          }
        },
        {
          "arguments": [
            1
          ],
          "method": "insert",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "10",
                "left": "5",
                "right": "15",
                "value": 10
              },
              {
                "id": "15",
                "left": "13",
                "right": "22",
                "value": 15
              },
              {
                "id": "22",
                "left": null,
                "right": null,
                "value": 22
              },
              {
                "id": "13",
                "left": null,
                "right": null,
                "value": 13
              },
              {
                "id": "5",
                "left": "2",
                "right": "5-2",
                "value": 5
              },
              {
                "id": "5-2",
                "left": null,
                "right": null,
                "value": 5
              },
              {
                "id": "2",
                "left": "1",
                "right": null,
                "value": 2
              },
              {
                "id": "1",
                "left": null,
                "right": null,
                "value": 1
              }
            ],
            "root": "10"
          }
        },
        {
          "arguments": [
            14
          ],
          "method": "insert",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "10",
                "left": "5",
                "right": "15",
                "value": 10
              },
              {
                "id": "15",
                "left": "13",
                "right": "22",
                "value": 15
              },
              {
                "id": "22",
                "left": null,
                "right": null,
                "value": 22
              },
              {
                "id": "13",
                "left": null,
                "right": "14",
                "value": 13
              },
              {
                "id": "14",
                "left": null,
                "right": null,
                "value": 14
              },
              {
                "id": "5",
                "left": "2",
                "right": "5-2",
                "value": 5
              },
              {
                "id": "5-2",
                "left": null,
                "right": null,
                "value": 5
              },
              {
                "id": "2",
                "left": "1",
                "right": null,
                "value": 2
              },
              {
                "id": "1",
                "left": null,
                "right": null,
                "value": 1
              }
            ],
            "root": "10"
          }
        },
        {
          "arguments": [
            12
          ],
          "method": "insert",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "10",
                "left": "5",
                "right": "15",
                "value": 10
              },
              {
                "id": "15",
                "left": "13",
                "right": "22",
                "value": 15
              },
              {
                "id": "22",
                "left": null,
                "right": null,
                "value": 22
              },
              {
                "id": "13",
                "left": "12",
                "right": "14",
                "value": 13
              },
              {
                "id": "14",
                "left": null,
                "right": null,
                "value": 14
              },
              {
                "id": "12",
                "left": null,
                "right": null,
                "value": 12
              },
              {
                "id": "5",
                "left": "2",
                "right": "5-2",
                "value": 5
              },
              {
                "id": "5-2",
                "left": null,
                "right": null,
                "value": 5
              },
              {
                "id": "2",
                "left": "1",
                "right": null,
                "value": 2
              },
              {
                "id": "1",
                "left": null,
                "right": null,
                "value": 1
              }
            ],
            "root": "10"
          }
        },
        {
          "arguments": [
            10
          ],
          "method": "remove",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "12",
                "left": "5",
                "right": "15",
                "value": 12
              },
              {
                "id": "15",
                "left": "13",
                "right": "22",
                "value": 15
              },
              {
                "id": "22",
                "left": null,
                "right": null,
                "value": 22
              },
              {
                "id": "13",
                "left": null,
                "right": "14",
                "value": 13
              },
              {
                "id": "14",
                "left": null,
                "right": null,
                "value": 14
              },
              {
                "id": "5",
                "left": "2",
                "right": "5-2",
                "value": 5
              },
              {
                "id": "5-2",
                "left": null,
                "right": null,
                "value": 5
              },
              {
                "id": "2",
                "left": "1",
                "right": null,
                "value": 2
              },
              {
                "id": "1",
                "left": null,
                "right": null,
                "value": 1
              }
            ],
            "root": "12"
          }
        },
        {
          "arguments": [
            15
          ],
          "method": "contains",
          "output": true,
          "tree": {
            "nodes": [
              {
                "id": "12",
                "left": "5",
                "right": "15",
                "value": 12
              },
              {
                "id": "15",
                "left": "13",
                "right": "22",
                "value": 15
              },
              {
                "id": "22",
                "left": null,
                "right": null,
                "value": 22
              },
              {
                "id": "13",
                "left": null,
                "right": "14",
                "value": 13
              },
              {
                "id": "14",
                "left": null,
                "right": null,
                "value": 14
              },
              {
                "id": "5",
                "left": "2",
                "right": "5-2",
                "value": 5
              },
              {
                "id": "5-2",
                "left": null,
                "right": null,
                "value": 5
              },
              {
                "id": "2",
                "left": "1",
                "right": null,
                "value": 2
              },
              {
                "id": "1",
                "left": null,
                "right": null,
                "value": 1
              }
            ],
            "root": "12"
          }
        }
      ],
      [
        {
          "arguments": [
            5
          ],
          "method": "insert",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "10",
                "left": "5",
                "right": null,
                "value": 10
              },
              {
                "id": "5",
                "left": null,
                "right": null,
                "value": 5
              }
            ],
            "root": "10"
          }
        },
        {
          "arguments": [
            15
          ],
          "method": "insert",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "10",
                "left": "5",
                "right": "15",
                "value": 10
              },
              {
                "id": "15",
                "left": null,
                "right": null,
                "value": 15
              },
              {
                "id": "5",
                "left": null,
                "right": null,
                "value": 5
              }
            ],
            "root": "10"
          }
        }
      ],
      [
        {
          "arguments": [
            5
          ],
          "method": "insert",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "10",
                "left": "5",
                "right": null,
                "value": 10
              },
              {
                "id": "5",
                "left": null,
                "right": null,
                "value": 5
              }
            ],
            "root": "10"
          }
        },
        {
          "arguments": [
            15
          ],
          "method": "insert",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "10",
                "left": "5",
                "right": "15",
                "value": 10
              },
              {
                "id": "15",
                "left": null,
                "right": null,
                "value": 15
              },
              {
                "id": "5",
                "left": null,
                "right": null,
                "value": 5
              }
            ],
            "root": "10"
          }
        },
        {
          "arguments": [
            10
          ],
          "method": "contains",
          "output": true,
          "tree": {
            "nodes": [
              {
                "id": "10",
                "left": "5",
                "right": "15",
                "value": 10
              },
              {
                "id": "15",
                "left": null,
                "right": null,
                "value": 15
              },
              {
                "id": "5",
                "left": null,
                "right": null,
                "value": 5
              }
            ],
            "root": "10"
          }
        },
        {
          "arguments": [
            5
          ],
          "method": "contains",
          "output": true,
          "tree": {
            "nodes": [
              {
                "id": "10",
                "left": "5",
                "right": "15",
                "value": 10
              },
              {
                "id": "15",
                "left": null,
                "right": null,
                "value": 15
              },
              {
                "id": "5",
                "left": null,
                "right": null,
                "value": 5
              }
            ],
            "root": "10"
          }
        },
        {
          "arguments": [
            15
          ],
          "method": "contains",
          "output": true,
          "tree": {
            "nodes": [
              {
                "id": "10",
                "left": "5",
                "right": "15",
                "value": 10
              },
              {
                "id": "15",
                "left": null,
                "right": null,
                "value": 15
              },
              {
                "id": "5",
                "left": null,
                "right": null,
                "value": 5
              }
            ],
            "root": "10"
          }
        },
        {
          "arguments": [
            1
          ],
          "method": "contains",
          "output": false,
          "tree": {
            "nodes": [
              {
                "id": "10",
                "left": "5",
                "right": "15",
                "value": 10
              },
              {
                "id": "15",
                "left": null,
                "right": null,
                "value": 15
              },
              {
                "id": "5",
                "left": null,
                "right": null,
                "value": 5
              }
            ],
            "root": "10"
          }
        },
        {
          "arguments": [
            6
          ],
          "method": "contains",
          "output": false,
          "tree": {
            "nodes": [
              {
                "id": "10",
                "left": "5",
                "right": "15",
                "value": 10
              },
              {
                "id": "15",
                "left": null,
                "right": null,
                "value": 15
              },
              {
                "id": "5",
                "left": null,
                "right": null,
                "value": 5
              }
            ],
            "root": "10"
          }
        },
        {
          "arguments": [
            11
          ],
          "method": "contains",
          "output": false,
          "tree": {
            "nodes": [
              {
                "id": "10",
                "left": "5",
                "right": "15",
                "value": 10
              },
              {
                "id": "15",
                "left": null,
                "right": null,
                "value": 15
              },
              {
                "id": "5",
                "left": null,
                "right": null,
                "value": 5
              }
            ],
            "root": "10"
          }
        },
        {
          "arguments": [
            16
          ],
          "method": "contains",
          "output": false,
          "tree": {
            "nodes": [
              {
                "id": "10",
                "left": "5",
                "right": "15",
                "value": 10
              },
              {
                "id": "15",
                "left": null,
                "right": null,
                "value": 15
              },
              {
                "id": "5",
                "left": null,
                "right": null,
                "value": 5
              }
            ],
            "root": "10"
          }
        }
      ],
      [
        {
          "arguments": [
            5
          ],
          "method": "insert",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "10",
                "left": "5",
                "right": null,
                "value": 10
              },
              {
                "id": "5",
                "left": null,
                "right": null,
                "value": 5
              }
            ],
            "root": "10"
          }
        },
        {
          "arguments": [
            15
          ],
          "method": "insert",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "10",
                "left": "5",
                "right": "15",
                "value": 10
              },
              {
                "id": "15",
                "left": null,
                "right": null,
                "value": 15
              },
              {
                "id": "5",
                "left": null,
                "right": null,
                "value": 5
              }
            ],
            "root": "10"
          }
        },
        {
          "arguments": [
            5
          ],
          "method": "remove",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "10",
                "left": null,
                "right": "15",
                "value": 10
              },
              {
                "id": "15",
                "left": null,
                "right": null,
                "value": 15
              }
            ],
            "root": "10"
          }
        },
        {
          "arguments": [
            15
          ],
          "method": "remove",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "10",
                "left": null,
                "right": null,
                "value": 10
              }
            ],
            "root": "10"
          }
        },
        {
          "arguments": [
            10
          ],
          "method": "remove",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "10",
                "left": null,
                "right": null,
                "value": 10
              }
            ],
            "root": "10"
          }
        }
      ],
      [
        {
          "arguments": [
            5
          ],
          "method": "insert",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "10",
                "left": "5",
                "right": null,
                "value": 10
              },
              {
                "id": "5",
                "left": null,
                "right": null,
                "value": 5
              }
            ],
            "root": "10"
          }
        },
        {
          "arguments": [
            15
          ],
          "method": "insert",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "10",
                "left": "5",
                "right": "15",
                "value": 10
              },
              {
                "id": "15",
                "left": null,
                "right": null,
                "value": 15
              },
              {
                "id": "5",
                "left": null,
                "right": null,
                "value": 5
              }
            ],
            "root": "10"
          }
        },
        {
          "arguments": [
            10
          ],
          "method": "contains",
          "output": true,
          "tree": {
            "nodes": [
              {
                "id": "10",
                "left": "5",
                "right": "15",
                "value": 10
              },
              {
                "id": "15",
                "left": null,
                "right": null,
                "value": 15
              },
              {
                "id": "5",
                "left": null,
                "right": null,
                "value": 5
              }
            ],
            "root": "10"
          }
        },
        {
          "arguments": [
            5
          ],
          "method": "contains",
          "output": true,
          "tree": {
            "nodes": [
              {
                "id": "10",
                "left": "5",
                "right": "15",
                "value": 10
              },
              {
                "id": "15",
                "left": null,
                "right": null,
                "value": 15
              },
              {
                "id": "5",
                "left": null,
                "right": null,
                "value": 5
              }
            ],
            "root": "10"
          }
        },
        {
          "arguments": [
            15
          ],
          "method": "contains",
          "output": true,
          "tree": {
            "nodes": [
              {
                "id": "10",
                "left": "5",
                "right": "15",
                "value": 10
              },
              {
                "id": "15",
                "left": null,
                "right": null,
                "value": 15
              },
              {
                "id": "5",
                "left": null,
                "right": null,
                "value": 5
              }
            ],
            "root": "10"
          }
        },
        {
          "arguments": [
            10
          ],
          "method": "remove",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "15",
                "left": "5",
                "right": null,
                "value": 15
              },
              {
                "id": "5",
                "left": null,
                "right": null,
                "value": 5
              }
            ],
            "root": "15"
          }
        },
        {
          "arguments": [
            5
          ],
          "method": "remove",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "15",
                "left": null,
                "right": null,
                "value": 15
              }
            ],
            "root": "15"
          }
        },
        {
          "arguments": [
            15
          ],
          "method": "remove",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "15",
                "left": null,
                "right": null,
                "value": 15
              }
            ],
            "root": "15"
          }
        },
        {
          "arguments": [
            10
          ],
          "method": "contains",
          "output": false,
          "tree": {
            "nodes": [
              {
                "id": "15",
                "left": null,
                "right": null,
                "value": 15
              }
            ],
            "root": "15"
          }
        },
        {
          "arguments": [
            5
          ],
          "method": "contains",
          "output": false,
          "tree": {
            "nodes": [
              {
                "id": "15",
                "left": null,
                "right": null,
                "value": 15
              }
            ],
            "root": "15"
          }
        },
        {
          "arguments": [
            15
          ],
          "method": "contains",
          "output": true,
          "tree": {
            "nodes": [
              {
                "id": "15",
                "left": null,
                "right": null,
                "value": 15
              }
            ],
            "root": "15"
          }
        }
      ],
      [
        {
          "arguments": [
            2
          ],
          "method": "insert",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "1",
                "left": null,
                "right": "2",
                "value": 1
              },
              {
                "id": "2",
                "left": null,
                "right": null,
                "value": 2
              }
            ],
            "root": "1"
          }
        },
        {
          "arguments": [
            3
          ],
          "method": "insert",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "1",
                "left": null,
                "right": "2",
                "value": 1
              },
              {
                "id": "2",
                "left": null,
                "right": "3",
                "value": 2
              },
              {
                "id": "3",
                "left": null,
                "right": null,
                "value": 3
              }
            ],
            "root": "1"
          }
        },
        {
          "arguments": [
            4
          ],
          "method": "insert",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "1",
                "left": null,
                "right": "2",
                "value": 1
              },
              {
                "id": "2",
                "left": null,
                "right": "3",
                "value": 2
              },
              {
                "id": "3",
                "left": null,
                "right": "4",
                "value": 3
              },
              {
                "id": "4",
                "left": null,
                "right": null,
                "value": 4
              }
            ],
            "root": "1"
          }
        },
        {
          "arguments": [
            5
          ],
          "method": "insert",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "1",
                "left": null,
                "right": "2",
                "value": 1
              },
              {
                "id": "2",
                "left": null,
                "right": "3",
                "value": 2
              },
              {
                "id": "3",
                "left": null,
                "right": "4",
                "value": 3
              },
              {
                "id": "4",
                "left": null,
                "right": "5",
                "value": 4
              },
              {
                "id": "5",
                "left": null,
                "right": null,
                "value": 5
              }
            ],
            "root": "1"
          }
        },
        {
          "arguments": [
            6
          ],
          "method": "insert",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "1",
                "left": null,
                "right": "2",
                "value": 1
              },
              {
                "id": "2",
                "left": null,
                "right": "3",
                "value": 2
              },
              {
                "id": "3",
                "left": null,
                "right": "4",
                "value": 3
              },
              {
                "id": "4",
                "left": null,
                "right": "5",
                "value": 4
              },
              {
                "id": "5",
                "left": null,
                "right": "6",
                "value": 5
              },
              {
                "id": "6",
                "left": null,
                "right": null,
                "value": 6
              }
            ],
            "root": "1"
          }
        },
        {
          "arguments": [
            7
          ],
          "method": "insert",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "1",
                "left": null,
                "right": "2",
                "value": 1
              },
              {
                "id": "2",
                "left": null,
                "right": "3",
                "value": 2
              },
              {
                "id": "3",
                "left": null,
                "right": "4",
                "value": 3
              },
              {
                "id": "4",
                "left": null,
                "right": "5",
                "value": 4
              },
              {
                "id": "5",
                "left": null,
                "right": "6",
                "value": 5
              },
              {
                "id": "6",
                "left": null,
                "right": "7",
                "value": 6
              },
              {
                "id": "7",
                "left": null,
                "right": null,
                "value": 7
              }
            ],
            "root": "1"
          }
        },
        {
          "arguments": [
            8
          ],
          "method": "insert",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "1",
                "left": null,
                "right": "2",
                "value": 1
              },
              {
                "id": "2",
                "left": null,
                "right": "3",
                "value": 2
              },
              {
                "id": "3",
                "left": null,
                "right": "4",
                "value": 3
              },
              {
                "id": "4",
                "left": null,
                "right": "5",
                "value": 4
              },
              {
                "id": "5",
                "left": null,
                "right": "6",
                "value": 5
              },
              {
                "id": "6",
                "left": null,
                "right": "7",
                "value": 6
              },
              {
                "id": "7",
                "left": null,
                "right": "8",
                "value": 7
              },
              {
                "id": "8",
                "left": null,
                "right": null,
                "value": 8
              }
            ],
            "root": "1"
          }
        },
        {
          "arguments": [
            9
          ],
          "method": "insert",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "1",
                "left": null,
                "right": "2",
                "value": 1
              },
              {
                "id": "2",
                "left": null,
                "right": "3",
                "value": 2
              },
              {
                "id": "3",
                "left": null,
                "right": "4",
                "value": 3
              },
              {
                "id": "4",
                "left": null,
                "right": "5",
                "value": 4
              },
              {
                "id": "5",
                "left": null,
                "right": "6",
                "value": 5
              },
              {
                "id": "6",
                "left": null,
                "right": "7",
                "value": 6
              },
              {
                "id": "7",
                "left": null,
                "right": "8",
                "value": 7
              },
              {
                "id": "8",
                "left": null,
                "right": "9",
                "value": 8
              },
              {
                "id": "9",
                "left": null,
                "right": null,
                "value": 9
              }
            ],
            "root": "1"
          }
        },
        {
          "arguments": [
            10
          ],
          "method": "insert",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "1",
                "left": null,
                "right": "2",
                "value": 1
              },
              {
                "id": "2",
                "left": null,
                "right": "3",
                "value": 2
              },
              {
                "id": "3",
                "left": null,
                "right": "4",
                "value": 3
              },
              {
                "id": "4",
                "left": null,
                "right": "5",
                "value": 4
              },
              {
                "id": "5",
                "left": null,
                "right": "6",
                "value": 5
              },
              {
                "id": "6",
                "left": null,
                "right": "7",
                "value": 6
              },
              {
                "id": "7",
                "left": null,
                "right": "8",
                "value": 7
              },
              {
                "id": "8",
                "left": null,
                "right": "9",
                "value": 8
              },
              {
                "id": "9",
                "left": null,
                "right": "10",
                "value": 9
              },
              {
                "id": "10",
                "left": null,
                "right": null,
                "value": 10
              }
            ],
            "root": "1"
          }
        },
        {
          "arguments": [
            11
          ],
          "method": "insert",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "1",
                "left": null,
                "right": "2",
                "value": 1
              },
              {
                "id": "2",
                "left": null,
                "right": "3",
                "value": 2
              },
              {
                "id": "3",
                "left": null,
                "right": "4",
                "value": 3
              },
              {
                "id": "4",
                "left": null,
                "right": "5",
                "value": 4
              },
              {
                "id": "5",
                "left": null,
                "right": "6",
                "value": 5
              },
              {
                "id": "6",
                "left": null,
                "right": "7",
                "value": 6
              },
              {
                "id": "7",
                "left": null,
                "right": "8",
                "value": 7
              },
              {
                "id": "8",
                "left": null,
                "right": "9",
                "value": 8
              },
              {
                "id": "9",
                "left": null,
                "right": "10",
                "value": 9
              },
              {
                "id": "10",
                "left": null,
                "right": "11",
                "value": 10
              },
              {
                "id": "11",
                "left": null,
                "right": null,
                "value": 11
              }
            ],
            "root": "1"
          }
        },
        {
          "arguments": [
            12
          ],
          "method": "insert",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "1",
                "left": null,
                "right": "2",
                "value": 1
              },
              {
                "id": "2",
                "left": null,
                "right": "3",
                "value": 2
              },
              {
                "id": "3",
                "left": null,
                "right": "4",
                "value": 3
              },
              {
                "id": "4",
                "left": null,
                "right": "5",
                "value": 4
              },
              {
                "id": "5",
                "left": null,
                "right": "6",
                "value": 5
              },
              {
                "id": "6",
                "left": null,
                "right": "7",
                "value": 6
              },
              {
                "id": "7",
                "left": null,
                "right": "8",
                "value": 7
              },
              {
                "id": "8",
                "left": null,
                "right": "9",
                "value": 8
              },
              {
                "id": "9",
                "left": null,
                "right": "10",
                "value": 9
              },
              {
                "id": "10",
                "left": null,
                "right": "11",
                "value": 10
              },
              {
                "id": "11",
                "left": null,
                "right": "12",
                "value": 11
              },
              {
                "id": "12",
                "left": null,
                "right": null,
                "value": 12
              }
            ],
            "root": "1"
          }
        },
        {
          "arguments": [
            13
          ],
          "method": "insert",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "1",
                "left": null,
                "right": "2",
                "value": 1
              },
              {
                "id": "2",
                "left": null,
                "right": "3",
                "value": 2
              },
              {
                "id": "3",
                "left": null,
                "right": "4",
                "value": 3
              },
              {
                "id": "4",
                "left": null,
                "right": "5",
                "value": 4
              },
              {
                "id": "5",
                "left": null,
                "right": "6",
                "value": 5
              },
              {
                "id": "6",
                "left": null,
                "right": "7",
                "value": 6
              },
              {
                "id": "7",
                "left": null,
                "right": "8",
                "value": 7
              },
              {
                "id": "8",
                "left": null,
                "right": "9",
                "value": 8
              },
              {
                "id": "9",
                "left": null,
                "right": "10",
                "value": 9
              },
              {
                "id": "10",
                "left": null,
                "right": "11",
                "value": 10
              },
              {
                "id": "11",
                "left": null,
                "right": "12",
                "value": 11
              },
              {
                "id": "12",
                "left": null,
                "right": "13",
                "value": 12
              },
              {
                "id": "13",
                "left": null,
                "right": null,
                "value": 13
              }
            ],
            "root": "1"
          }
        },
        {
          "arguments": [
            14
          ],
          "method": "insert",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "1",
                "left": null,
                "right": "2",
                "value": 1
              },
              {
                "id": "2",
                "left": null,
                "right": "3",
                "value": 2
              },
              {
                "id": "3",
                "left": null,
                "right": "4",
                "value": 3
              },
              {
                "id": "4",
                "left": null,
                "right": "5",
                "value": 4
              },
              {
                "id": "5",
                "left": null,
                "right": "6",
                "value": 5
              },
              {
                "id": "6",
                "left": null,
                "right": "7",
                "value": 6
              },
              {
                "id": "7",
                "left": null,
                "right": "8",
                "value": 7
              },
              {
                "id": "8",
                "left": null,
                "right": "9",
                "value": 8
              },
              {
                "id": "9",
                "left": null,
                "right": "10",
                "value": 9
              },
              {
                "id": "10",
                "left": null,
                "right": "11",
                "value": 10
              },
              {
                "id": "11",
                "left": null,
                "right": "12",
                "value": 11
              },
              {
                "id": "12",
                "left": null,
                "right": "13",
                "value": 12
              },
              {
                "id": "13",
                "left": null,
                "right": "14",
                "value": 13
              },
              {
                "id": "14",
                "left": null,
                "right": null,
                "value": 14
              }
            ],
            "root": "1"
          }
        },
        {
          "arguments": [
            15
          ],
          "method": "insert",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "1",
                "left": null,
                "right": "2",
                "value": 1
              },
              {
                "id": "2",
                "left": null,
                "right": "3",
                "value": 2
              },
              {
                "id": "3",
                "left": null,
                "right": "4",
                "value": 3
              },
              {
                "id": "4",
                "left": null,
                "right": "5",
                "value": 4
              },
              {
                "id": "5",
                "left": null,
                "right": "6",
                "value": 5
              },
              {
                "id": "6",
                "left": null,
                "right": "7",
                "value": 6
              },
              {
                "id": "7",
                "left": null,
                "right": "8",
                "value": 7
              },
              {
                "id": "8",
                "left": null,
                "right": "9",
                "value": 8
              },
              {
                "id": "9",
                "left": null,
                "right": "10",
                "value": 9
              },
              {
                "id": "10",
                "left": null,
                "right": "11",
                "value": 10
              },
              {
                "id": "11",
                "left": null,
                "right": "12",
                "value": 11
              },
              {
                "id": "12",
                "left": null,
                "right": "13",
                "value": 12
              },
              {
                "id": "13",
                "left": null,
                "right": "14",
                "value": 13
              },
              {
                "id": "14",
                "left": null,
                "right": "15",
                "value": 14
              },
              {
                "id": "15",
                "left": null,
                "right": null,
                "value": 15
              }
            ],
            "root": "1"
          }
        },
        {
          "arguments": [
            16
          ],
          "method": "insert",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "1",
                "left": null,
                "right": "2",
                "value": 1
              },
              {
                "id": "2",
                "left": null,
                "right": "3",
                "value": 2
              },
              {
                "id": "3",
                "left": null,
                "right": "4",
                "value": 3
              },
              {
                "id": "4",
                "left": null,
                "right": "5",
                "value": 4
              },
              {
                "id": "5",
                "left": null,
                "right": "6",
                "value": 5
              },
              {
                "id": "6",
                "left": null,
                "right": "7",
                "value": 6
              },
              {
                "id": "7",
                "left": null,
                "right": "8",
                "value": 7
              },
              {
                "id": "8",
                "left": null,
                "right": "9",
                "value": 8
              },
              {
                "id": "9",
                "left": null,
                "right": "10",
                "value": 9
              },
              {
                "id": "10",
                "left": null,
                "right": "11",
                "value": 10
              },
              {
                "id": "11",
                "left": null,
                "right": "12",
                "value": 11
              },
              {
                "id": "12",
                "left": null,
                "right": "13",
                "value": 12
              },
              {
                "id": "13",
                "left": null,
                "right": "14",
                "value": 13
              },
              {
                "id": "14",
                "left": null,
                "right": "15",
                "value": 14
              },
              {
                "id": "15",
                "left": null,
                "right": "16",
                "value": 15
              },
              {
                "id": "16",
                "left": null,
                "right": null,
                "value": 16
              }
            ],
            "root": "1"
          }
        },
        {
          "arguments": [
            17
          ],
          "method": "insert",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "1",
                "left": null,
                "right": "2",
                "value": 1
              },
              {
                "id": "2",
                "left": null,
                "right": "3",
                "value": 2
              },
              {
                "id": "3",
                "left": null,
                "right": "4",
                "value": 3
              },
              {
                "id": "4",
                "left": null,
                "right": "5",
                "value": 4
              },
              {
                "id": "5",
                "left": null,
                "right": "6",
                "value": 5
              },
              {
                "id": "6",
                "left": null,
                "right": "7",
                "value": 6
              },
              {
                "id": "7",
                "left": null,
                "right": "8",
                "value": 7
              },
              {
                "id": "8",
                "left": null,
                "right": "9",
                "value": 8
              },
              {
                "id": "9",
                "left": null,
                "right": "10",
                "value": 9
              },
              {
                "id": "10",
                "left": null,
                "right": "11",
                "value": 10
              },
              {
                "id": "11",
                "left": null,
                "right": "12",
                "value": 11
              },
              {
                "id": "12",
                "left": null,
                "right": "13",
                "value": 12
              },
              {
                "id": "13",
                "left": null,
                "right": "14",
                "value": 13
              },
              {
                "id": "14",
                "left": null,
                "right": "15",
                "value": 14
              },
              {
                "id": "15",
                "left": null,
                "right": "16",
                "value": 15
              },
              {
                "id": "16",
                "left": null,
                "right": "17",
                "value": 16
              },
              {
                "id": "17",
                "left": null,
                "right": null,
                "value": 17
              }
            ],
            "root": "1"
          }
        },
        {
          "arguments": [
            18
          ],
          "method": "insert",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "1",
                "left": null,
                "right": "2",
                "value": 1
              },
              {
                "id": "2",
                "left": null,
                "right": "3",
                "value": 2
              },
              {
                "id": "3",
                "left": null,
                "right": "4",
                "value": 3
              },
              {
                "id": "4",
                "left": null,
                "right": "5",
                "value": 4
              },
              {
                "id": "5",
                "left": null,
                "right": "6",
                "value": 5
              },
              {
                "id": "6",
                "left": null,
                "right": "7",
                "value": 6
              },
              {
                "id": "7",
                "left": null,
                "right": "8",
                "value": 7
              },
              {
                "id": "8",
                "left": null,
                "right": "9",
                "value": 8
              },
              {
                "id": "9",
                "left": null,
                "right": "10",
                "value": 9
              },
              {
                "id": "10",
                "left": null,
                "right": "11",
                "value": 10
              },
              {
                "id": "11",
                "left": null,
                "right": "12",
                "value": 11
              },
              {
                "id": "12",
                "left": null,
                "right": "13",
                "value": 12
              },
              {
                "id": "13",
                "left": null,
                "right": "14",
                "value": 13
              },
              {
                "id": "14",
                "left": null,
                "right": "15",
                "value": 14
              },
              {
                "id": "15",
                "left": null,
                "right": "16",
                "value": 15
              },
              {
                "id": "16",
                "left": null,
                "right": "17",
                "value": 16
              },
              {
                "id": "17",
                "left": null,
                "right": "18",
                "value": 17
              },
              {
                "id": "18",
                "left": null,
                "right": null,
                "value": 18
              }
            ],
            "root": "1"
          }
        },
        {
          "arguments": [
            19
          ],
          "method": "insert",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "1",
                "left": null,
                "right": "2",
                "value": 1
              },
              {
                "id": "2",
                "left": null,
                "right": "3",
                "value": 2
              },
              {
                "id": "3",
                "left": null,
                "right": "4",
                "value": 3
              },
              {
                "id": "4",
                "left": null,
                "right": "5",
                "value": 4
              },
              {
                "id": "5",
                "left": null,
                "right": "6",
                "value": 5
              },
              {
                "id": "6",
                "left": null,
                "right": "7",
                "value": 6
              },
              {
                "id": "7",
                "left": null,
                "right": "8",
                "value": 7
              },
              {
                "id": "8",
                "left": null,
                "right": "9",
                "value": 8
              },
              {
                "id": "9",
                "left": null,
                "right": "10",
                "value": 9
              },
              {
                "id": "10",
                "left": null,
                "right": "11",
                "value": 10
              },
              {
                "id": "11",
                "left": null,
                "right": "12",
                "value": 11
              },
              {
                "id": "12",
                "left": null,
                "right": "13",
                "value": 12
              },
              {
                "id": "13",
                "left": null,
                "right": "14",
                "value": 13
              },
              {
                "id": "14",
                "left": null,
                "right": "15",
                "value": 14
              },
              {
                "id": "15",
                "left": null,
                "right": "16",
                "value": 15
              },
              {
                "id": "16",
                "left": null,
                "right": "17",
                "value": 16
              },
              {
                "id": "17",
                "left": null,
                "right": "18",
                "value": 17
              },
              {
                "id": "18",
                "left": null,
                "right": "19",
                "value": 18
              },
              {
                "id": "19",
                "left": null,
                "right": null,
                "value": 19
              }
            ],
            "root": "1"
          }
        },
        {
          "arguments": [
            20
          ],
          "method": "insert",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "1",
                "left": null,
                "right": "2",
                "value": 1
              },
              {
                "id": "2",
                "left": null,
                "right": "3",
                "value": 2
              },
              {
                "id": "3",
                "left": null,
                "right": "4",
                "value": 3
              },
              {
                "id": "4",
                "left": null,
                "right": "5",
                "value": 4
              },
              {
                "id": "5",
                "left": null,
                "right": "6",
                "value": 5
              },
              {
                "id": "6",
                "left": null,
                "right": "7",
                "value": 6
              },
              {
                "id": "7",
                "left": null,
                "right": "8",
                "value": 7
              },
              {
                "id": "8",
                "left": null,
                "right": "9",
                "value": 8
              },
              {
                "id": "9",
                "left": null,
                "right": "10",
                "value": 9
              },
              {
                "id": "10",
                "left": null,
                "right": "11",
                "value": 10
              },
              {
                "id": "11",
                "left": null,
                "right": "12",
                "value": 11
              },
              {
                "id": "12",
                "left": null,
                "right": "13",
                "value": 12
              },
              {
                "id": "13",
                "left": null,
                "right": "14",
                "value": 13
              },
              {
                "id": "14",
                "left": null,
                "right": "15",
                "value": 14
              },
              {
                "id": "15",
                "left": null,
                "right": "16",
                "value": 15
              },
              {
                "id": "16",
                "left": null,
                "right": "17",
                "value": 16
              },
              {
                "id": "17",
                "left": null,
                "right": "18",
                "value": 17
              },
              {
                "id": "18",
                "left": null,
                "right": "19",
                "value": 18
              },
              {
                "id": "19",
                "left": null,
                "right": "20",
                "value": 19
              },
              {
                "id": "20",
                "left": null,
                "right": null,
                "value": 20
              }
            ],
            "root": "1"
          }
        },
        {
          "arguments": [
            2
          ],
          "method": "remove",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "1",
                "left": null,
                "right": "3",
                "value": 1
              },
              {
                "id": "3",
                "left": null,
                "right": "4",
                "value": 3
              },
              {
                "id": "4",
                "left": null,
                "right": "5",
                "value": 4
              },
              {
                "id": "5",
                "left": null,
                "right": "6",
                "value": 5
              },
              {
                "id": "6",
                "left": null,
                "right": "7",
                "value": 6
              },
              {
                "id": "7",
                "left": null,
                "right": "8",
                "value": 7
              },
              {
                "id": "8",
                "left": null,
                "right": "9",
                "value": 8
              },
              {
                "id": "9",
                "left": null,
                "right": "10",
                "value": 9
              },
              {
                "id": "10",
                "left": null,
                "right": "11",
                "value": 10
              },
              {
                "id": "11",
                "left": null,
                "right": "12",
                "value": 11
              },
              {
                "id": "12",
                "left": null,
                "right": "13",
                "value": 12
              },
              {
                "id": "13",
                "left": null,
                "right": "14",
                "value": 13
              },
              {
                "id": "14",
                "left": null,
                "right": "15",
                "value": 14
              },
              {
                "id": "15",
                "left": null,
                "right": "16",
                "value": 15
              },
              {
                "id": "16",
                "left": null,
                "right": "17",
                "value": 16
              },
              {
                "id": "17",
                "left": null,
                "right": "18",
                "value": 17
              },
              {
                "id": "18",
                "left": null,
                "right": "19",
                "value": 18
              },
              {
                "id": "19",
                "left": null,
                "right": "20",
                "value": 19
              },
              {
                "id": "20",
                "left": null,
                "right": null,
                "value": 20
              }
            ],
            "root": "1"
          }
        },
        {
          "arguments": [
            4
          ],
          "method": "remove",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "1",
                "left": null,
                "right": "3",
                "value": 1
              },
              {
                "id": "3",
                "left": null,
                "right": "5",
                "value": 3
              },
              {
                "id": "5",
                "left": null,
                "right": "6",
                "value": 5
              },
              {
                "id": "6",
                "left": null,
                "right": "7",
                "value": 6
              },
              {
                "id": "7",
                "left": null,
                "right": "8",
                "value": 7
              },
              {
                "id": "8",
                "left": null,
                "right": "9",
                "value": 8
              },
              {
                "id": "9",
                "left": null,
                "right": "10",
                "value": 9
              },
              {
                "id": "10",
                "left": null,
                "right": "11",
                "value": 10
              },
              {
                "id": "11",
                "left": null,
                "right": "12",
                "value": 11
              },
              {
                "id": "12",
                "left": null,
                "right": "13",
                "value": 12
              },
              {
                "id": "13",
                "left": null,
                "right": "14",
                "value": 13
              },
              {
                "id": "14",
                "left": null,
                "right": "15",
                "value": 14
              },
              {
                "id": "15",
                "left": null,
                "right": "16",
                "value": 15
              },
              {
                "id": "16",
                "left": null,
                "right": "17",
                "value": 16
              },
              {
                "id": "17",
                "left": null,
                "right": "18",
                "value": 17
              },
              {
                "id": "18",
                "left": null,
                "right": "19",
                "value": 18
              },
              {
                "id": "19",
                "left": null,
                "right": "20",
                "value": 19
              },
              {
                "id": "20",
                "left": null,
                "right": null,
                "value": 20
              }
            ],
            "root": "1"
          }
        },
        {
          "arguments": [
            6
          ],
          "method": "remove",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "1",
                "left": null,
                "right": "3",
                "value": 1
              },
              {
                "id": "3",
                "left": null,
                "right": "5",
                "value": 3
              },
              {
                "id": "5",
                "left": null,
                "right": "7",
                "value": 5
              },
              {
                "id": "7",
                "left": null,
                "right": "8",
                "value": 7
              },
              {
                "id": "8",
                "left": null,
                "right": "9",
                "value": 8
              },
              {
                "id": "9",
                "left": null,
                "right": "10",
                "value": 9
              },
              {
                "id": "10",
                "left": null,
                "right": "11",
                "value": 10
              },
              {
                "id": "11",
                "left": null,
                "right": "12",
                "value": 11
              },
              {
                "id": "12",
                "left": null,
                "right": "13",
                "value": 12
              },
              {
                "id": "13",
                "left": null,
                "right": "14",
                "value": 13
              },
              {
                "id": "14",
                "left": null,
                "right": "15",
                "value": 14
              },
              {
                "id": "15",
                "left": null,
                "right": "16",
                "value": 15
              },
              {
                "id": "16",
                "left": null,
                "right": "17",
                "value": 16
              },
              {
                "id": "17",
                "left": null,
                "right": "18",
                "value": 17
              },
              {
                "id": "18",
                "left": null,
                "right": "19",
                "value": 18
              },
              {
                "id": "19",
                "left": null,
                "right": "20",
                "value": 19
              },
              {
                "id": "20",
                "left": null,
                "right": null,
                "value": 20
              }
            ],
            "root": "1"
          }
        },
        {
          "arguments": [
            8
          ],
          "method": "remove",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "1",
                "left": null,
                "right": "3",
                "value": 1
              },
              {
                "id": "3",
                "left": null,
                "right": "5",
                "value": 3
              },
              {
                "id": "5",
                "left": null,
                "right": "7",
                "value": 5
              },
              {
                "id": "7",
                "left": null,
                "right": "9",
                "value": 7
              },
              {
                "id": "9",
                "left": null,
                "right": "10",
                "value": 9
              },
              {
                "id": "10",
                "left": null,
                "right": "11",
                "value": 10
              },
              {
                "id": "11",
                "left": null,
                "right": "12",
                "value": 11
              },
              {
                "id": "12",
                "left": null,
                "right": "13",
                "value": 12
              },
              {
                "id": "13",
                "left": null,
                "right": "14",
                "value": 13
              },
              {
                "id": "14",
                "left": null,
                "right": "15",
                "value": 14
              },
              {
                "id": "15",
                "left": null,
                "right": "16",
                "value": 15
              },
              {
                "id": "16",
                "left": null,
                "right": "17",
                "value": 16
              },
              {
                "id": "17",
                "left": null,
                "right": "18",
                "value": 17
              },
              {
                "id": "18",
                "left": null,
                "right": "19",
                "value": 18
              },
              {
                "id": "19",
                "left": null,
                "right": "20",
                "value": 19
              },
              {
                "id": "20",
                "left": null,
                "right": null,
                "value": 20
              }
            ],
            "root": "1"
          }
        },
        {
          "arguments": [
            11
          ],
          "method": "remove",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "1",
                "left": null,
                "right": "3",
                "value": 1
              },
              {
                "id": "3",
                "left": null,
                "right": "5",
                "value": 3
              },
              {
                "id": "5",
                "left": null,
                "right": "7",
                "value": 5
              },
              {
                "id": "7",
                "left": null,
                "right": "9",
                "value": 7
              },
              {
                "id": "9",
                "left": null,
                "right": "10",
                "value": 9
              },
              {
                "id": "10",
                "left": null,
                "right": "12",
                "value": 10
              },
              {
                "id": "12",
                "left": null,
                "right": "13",
                "value": 12
              },
              {
                "id": "13",
                "left": null,
                "right": "14",
                "value": 13
              },
              {
                "id": "14",
                "left": null,
                "right": "15",
                "value": 14
              },
              {
                "id": "15",
                "left": null,
                "right": "16",
                "value": 15
              },
              {
                "id": "16",
                "left": null,
                "right": "17",
                "value": 16
              },
              {
                "id": "17",
                "left": null,
                "right": "18",
                "value": 17
              },
              {
                "id": "18",
                "left": null,
                "right": "19",
                "value": 18
              },
              {
                "id": "19",
                "left": null,
                "right": "20",
                "value": 19
              },
              {
                "id": "20",
                "left": null,
                "right": null,
                "value": 20
              }
            ],
            "root": "1"
          }
        },
        {
          "arguments": [
            13
          ],
          "method": "remove",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "1",
                "left": null,
                "right": "3",
                "value": 1
              },
              {
                "id": "3",
                "left": null,
                "right": "5",
                "value": 3
              },
              {
                "id": "5",
                "left": null,
                "right": "7",
                "value": 5
              },
              {
                "id": "7",
                "left": null,
                "right": "9",
                "value": 7
              },
              {
                "id": "9",
                "left": null,
                "right": "10",
                "value": 9
              },
              {
                "id": "10",
                "left": null,
                "right": "12",
                "value": 10
              },
              {
                "id": "12",
                "left": null,
                "right": "14",
                "value": 12
              },
              {
                "id": "14",
                "left": null,
                "right": "15",
                "value": 14
              },
              {
                "id": "15",
                "left": null,
                "right": "16",
                "value": 15
              },
              {
                "id": "16",
                "left": null,
                "right": "17",
                "value": 16
              },
              {
                "id": "17",
                "left": null,
                "right": "18",
                "value": 17
              },
              {
                "id": "18",
                "left": null,
                "right": "19",
                "value": 18
              },
              {
                "id": "19",
                "left": null,
                "right": "20",
                "value": 19
              },
              {
                "id": "20",
                "left": null,
                "right": null,
                "value": 20
              }
            ],
            "root": "1"
          }
        },
        {
          "arguments": [
            15
          ],
          "method": "remove",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "1",
                "left": null,
                "right": "3",
                "value": 1
              },
              {
                "id": "3",
                "left": null,
                "right": "5",
                "value": 3
              },
              {
                "id": "5",
                "left": null,
                "right": "7",
                "value": 5
              },
              {
                "id": "7",
                "left": null,
                "right": "9",
                "value": 7
              },
              {
                "id": "9",
                "left": null,
                "right": "10",
                "value": 9
              },
              {
                "id": "10",
                "left": null,
                "right": "12",
                "value": 10
              },
              {
                "id": "12",
                "left": null,
                "right": "14",
                "value": 12
              },
              {
                "id": "14",
                "left": null,
                "right": "16",
                "value": 14
              },
              {
                "id": "16",
                "left": null,
                "right": "17",
                "value": 16
              },
              {
                "id": "17",
                "left": null,
                "right": "18",
                "value": 17
              },
              {
                "id": "18",
                "left": null,
                "right": "19",
                "value": 18
              },
              {
                "id": "19",
                "left": null,
                "right": "20",
                "value": 19
              },
              {
                "id": "20",
                "left": null,
                "right": null,
                "value": 20
              }
            ],
            "root": "1"
          }
        },
        {
          "arguments": [
            17
          ],
          "method": "remove",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "1",
                "left": null,
                "right": "3",
                "value": 1
              },
              {
                "id": "3",
                "left": null,
                "right": "5",
                "value": 3
              },
              {
                "id": "5",
                "left": null,
                "right": "7",
                "value": 5
              },
              {
                "id": "7",
                "left": null,
                "right": "9",
                "value": 7
              },
              {
                "id": "9",
                "left": null,
                "right": "10",
                "value": 9
              },
              {
                "id": "10",
                "left": null,
                "right": "12",
                "value": 10
              },
              {
                "id": "12",
                "left": null,
                "right": "14",
                "value": 12
              },
              {
                "id": "14",
                "left": null,
                "right": "16",
                "value": 14
              },
              {
                "id": "16",
                "left": null,
                "right": "18",
                "value": 16
              },
              {
                "id": "18",
                "left": null,
                "right": "19",
                "value": 18
              },
              {
                "id": "19",
                "left": null,
                "right": "20",
                "value": 19
              },
              {
                "id": "20",
                "left": null,
                "right": null,
                "value": 20
              }
            ],
            "root": "1"
          }
        },
        {
          "arguments": [
            19
          ],
          "method": "remove",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "1",
                "left": null,
                "right": "3",
                "value": 1
              },
              {
                "id": "3",
                "left": null,
                "right": "5",
                "value": 3
              },
              {
                "id": "5",
                "left": null,
                "right": "7",
                "value": 5
              },
              {
                "id": "7",
                "left": null,
                "right": "9",
                "value": 7
              },
              {
                "id": "9",
                "left": null,
                "right": "10",
                "value": 9
              },
              {
                "id": "10",
                "left": null,
                "right": "12",
                "value": 10
              },
              {
                "id": "12",
                "left": null,
                "right": "14",
                "value": 12
              },
              {
                "id": "14",
                "left": null,
                "right": "16",
                "value": 14
              },
              {
                "id": "16",
                "left": null,
                "right": "18",
                "value": 16
              },
              {
                "id": "18",
                "left": null,
                "right": "20",
                "value": 18
              },
              {
                "id": "20",
                "left": null,
                "right": null,
                "value": 20
              }
            ],
            "root": "1"
          }
        },
        {
          "arguments": [
            1
          ],
          "method": "insert",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "1",
                "left": null,
                "right": "3",
                "value": 1
              },
              {
                "id": "3",
                "left": "1-2",
                "right": "5",
                "value": 3
              },
              {
                "id": "5",
                "left": null,
                "right": "7",
                "value": 5
              },
              {
                "id": "7",
                "left": null,
                "right": "9",
                "value": 7
              },
              {
                "id": "9",
                "left": null,
                "right": "10",
                "value": 9
              },
              {
                "id": "10",
                "left": null,
                "right": "12",
                "value": 10
              },
              {
                "id": "12",
                "left": null,
                "right": "14",
                "value": 12
              },
              {
                "id": "14",
                "left": null,
                "right": "16",
                "value": 14
              },
              {
                "id": "16",
                "left": null,
                "right": "18",
                "value": 16
              },
              {
                "id": "18",
                "left": null,
                "right": "20",
                "value": 18
              },
              {
                "id": "20",
                "left": null,
                "right": null,
                "value": 20
              },
              {
                "id": "1-2",
                "left": null,
                "right": null,
                "value": 1
              }
            ],
            "root": "1"
          }
        },
        {
          "arguments": [
            2
          ],
          "method": "insert",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "1",
                "left": null,
                "right": "3",
                "value": 1
              },
              {
                "id": "3",
                "left": "1-2",
                "right": "5",
                "value": 3
              },
              {
                "id": "5",
                "left": null,
                "right": "7",
                "value": 5
              },
              {
                "id": "7",
                "left": null,
                "right": "9",
                "value": 7
              },
              {
                "id": "9",
                "left": null,
                "right": "10",
                "value": 9
              },
              {
                "id": "10",
                "left": null,
                "right": "12",
                "value": 10
              },
              {
                "id": "12",
                "left": null,
                "right": "14",
                "value": 12
              },
              {
                "id": "14",
                "left": null,
                "right": "16",
                "value": 14
              },
              {
                "id": "16",
                "left": null,
                "right": "18",
                "value": 16
              },
              {
                "id": "18",
                "left": null,
                "right": "20",
                "value": 18
              },
              {
                "id": "20",
                "left": null,
                "right": null,
                "value": 20
              },
              {
                "id": "1-2",
                "left": null,
                "right": "2",
                "value": 1
              },
              {
                "id": "2",
                "left": null,
                "right": null,
                "value": 2
              }
            ],
            "root": "1"
          }
        },
        {
          "arguments": [
            3
          ],
          "method": "insert",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "1",
                "left": null,
                "right": "3",
                "value": 1
              },
              {
                "id": "3",
                "left": "1-2",
                "right": "5",
                "value": 3
              },
              {
                "id": "5",
                "left": "3-2",
                "right": "7",
                "value": 5
              },
              {
                "id": "7",
                "left": null,
                "right": "9",
                "value": 7
              },
              {
                "id": "9",
                "left": null,
                "right": "10",
                "value": 9
              },
              {
                "id": "10",
                "left": null,
                "right": "12",
                "value": 10
              },
              {
                "id": "12",
                "left": null,
                "right": "14",
                "value": 12
              },
              {
                "id": "14",
                "left": null,
                "right": "16",
                "value": 14
              },
              {
                "id": "16",
                "left": null,
                "right": "18",
                "value": 16
              },
              {
                "id": "18",
                "left": null,
                "right": "20",
                "value": 18
              },
              {
                "id": "20",
                "left": null,
                "right": null,
                "value": 20
              },
              {
                "id": "3-2",
                "left": null,
                "right": null,
                "value": 3
              },
              {
                "id": "1-2",
                "left": null,
                "right": "2",
                "value": 1
              },
              {
                "id": "2",
                "left": null,
                "right": null,
                "value": 2
              }
            ],
            "root": "1"
          }
        },
        {
          "arguments": [
            4
          ],
          "method": "insert",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "1",
                "left": null,
                "right": "3",
                "value": 1
              },
              {
                "id": "3",
                "left": "1-2",
                "right": "5",
                "value": 3
              },
              {
                "id": "5",
                "left": "3-2",
                "right": "7",
                "value": 5
              },
              {
                "id": "7",
                "left": null,
                "right": "9",
                "value": 7
              },
              {
                "id": "9",
                "left": null,
                "right": "10",
                "value": 9
              },
              {
                "id": "10",
                "left": null,
                "right": "12",
                "value": 10
              },
              {
                "id": "12",
                "left": null,
                "right": "14",
                "value": 12
              },
              {
                "id": "14",
                "left": null,
                "right": "16",
                "value": 14
              },
              {
                "id": "16",
                "left": null,
                "right": "18",
                "value": 16
              },
              {
                "id": "18",
                "left": null,
                "right": "20",
                "value": 18
              },
              {
                "id": "20",
                "left": null,
                "right": null,
                "value": 20
              },
              {
                "id": "3-2",
                "left": null,
                "right": "4",
                "value": 3
              },
              {
                "id": "4",
                "left": null,
                "right": null,
                "value": 4
              },
              {
                "id": "1-2",
                "left": null,
                "right": "2",
                "value": 1
              },
              {
                "id": "2",
                "left": null,
                "right": null,
                "value": 2
              }
            ],
            "root": "1"
          }
        },
        {
          "arguments": [
            5
          ],
          "method": "insert",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "1",
                "left": null,
                "right": "3",
                "value": 1
              },
              {
                "id": "3",
                "left": "1-2",
                "right": "5",
                "value": 3
              },
              {
                "id": "5",
                "left": "3-2",
                "right": "7",
                "value": 5
              },
              {
                "id": "7",
                "left": "5-2",
                "right": "9",
                "value": 7
              },
              {
                "id": "9",
                "left": null,
                "right": "10",
                "value": 9
              },
              {
                "id": "10",
                "left": null,
                "right": "12",
                "value": 10
              },
              {
                "id": "12",
                "left": null,
                "right": "14",
                "value": 12
              },
              {
                "id": "14",
                "left": null,
                "right": "16",
                "value": 14
              },
              {
                "id": "16",
                "left": null,
                "right": "18",
                "value": 16
              },
              {
                "id": "18",
                "left": null,
                "right": "20",
                "value": 18
              },
              {
                "id": "20",
                "left": null,
                "right": null,
                "value": 20
              },
              {
                "id": "5-2",
                "left": null,
                "right": null,
                "value": 5
              },
              {
                "id": "3-2",
                "left": null,
                "right": "4",
                "value": 3
              },
              {
                "id": "4",
                "left": null,
                "right": null,
                "value": 4
              },
              {
                "id": "1-2",
                "left": null,
                "right": "2",
                "value": 1
              },
              {
                "id": "2",
                "left": null,
                "right": null,
                "value": 2
              }
            ],
            "root": "1"
          }
        },
        {
          "arguments": [
            6
          ],
          "method": "insert",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "1",
                "left": null,
                "right": "3",
                "value": 1
              },
              {
                "id": "3",
                "left": "1-2",
                "right": "5",
                "value": 3
              },
              {
                "id": "5",
                "left": "3-2",
                "right": "7",
                "value": 5
              },
              {
                "id": "7",
                "left": "5-2",
                "right": "9",
                "value": 7
              },
              {
                "id": "9",
                "left": null,
                "right": "10",
                "value": 9
              },
              {
                "id": "10",
                "left": null,
                "right": "12",
                "value": 10
              },
              {
                "id": "12",
                "left": null,
                "right": "14",
                "value": 12
              },
              {
                "id": "14",
                "left": null,
                "right": "16",
                "value": 14
              },
              {
                "id": "16",
                "left": null,
                "right": "18",
                "value": 16
              },
              {
                "id": "18",
                "left": null,
                "right": "20",
                "value": 18
              },
              {
                "id": "20",
                "left": null,
                "right": null,
                "value": 20
              },
              {
                "id": "5-2",
                "left": null,
                "right": "6",
                "value": 5
              },
              {
                "id": "6",
                "left": null,
                "right": null,
                "value": 6
              },
              {
                "id": "3-2",
                "left": null,
                "right": "4",
                "value": 3
              },
              {
                "id": "4",
                "left": null,
                "right": null,
                "value": 4
              },
              {
                "id": "1-2",
                "left": null,
                "right": "2",
                "value": 1
              },
              {
                "id": "2",
                "left": null,
                "right": null,
                "value": 2
              }
            ],
            "root": "1"
          }
        },
        {
          "arguments": [
            7
          ],
          "method": "insert",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "1",
                "left": null,
                "right": "3",
                "value": 1
              },
              {
                "id": "3",
                "left": "1-2",
                "right": "5",
                "value": 3
              },
              {
                "id": "5",
                "left": "3-2",
                "right": "7",
                "value": 5
              },
              {
                "id": "7",
                "left": "5-2",
                "right": "9",
                "value": 7
              },
              {
                "id": "9",
                "left": "7-2",
                "right": "10",
                "value": 9
              },
              {
                "id": "10",
                "left": null,
                "right": "12",
                "value": 10
              },
              {
                "id": "12",
                "left": null,
                "right": "14",
                "value": 12
              },
              {
                "id": "14",
                "left": null,
                "right": "16",
                "value": 14
              },
              {
                "id": "16",
                "left": null,
                "right": "18",
                "value": 16
              },
              {
                "id": "18",
                "left": null,
                "right": "20",
                "value": 18
              },
              {
                "id": "20",
                "left": null,
                "right": null,
                "value": 20
              },
              {
                "id": "7-2",
                "left": null,
                "right": null,
                "value": 7
              },
              {
                "id": "5-2",
                "left": null,
                "right": "6",
                "value": 5
              },
              {
                "id": "6",
                "left": null,
                "right": null,
                "value": 6
              },
              {
                "id": "3-2",
                "left": null,
                "right": "4",
                "value": 3
              },
              {
                "id": "4",
                "left": null,
                "right": null,
                "value": 4
              },
              {
                "id": "1-2",
                "left": null,
                "right": "2",
                "value": 1
              },
              {
                "id": "2",
                "left": null,
                "right": null,
                "value": 2
              }
            ],
            "root": "1"
          }
        },
        {
          "arguments": [
            8
          ],
          "method": "insert",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "1",
                "left": null,
                "right": "3",
                "value": 1
              },
              {
                "id": "3",
                "left": "1-2",
                "right": "5",
                "value": 3
              },
              {
                "id": "5",
                "left": "3-2",
                "right": "7",
                "value": 5
              },
              {
                "id": "7",
                "left": "5-2",
                "right": "9",
                "value": 7
              },
              {
                "id": "9",
                "left": "7-2",
                "right": "10",
                "value": 9
              },
              {
                "id": "10",
                "left": null,
                "right": "12",
                "value": 10
              },
              {
                "id": "12",
                "left": null,
                "right": "14",
                "value": 12
              },
              {
                "id": "14",
                "left": null,
                "right": "16",
                "value": 14
              },
              {
                "id": "16",
                "left": null,
                "right": "18",
                "value": 16
              },
              {
                "id": "18",
                "left": null,
                "right": "20",
                "value": 18
              },
              {
                "id": "20",
                "left": null,
                "right": null,
                "value": 20
              },
              {
                "id": "7-2",
                "left": null,
                "right": "8",
                "value": 7
              },
              {
                "id": "8",
                "left": null,
                "right": null,
                "value": 8
              },
              {
                "id": "5-2",
                "left": null,
                "right": "6",
                "value": 5
              },
              {
                "id": "6",
                "left": null,
                "right": null,
                "value": 6
              },
              {
                "id": "3-2",
                "left": null,
                "right": "4",
                "value": 3
              },
              {
                "id": "4",
                "left": null,
                "right": null,
                "value": 4
              },
              {
                "id": "1-2",
                "left": null,
                "right": "2",
                "value": 1
              },
              {
                "id": "2",
                "left": null,
                "right": null,
                "value": 2
              }
            ],
            "root": "1"
          }
        },
        {
          "arguments": [
            9
          ],
          "method": "insert",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "1",
                "left": null,
                "right": "3",
                "value": 1
              },
              {
                "id": "3",
                "left": "1-2",
                "right": "5",
                "value": 3
              },
              {
                "id": "5",
                "left": "3-2",
                "right": "7",
                "value": 5
              },
              {
                "id": "7",
                "left": "5-2",
                "right": "9",
                "value": 7
              },
              {
                "id": "9",
                "left": "7-2",
                "right": "10",
                "value": 9
              },
              {
                "id": "10",
                "left": "9-2",
                "right": "12",
                "value": 10
              },
              {
                "id": "12",
                "left": null,
                "right": "14",
                "value": 12
              },
              {
                "id": "14",
                "left": null,
                "right": "16",
                "value": 14
              },
              {
                "id": "16",
                "left": null,
                "right": "18",
                "value": 16
              },
              {
                "id": "18",
                "left": null,
                "right": "20",
                "value": 18
              },
              {
                "id": "20",
                "left": null,
                "right": null,
                "value": 20
              },
              {
                "id": "9-2",
                "left": null,
                "right": null,
                "value": 9
              },
              {
                "id": "7-2",
                "left": null,
                "right": "8",
                "value": 7
              },
              {
                "id": "8",
                "left": null,
                "right": null,
                "value": 8
              },
              {
                "id": "5-2",
                "left": null,
                "right": "6",
                "value": 5
              },
              {
                "id": "6",
                "left": null,
                "right": null,
                "value": 6
              },
              {
                "id": "3-2",
                "left": null,
                "right": "4",
                "value": 3
              },
              {
                "id": "4",
                "left": null,
                "right": null,
                "value": 4
              },
              {
                "id": "1-2",
                "left": null,
                "right": "2",
                "value": 1
              },
              {
                "id": "2",
                "left": null,
                "right": null,
                "value": 2
              }
            ],
            "root": "1"
          }
        },
        {
          "arguments": [
            10
          ],
          "method": "insert",
          "output": null,
          "tree": {
            "nodes": [
              {
                "id": "1",
                "left": null,
                "right": "3",
                "value": 1
              },
              {
                "id": "3",
                "left": "1-2",
                "right": "5",
                "value": 3
              },
              {
                "id": "5",
                "left": "3-2",
                "right": "7",
                "value": 5
              },
              {
                "id": "7",
                "left": "5-2",
                "right": "9",
                "value": 7
              },
              {
                "id": "9",
                "left": "7-2",
                "right": "10",
                "value": 9
              },
              {
                "id": "10",
                "left": "9-2",
                "right": "12",
                "value": 10
              },
              {
                "id": "12",
                "left": "10-2",
                "right": "14",
                "value": 12
              },
              {
                "id": "14",
                "left": null,
                "right": "16",
                "value": 14
              },
              {
                "id": "16",
                "left": null,
                "right": "18",
                "value": 16
              },
              {
                "id": "18",
                "left": null,
                "right": "20",
                "value": 18
              },
              {
                "id": "20",
                "left": null,
                "right": null,
                "value": 20
              },
              {
                "id": "10-2",
                "left": null,
                "right": null,
                "value": 10
              },
              {
                "id": "9-2",
                "left": null,
                "right": null,
                "value": 9
              },
              {
                "id": "7-2",
                "left": null,
                "right": "8",
                "value": 7
              },
              {
                "id": "8",
                "left": null,
                "right": null,
                "value": 8
              },
              {
                "id": "5-2",
                "left": null,
                "right": "6",
                "value": 5
              },
              {
                "id": "6",
                "left": null,
                "right": null,
                "value": 6
              },
              {
                "id": "3-2",
                "left": null,
                "right": "4",
                "value": 3
              },
              {
                "id": "4",
                "left": null,
                "right": null,
                "value": 4
              },
              {
                "id": "1-2",
                "left": null,
                "right": "2",
                "value": 1
              },
              {
                "id": "2",
                "left": null,
                "right": null,
                "value": 2
              }
            ],
            "root": "1"
          }
        },
        {
          "arguments": [
            9000
          ],
          "method": "contains",
          "output": false,
          "tree": {
            "nodes": [
              {
                "id": "1",
                "left": null,
                "right": "3",
                "value": 1
              },
              {
                "id": "3",
                "left": "1-2",
                "right": "5",
                "value": 3
              },
              {
                "id": "5",
                "left": "3-2",
                "right": "7",
                "value": 5
              },
              {
                "id": "7",
                "left": "5-2",
                "right": "9",
                "value": 7
              },
              {
                "id": "9",
                "left": "7-2",
                "right": "10",
                "value": 9
              },
              {
                "id": "10",
                "left": "9-2",
                "right": "12",
                "value": 10
              },
              {
                "id": "12",
                "left": "10-2",
                "right": "14",
                "value": 12
              },
              {
                "id": "14",
                "left": null,
                "right": "16",
                "value": 14
              },
              {
                "id": "16",
                "left": null,
                "right": "18",
                "value": 16
              },
              {
                "id": "18",
                "left": null,
                "right": "20",
                "value": 18
              },
              {
                "id": "20",
                "left": null,
                "right": null,
                "value": 20
              },
              {
                "id": "10-2",
                "left": null,
                "right": null,
                "value": 10
              },
              {
                "id": "9-2",
                "left": null,
                "right": null,
                "value": 9
              },
              {
                "id": "7-2",
                "left": null,
                "right": "8",
                "value": 7
              },
              {
                "id": "8",
                "left": null,
                "right": null,
                "value": 8
              },
              {
                "id": "5-2",
                "left": null,
                "right": "6",
                "value": 5
              },
              {
                "id": "6",
                "left": null,
                "right": null,
                "value": 6
              },
              {
                "id": "3-2",
                "left": null,
                "right": "4",
                "value": 3
              },
              {
                "id": "4",
                "left": null,
                "right": null,
                "value": 4
              },
              {
                "id": "1-2",
                "left": null,
                "right": "2",
                "value": 1
              },
              {
                "id": "2",
                "left": null,
                "right": null,
                "value": 2
              }
            ],
            "root": "1"
          }
        }
      ]
    ]
  ]
}